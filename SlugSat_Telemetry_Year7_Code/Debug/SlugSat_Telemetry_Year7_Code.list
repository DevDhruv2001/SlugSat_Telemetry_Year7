
SlugSat_Telemetry_Year7_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa3c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  0800ab78  0800ab78  0001ab78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1f8  0800b1f8  00020344  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1f8  0800b1f8  0001b1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b200  0800b200  00020344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b200  0800b200  0001b200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b204  0800b204  0001b204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000344  20000000  0800b208  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b60  20000344  0800b54c  00020344  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ea4  0800b54c  00021ea4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020344  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121fc  00000000  00000000  0002036d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003280  00000000  00000000  00032569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  000357f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  00036738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e1e  00000000  00000000  00037528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130f8  00000000  00000000  00051346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d8a3  00000000  00000000  0006443e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1ce1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049a4  00000000  00000000  000f1d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000344 	.word	0x20000344
 8000158:	00000000 	.word	0x00000000
 800015c:	0800ab60 	.word	0x0800ab60

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000348 	.word	0x20000348
 8000178:	0800ab60 	.word	0x0800ab60

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <CC1200_Init>:
 * @param CS_Pin: GPIO pin
 * @param HSPI: SPI handler
 * @retval none
 */
void CC1200_Init(CC1200_t* SPI_Info, uint8_t* MISO_Data, GPIO_TypeDef* CS_Port, uint16_t CS_Pin, SPI_HandleTypeDef* HSPI)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0
 800048a:	60f8      	str	r0, [r7, #12]
 800048c:	60b9      	str	r1, [r7, #8]
 800048e:	607a      	str	r2, [r7, #4]
 8000490:	807b      	strh	r3, [r7, #2]
	SPI_Info -> MISO_Data = MISO_Data;
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	68ba      	ldr	r2, [r7, #8]
 8000496:	601a      	str	r2, [r3, #0]
	SPI_Info -> CS_Port = CS_Port;
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	605a      	str	r2, [r3, #4]
	SPI_Info -> CS_Pin = CS_Pin;
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	887a      	ldrh	r2, [r7, #2]
 80004a2:	811a      	strh	r2, [r3, #8]
	SPI_Info -> HSPI = HSPI;
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	69ba      	ldr	r2, [r7, #24]
 80004a8:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	6858      	ldr	r0, [r3, #4]
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	891b      	ldrh	r3, [r3, #8]
 80004b2:	2201      	movs	r2, #1
 80004b4:	4619      	mov	r1, r3
 80004b6:	f000 ffe9 	bl	800148c <HAL_GPIO_WritePin>
}
 80004ba:	bf00      	nop
 80004bc:	3710      	adds	r7, #16
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <CC1200_Configure>:
 * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
 * @param setting : structure with register addresses and associated values
 * @retval Success (0) or Error (1)
 */
uint8_t CC1200_Configure(CC1200_t* SPI_Info, RegisterSetting_t* Register_Setting, RegisterSetting_t* Extended_Register_Setting)
{
 80004c2:	b580      	push	{r7, lr}
 80004c4:	b086      	sub	sp, #24
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	60f8      	str	r0, [r7, #12]
 80004ca:	60b9      	str	r1, [r7, #8]
 80004cc:	607a      	str	r2, [r7, #4]
	uint8_t retval = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	75fb      	strb	r3, [r7, #23]

	CC1200_Command_Strobe(SPI_Info, CC1200_COMMAND_SRES); // reset the chip
 80004d2:	2130      	movs	r1, #48	; 0x30
 80004d4:	68f8      	ldr	r0, [r7, #12]
 80004d6:	f000 f97e 	bl	80007d6 <CC1200_Command_Strobe>

	uint8_t Address;
	uint8_t ConfigIndex = 0;
 80004da:	2300      	movs	r3, #0
 80004dc:	757b      	strb	r3, [r7, #21]
	// configure standard registers
	for (Address = 0x00; Address < 0x2F; Address++)
 80004de:	2300      	movs	r3, #0
 80004e0:	75bb      	strb	r3, [r7, #22]
 80004e2:	e028      	b.n	8000536 <CC1200_Configure+0x74>
	{
		// If at the next desired address to configure, then configure it
		if (Address == Register_Setting[ConfigIndex].Address)
 80004e4:	7d7b      	ldrb	r3, [r7, #21]
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	68ba      	ldr	r2, [r7, #8]
 80004ea:	4413      	add	r3, r2
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	7dba      	ldrb	r2, [r7, #22]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d11d      	bne.n	8000530 <CC1200_Configure+0x6e>
		{
			CC1200_Write_Single_Register(SPI_Info, Address, Register_Setting[ConfigIndex].Value);
 80004f4:	7d7b      	ldrb	r3, [r7, #21]
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	68ba      	ldr	r2, [r7, #8]
 80004fa:	4413      	add	r3, r2
 80004fc:	785a      	ldrb	r2, [r3, #1]
 80004fe:	7dbb      	ldrb	r3, [r7, #22]
 8000500:	4619      	mov	r1, r3
 8000502:	68f8      	ldr	r0, [r7, #12]
 8000504:	f000 f850 	bl	80005a8 <CC1200_Write_Single_Register>
			CC1200_Read_Single_Register(SPI_Info, Address);
 8000508:	7dbb      	ldrb	r3, [r7, #22]
 800050a:	4619      	mov	r1, r3
 800050c:	68f8      	ldr	r0, [r7, #12]
 800050e:	f000 f87d 	bl	800060c <CC1200_Read_Single_Register>
			if (*(SPI_Info->MISO_Data) != Register_Setting[ConfigIndex].Value)
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	781a      	ldrb	r2, [r3, #0]
 8000518:	7d7b      	ldrb	r3, [r7, #21]
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	68b9      	ldr	r1, [r7, #8]
 800051e:	440b      	add	r3, r1
 8000520:	785b      	ldrb	r3, [r3, #1]
 8000522:	429a      	cmp	r2, r3
 8000524:	d001      	beq.n	800052a <CC1200_Configure+0x68>
			{
				retval = 1;
 8000526:	2301      	movs	r3, #1
 8000528:	75fb      	strb	r3, [r7, #23]
			}
			ConfigIndex++;
 800052a:	7d7b      	ldrb	r3, [r7, #21]
 800052c:	3301      	adds	r3, #1
 800052e:	757b      	strb	r3, [r7, #21]
	for (Address = 0x00; Address < 0x2F; Address++)
 8000530:	7dbb      	ldrb	r3, [r7, #22]
 8000532:	3301      	adds	r3, #1
 8000534:	75bb      	strb	r3, [r7, #22]
 8000536:	7dbb      	ldrb	r3, [r7, #22]
 8000538:	2b2e      	cmp	r3, #46	; 0x2e
 800053a:	d9d3      	bls.n	80004e4 <CC1200_Configure+0x22>
		}
	}

	ConfigIndex = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	757b      	strb	r3, [r7, #21]
	// configure extended registers
	for (Address = 0x00; Address <= 0xDA; Address++)
 8000540:	2300      	movs	r3, #0
 8000542:	75bb      	strb	r3, [r7, #22]
 8000544:	e028      	b.n	8000598 <CC1200_Configure+0xd6>
	{
		// If at the next desired address to configure, then configure it
		if (Address == Extended_Register_Setting[ConfigIndex].Address)
 8000546:	7d7b      	ldrb	r3, [r7, #21]
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	4413      	add	r3, r2
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	7dba      	ldrb	r2, [r7, #22]
 8000552:	429a      	cmp	r2, r3
 8000554:	d11d      	bne.n	8000592 <CC1200_Configure+0xd0>
		{
			CC1200_Write_Single_Extended_Register(SPI_Info, Address, Extended_Register_Setting[ConfigIndex].Value);
 8000556:	7d7b      	ldrb	r3, [r7, #21]
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	4413      	add	r3, r2
 800055e:	785a      	ldrb	r2, [r3, #1]
 8000560:	7dbb      	ldrb	r3, [r7, #22]
 8000562:	4619      	mov	r1, r3
 8000564:	68f8      	ldr	r0, [r7, #12]
 8000566:	f000 f891 	bl	800068c <CC1200_Write_Single_Extended_Register>
			CC1200_Read_Single_Extended_Register(SPI_Info, Address);
 800056a:	7dbb      	ldrb	r3, [r7, #22]
 800056c:	4619      	mov	r1, r3
 800056e:	68f8      	ldr	r0, [r7, #12]
 8000570:	f000 f8de 	bl	8000730 <CC1200_Read_Single_Extended_Register>
			if (*(SPI_Info->MISO_Data) != Extended_Register_Setting[ConfigIndex].Value)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	781a      	ldrb	r2, [r3, #0]
 800057a:	7d7b      	ldrb	r3, [r7, #21]
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	440b      	add	r3, r1
 8000582:	785b      	ldrb	r3, [r3, #1]
 8000584:	429a      	cmp	r2, r3
 8000586:	d001      	beq.n	800058c <CC1200_Configure+0xca>
			{
				retval = 1;
 8000588:	2301      	movs	r3, #1
 800058a:	75fb      	strb	r3, [r7, #23]
			}
			ConfigIndex++;
 800058c:	7d7b      	ldrb	r3, [r7, #21]
 800058e:	3301      	adds	r3, #1
 8000590:	757b      	strb	r3, [r7, #21]
	for (Address = 0x00; Address <= 0xDA; Address++)
 8000592:	7dbb      	ldrb	r3, [r7, #22]
 8000594:	3301      	adds	r3, #1
 8000596:	75bb      	strb	r3, [r7, #22]
 8000598:	7dbb      	ldrb	r3, [r7, #22]
 800059a:	2bda      	cmp	r3, #218	; 0xda
 800059c:	d9d3      	bls.n	8000546 <CC1200_Configure+0x84>
		}
	}

	return(retval);
 800059e:	7dfb      	ldrb	r3, [r7, #23]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3718      	adds	r7, #24
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <CC1200_Write_Single_Register>:
  * @param Register_Address : address of register
  * @param Register_Value : value to write to register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Write_Single_Register(CC1200_t* SPI_Info, uint8_t Register_Address, uint8_t Register_Value)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af02      	add	r7, sp, #8
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	460b      	mov	r3, r1
 80005b2:	70fb      	strb	r3, [r7, #3]
 80005b4:	4613      	mov	r3, r2
 80005b6:	70bb      	strb	r3, [r7, #2]
	uint8_t retval;
//	char Message[100];
//	uint16_t Message_Length;

	if (Register_Address < 0x2F)
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	2b2e      	cmp	r3, #46	; 0x2e
 80005bc:	d81f      	bhi.n	80005fe <CC1200_Write_Single_Register+0x56>
	{
		uint8_t Header_Byte = 0x00 | Register_Address; // 0000 0000 | 0 0 A5 A4 A3 A2 A1 A0
 80005be:	78fb      	ldrb	r3, [r7, #3]
 80005c0:	73bb      	strb	r3, [r7, #14]
		//uint8_t MOSI_Data[2] = {Header_Byte, Register_Value};

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6858      	ldr	r0, [r3, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	891b      	ldrh	r3, [r3, #8]
 80005ca:	2200      	movs	r2, #0
 80005cc:	4619      	mov	r1, r3
 80005ce:	f000 ff5d 	bl	800148c <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 2, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	68d8      	ldr	r0, [r3, #12]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	f107 010e 	add.w	r1, r7, #14
 80005de:	2364      	movs	r3, #100	; 0x64
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2301      	movs	r3, #1
 80005e4:	f003 fa2d 	bl	8003a42 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	6858      	ldr	r0, [r3, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	891b      	ldrh	r3, [r3, #8]
 80005f0:	2201      	movs	r2, #1
 80005f2:	4619      	mov	r1, r3
 80005f4:	f000 ff4a 	bl	800148c <HAL_GPIO_WritePin>

		retval = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	73fb      	strb	r3, [r7, #15]
 80005fc:	e001      	b.n	8000602 <CC1200_Write_Single_Register+0x5a>
	}
	else
	{
		retval = 1;
 80005fe:	2301      	movs	r3, #1
 8000600:	73fb      	strb	r3, [r7, #15]
	}

	return retval;
 8000602:	7bfb      	ldrb	r3, [r7, #15]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <CC1200_Read_Single_Register>:
  * 	B   = 0
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Read_Single_Register(CC1200_t* SPI_Info, uint8_t Register_Address)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af02      	add	r7, sp, #8
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	460b      	mov	r3, r1
 8000616:	70fb      	strb	r3, [r7, #3]
	uint8_t retval;
//	char Message[100];
//	uint16_t Message_Length;

	if (Register_Address < 0x2F)
 8000618:	78fb      	ldrb	r3, [r7, #3]
 800061a:	2b2e      	cmp	r3, #46	; 0x2e
 800061c:	d82f      	bhi.n	800067e <CC1200_Read_Single_Register+0x72>
	{
		uint8_t Header_Byte = 0x80 | Register_Address; // 1000 0000 | 0 0 A5 A4 A3 A2 A1 A0
 800061e:	78fb      	ldrb	r3, [r7, #3]
 8000620:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000624:	b2db      	uxtb	r3, r3
 8000626:	73bb      	strb	r3, [r7, #14]
		uint8_t Placeholder = 0x00;
 8000628:	2300      	movs	r3, #0
 800062a:	737b      	strb	r3, [r7, #13]
		//uint8_t MOSI_Data[2] = {Header_Byte, Placeholder};

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	6858      	ldr	r0, [r3, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	891b      	ldrh	r3, [r3, #8]
 8000634:	2200      	movs	r2, #0
 8000636:	4619      	mov	r1, r3
 8000638:	f000 ff28 	bl	800148c <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 2, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	68d8      	ldr	r0, [r3, #12]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	f107 010e 	add.w	r1, r7, #14
 8000648:	2364      	movs	r3, #100	; 0x64
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	2301      	movs	r3, #1
 800064e:	f003 f9f8 	bl	8003a42 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	68d8      	ldr	r0, [r3, #12]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	f107 010d 	add.w	r1, r7, #13
 800065e:	2364      	movs	r3, #100	; 0x64
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	2301      	movs	r3, #1
 8000664:	f003 f9ed 	bl	8003a42 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	6858      	ldr	r0, [r3, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	891b      	ldrh	r3, [r3, #8]
 8000670:	2201      	movs	r2, #1
 8000672:	4619      	mov	r1, r3
 8000674:	f000 ff0a 	bl	800148c <HAL_GPIO_WritePin>

		retval = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	73fb      	strb	r3, [r7, #15]
 800067c:	e001      	b.n	8000682 <CC1200_Read_Single_Register+0x76>
	}
	else
	{
		retval = 1;
 800067e:	2301      	movs	r3, #1
 8000680:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 8000682:	7bfb      	ldrb	r3, [r7, #15]
}
 8000684:	4618      	mov	r0, r3
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <CC1200_Write_Single_Extended_Register>:
  * @param Register_Address : address of register
  * @param Register_Value : value to write to register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Write_Single_Extended_Register(CC1200_t* SPI_Info, uint8_t Register_Address, uint8_t Register_Value)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af02      	add	r7, sp, #8
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	460b      	mov	r3, r1
 8000696:	70fb      	strb	r3, [r7, #3]
 8000698:	4613      	mov	r3, r2
 800069a:	70bb      	strb	r3, [r7, #2]
	uint8_t retval;
//	char Message[100];
//	uint16_t Message_Length;

	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 800069c:	78fb      	ldrb	r3, [r7, #3]
 800069e:	2b39      	cmp	r3, #57	; 0x39
 80006a0:	d902      	bls.n	80006a8 <CC1200_Write_Single_Extended_Register+0x1c>
 80006a2:	78fb      	ldrb	r3, [r7, #3]
 80006a4:	2b63      	cmp	r3, #99	; 0x63
 80006a6:	d908      	bls.n	80006ba <CC1200_Write_Single_Extended_Register+0x2e>
 80006a8:	78fb      	ldrb	r3, [r7, #3]
 80006aa:	2ba2      	cmp	r3, #162	; 0xa2
 80006ac:	d902      	bls.n	80006b4 <CC1200_Write_Single_Extended_Register+0x28>
 80006ae:	78fb      	ldrb	r3, [r7, #3]
 80006b0:	2bd1      	cmp	r3, #209	; 0xd1
 80006b2:	d902      	bls.n	80006ba <CC1200_Write_Single_Extended_Register+0x2e>
			(Register_Address >= 0xDB))
 80006b4:	78fb      	ldrb	r3, [r7, #3]
	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 80006b6:	2bda      	cmp	r3, #218	; 0xda
 80006b8:	d902      	bls.n	80006c0 <CC1200_Write_Single_Extended_Register+0x34>
	{
		retval = 1;
 80006ba:	2301      	movs	r3, #1
 80006bc:	73fb      	strb	r3, [r7, #15]
 80006be:	e032      	b.n	8000726 <CC1200_Write_Single_Extended_Register+0x9a>
	}
	else
	{
		uint8_t Header_Byte = 0x00 | 0x2F; // 0000 0000 | 0 0 1 0 1 1 1 1
 80006c0:	232f      	movs	r3, #47	; 0x2f
 80006c2:	73bb      	strb	r3, [r7, #14]
		//uint8_t MOSI_Data[3] = {Header_Byte, Register_Address, Register_Value};

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	6858      	ldr	r0, [r3, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	891b      	ldrh	r3, [r3, #8]
 80006cc:	2200      	movs	r2, #0
 80006ce:	4619      	mov	r1, r3
 80006d0:	f000 fedc 	bl	800148c <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 3, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	68d8      	ldr	r0, [r3, #12]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	f107 010e 	add.w	r1, r7, #14
 80006e0:	2364      	movs	r3, #100	; 0x64
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	2301      	movs	r3, #1
 80006e6:	f003 f9ac 	bl	8003a42 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Address, SPI_Info -> MISO_Data, 1, 100);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	68d8      	ldr	r0, [r3, #12]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	1cf9      	adds	r1, r7, #3
 80006f4:	2364      	movs	r3, #100	; 0x64
 80006f6:	9300      	str	r3, [sp, #0]
 80006f8:	2301      	movs	r3, #1
 80006fa:	f003 f9a2 	bl	8003a42 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Value, SPI_Info -> MISO_Data, 1, 100);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	68d8      	ldr	r0, [r3, #12]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	1cb9      	adds	r1, r7, #2
 8000708:	2364      	movs	r3, #100	; 0x64
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2301      	movs	r3, #1
 800070e:	f003 f998 	bl	8003a42 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6858      	ldr	r0, [r3, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	891b      	ldrh	r3, [r3, #8]
 800071a:	2201      	movs	r2, #1
 800071c:	4619      	mov	r1, r3
 800071e:	f000 feb5 	bl	800148c <HAL_GPIO_WritePin>

		retval = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 8000726:	7bfb      	ldrb	r3, [r7, #15]
}
 8000728:	4618      	mov	r0, r3
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <CC1200_Read_Single_Extended_Register>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Read_Single_Extended_Register(CC1200_t* SPI_Info, uint8_t Register_Address)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af02      	add	r7, sp, #8
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	460b      	mov	r3, r1
 800073a:	70fb      	strb	r3, [r7, #3]
	uint8_t retval;
//	char Message[100];
//	uint16_t Message_Length;

	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 800073c:	78fb      	ldrb	r3, [r7, #3]
 800073e:	2b39      	cmp	r3, #57	; 0x39
 8000740:	d902      	bls.n	8000748 <CC1200_Read_Single_Extended_Register+0x18>
 8000742:	78fb      	ldrb	r3, [r7, #3]
 8000744:	2b63      	cmp	r3, #99	; 0x63
 8000746:	d908      	bls.n	800075a <CC1200_Read_Single_Extended_Register+0x2a>
 8000748:	78fb      	ldrb	r3, [r7, #3]
 800074a:	2ba2      	cmp	r3, #162	; 0xa2
 800074c:	d902      	bls.n	8000754 <CC1200_Read_Single_Extended_Register+0x24>
 800074e:	78fb      	ldrb	r3, [r7, #3]
 8000750:	2bd1      	cmp	r3, #209	; 0xd1
 8000752:	d902      	bls.n	800075a <CC1200_Read_Single_Extended_Register+0x2a>
				(Register_Address >= 0xDB))
 8000754:	78fb      	ldrb	r3, [r7, #3]
	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 8000756:	2bda      	cmp	r3, #218	; 0xda
 8000758:	d902      	bls.n	8000760 <CC1200_Read_Single_Extended_Register+0x30>
	{
		retval = 1;
 800075a:	2301      	movs	r3, #1
 800075c:	73fb      	strb	r3, [r7, #15]
 800075e:	e035      	b.n	80007cc <CC1200_Read_Single_Extended_Register+0x9c>
	}
	else
	{
		uint8_t Header_Byte = 0x80 | 0x2F; // 1000 0000 | 0 0 1 0 1 1 1 1
 8000760:	23af      	movs	r3, #175	; 0xaf
 8000762:	73bb      	strb	r3, [r7, #14]
		uint8_t Placeholder = 0x00;
 8000764:	2300      	movs	r3, #0
 8000766:	737b      	strb	r3, [r7, #13]
		//uint8_t MOSI_Data[3] = {Header_Byte, Register_Address, Placeholder};
		//(SPI_Info -> MOSI_Data)[0] = MOSI_Data[0];
		//(SPI_Info -> MOSI_Data)[1] = MOSI_Data[1];
		//(SPI_Info -> MOSI_Data)[2] = MOSI_Data[2];

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6858      	ldr	r0, [r3, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	891b      	ldrh	r3, [r3, #8]
 8000770:	2200      	movs	r2, #0
 8000772:	4619      	mov	r1, r3
 8000774:	f000 fe8a 	bl	800148c <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 3, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	68d8      	ldr	r0, [r3, #12]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	f107 010e 	add.w	r1, r7, #14
 8000784:	2364      	movs	r3, #100	; 0x64
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	2301      	movs	r3, #1
 800078a:	f003 f95a 	bl	8003a42 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Address, SPI_Info -> MISO_Data, 1, 100);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	68d8      	ldr	r0, [r3, #12]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	1cf9      	adds	r1, r7, #3
 8000798:	2364      	movs	r3, #100	; 0x64
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2301      	movs	r3, #1
 800079e:	f003 f950 	bl	8003a42 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	68d8      	ldr	r0, [r3, #12]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	f107 010d 	add.w	r1, r7, #13
 80007ae:	2364      	movs	r3, #100	; 0x64
 80007b0:	9300      	str	r3, [sp, #0]
 80007b2:	2301      	movs	r3, #1
 80007b4:	f003 f945 	bl	8003a42 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	6858      	ldr	r0, [r3, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	891b      	ldrh	r3, [r3, #8]
 80007c0:	2201      	movs	r2, #1
 80007c2:	4619      	mov	r1, r3
 80007c4:	f000 fe62 	bl	800148c <HAL_GPIO_WritePin>

		retval = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <CC1200_Command_Strobe>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Command_Strobe(CC1200_t* SPI_Info, uint8_t Register_Address)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b086      	sub	sp, #24
 80007da:	af02      	add	r7, sp, #8
 80007dc:	6078      	str	r0, [r7, #4]
 80007de:	460b      	mov	r3, r1
 80007e0:	70fb      	strb	r3, [r7, #3]
	uint8_t retval;
	//char Message[100];
	//uint16_t Message_Length;

	if ((Register_Address >= 0x30) && (Register_Address <= 0x3D))
 80007e2:	78fb      	ldrb	r3, [r7, #3]
 80007e4:	2b2f      	cmp	r3, #47	; 0x2f
 80007e6:	d922      	bls.n	800082e <CC1200_Command_Strobe+0x58>
 80007e8:	78fb      	ldrb	r3, [r7, #3]
 80007ea:	2b3d      	cmp	r3, #61	; 0x3d
 80007ec:	d81f      	bhi.n	800082e <CC1200_Command_Strobe+0x58>
	{
		uint8_t Header_Byte = 0x00 | Register_Address; // 0000 0000 | 0 0 A5 A4 A3 A2 A1 A0
 80007ee:	78fb      	ldrb	r3, [r7, #3]
 80007f0:	73bb      	strb	r3, [r7, #14]
		//SPI_Info -> MOSI_Data = &Header_Byte;

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6858      	ldr	r0, [r3, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	891b      	ldrh	r3, [r3, #8]
 80007fa:	2200      	movs	r2, #0
 80007fc:	4619      	mov	r1, r3
 80007fe:	f000 fe45 	bl	800148c <HAL_GPIO_WritePin>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	68d8      	ldr	r0, [r3, #12]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	f107 010e 	add.w	r1, r7, #14
 800080e:	2364      	movs	r3, #100	; 0x64
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	2301      	movs	r3, #1
 8000814:	f003 f915 	bl	8003a42 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6858      	ldr	r0, [r3, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	891b      	ldrh	r3, [r3, #8]
 8000820:	2201      	movs	r2, #1
 8000822:	4619      	mov	r1, r3
 8000824:	f000 fe32 	bl	800148c <HAL_GPIO_WritePin>

		retval = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	73fb      	strb	r3, [r7, #15]
	{
 800082c:	e001      	b.n	8000832 <CC1200_Command_Strobe+0x5c>
	}
	else
	{
		retval = 1;
 800082e:	2301      	movs	r3, #1
 8000830:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 8000832:	7bfb      	ldrb	r3, [r7, #15]
}
 8000834:	4618      	mov	r0, r3
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	80fb      	strh	r3, [r7, #6]
	//RXTransmit function
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr

08000850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000854:	f000 fb0d 	bl	8000e72 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000858:	f000 f80a 	bl	8000870 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800085c:	f000 f8b4 	bl	80009c8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000860:	f000 f888 	bl	8000974 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8000864:	f000 f850 	bl	8000908 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 8000868:	f007 fd20 	bl	80082ac <MX_USB_DEVICE_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800086c:	e7fe      	b.n	800086c <main+0x1c>
	...

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b092      	sub	sp, #72	; 0x48
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	2234      	movs	r2, #52	; 0x34
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f008 fea2 	bl	80095c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	463b      	mov	r3, r7
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <SystemClock_Config+0x94>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800089a:	4a1a      	ldr	r2, [pc, #104]	; (8000904 <SystemClock_Config+0x94>)
 800089c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008a0:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a2:	2301      	movs	r3, #1
 80008a4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008a6:	2305      	movs	r3, #5
 80008a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008aa:	2302      	movs	r3, #2
 80008ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80008b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80008b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80008ba:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80008be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4618      	mov	r0, r3
 80008c6:	f002 fa3d 	bl	8002d44 <HAL_RCC_OscConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80008d0:	f000 f8e8 	bl	8000aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d4:	230f      	movs	r3, #15
 80008d6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d8:	2303      	movs	r3, #3
 80008da:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008e8:	463b      	mov	r3, r7
 80008ea:	2101      	movs	r1, #1
 80008ec:	4618      	mov	r0, r3
 80008ee:	f002 fd59 	bl	80033a4 <HAL_RCC_ClockConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80008f8:	f000 f8d4 	bl	8000aa4 <Error_Handler>
  }
}
 80008fc:	bf00      	nop
 80008fe:	3748      	adds	r7, #72	; 0x48
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40007000 	.word	0x40007000

08000908 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_SPI1_Init+0x64>)
 800090e:	4a18      	ldr	r2, [pc, #96]	; (8000970 <MX_SPI1_Init+0x68>)
 8000910:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_SPI1_Init+0x64>)
 8000914:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000918:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_SPI1_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_SPI1_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_SPI1_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_SPI1_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_SPI1_Init+0x64>)
 8000934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000938:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_SPI1_Init+0x64>)
 800093c:	2210      	movs	r2, #16
 800093e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <MX_SPI1_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_SPI1_Init+0x64>)
 8000948:	2200      	movs	r2, #0
 800094a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <MX_SPI1_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_SPI1_Init+0x64>)
 8000954:	220a      	movs	r2, #10
 8000956:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_SPI1_Init+0x64>)
 800095a:	f002 ffe9 	bl	8003930 <HAL_SPI_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000964:	f000 f89e 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000360 	.word	0x20000360
 8000970:	40013000 	.word	0x40013000

08000974 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <MX_USART2_UART_Init+0x50>)
 800097c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009ac:	f003 fab6 	bl	8003f1c <HAL_UART_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009b6:	f000 f875 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200003b8 	.word	0x200003b8
 80009c4:	40004400 	.word	0x40004400

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	4b2e      	ldr	r3, [pc, #184]	; (8000a98 <MX_GPIO_Init+0xd0>)
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	4a2d      	ldr	r2, [pc, #180]	; (8000a98 <MX_GPIO_Init+0xd0>)
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	61d3      	str	r3, [r2, #28]
 80009ea:	4b2b      	ldr	r3, [pc, #172]	; (8000a98 <MX_GPIO_Init+0xd0>)
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f6:	4b28      	ldr	r3, [pc, #160]	; (8000a98 <MX_GPIO_Init+0xd0>)
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	4a27      	ldr	r2, [pc, #156]	; (8000a98 <MX_GPIO_Init+0xd0>)
 80009fc:	f043 0320 	orr.w	r3, r3, #32
 8000a00:	61d3      	str	r3, [r2, #28]
 8000a02:	4b25      	ldr	r3, [pc, #148]	; (8000a98 <MX_GPIO_Init+0xd0>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	f003 0320 	and.w	r3, r3, #32
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <MX_GPIO_Init+0xd0>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	4a21      	ldr	r2, [pc, #132]	; (8000a98 <MX_GPIO_Init+0xd0>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	61d3      	str	r3, [r2, #28]
 8000a1a:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <MX_GPIO_Init+0xd0>)
 8000a1c:	69db      	ldr	r3, [r3, #28]
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <MX_GPIO_Init+0xd0>)
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	4a1b      	ldr	r2, [pc, #108]	; (8000a98 <MX_GPIO_Init+0xd0>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	61d3      	str	r3, [r2, #28]
 8000a32:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <MX_GPIO_Init+0xd0>)
 8000a34:	69db      	ldr	r3, [r3, #28]
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2140      	movs	r1, #64	; 0x40
 8000a42:	4816      	ldr	r0, [pc, #88]	; (8000a9c <MX_GPIO_Init+0xd4>)
 8000a44:	f000 fd22 	bl	800148c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PC12 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_12;
 8000a48:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a4e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4810      	ldr	r0, [pc, #64]	; (8000aa0 <MX_GPIO_Init+0xd8>)
 8000a60:	f000 fb84 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a64:	2340      	movs	r3, #64	; 0x40
 8000a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4808      	ldr	r0, [pc, #32]	; (8000a9c <MX_GPIO_Init+0xd4>)
 8000a7c:	f000 fb76 	bl	800116c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2100      	movs	r1, #0
 8000a84:	2028      	movs	r0, #40	; 0x28
 8000a86:	f000 fb3a 	bl	80010fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a8a:	2028      	movs	r0, #40	; 0x28
 8000a8c:	f000 fb53 	bl	8001136 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a90:	bf00      	nop
 8000a92:	3728      	adds	r7, #40	; 0x28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020400 	.word	0x40020400
 8000aa0:	40020800 	.word	0x40020800

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>
	...

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <HAL_MspInit+0x5c>)
 8000ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aba:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <HAL_MspInit+0x5c>)
 8000abc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac0:	6253      	str	r3, [r2, #36]	; 0x24
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_MspInit+0x5c>)
 8000ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <HAL_MspInit+0x5c>)
 8000ad0:	6a1b      	ldr	r3, [r3, #32]
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <HAL_MspInit+0x5c>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6213      	str	r3, [r2, #32]
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <HAL_MspInit+0x5c>)
 8000adc:	6a1b      	ldr	r3, [r3, #32]
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_MspInit+0x5c>)
 8000ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aea:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <HAL_MspInit+0x5c>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6253      	str	r3, [r2, #36]	; 0x24
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_MspInit+0x5c>)
 8000af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000afe:	2007      	movs	r0, #7
 8000b00:	f000 faf2 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b04:	bf00      	nop
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40023800 	.word	0x40023800

08000b10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a17      	ldr	r2, [pc, #92]	; (8000b8c <HAL_SPI_MspInit+0x7c>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d127      	bne.n	8000b82 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b32:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <HAL_SPI_MspInit+0x80>)
 8000b34:	6a1b      	ldr	r3, [r3, #32]
 8000b36:	4a16      	ldr	r2, [pc, #88]	; (8000b90 <HAL_SPI_MspInit+0x80>)
 8000b38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b3c:	6213      	str	r3, [r2, #32]
 8000b3e:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <HAL_SPI_MspInit+0x80>)
 8000b40:	6a1b      	ldr	r3, [r3, #32]
 8000b42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <HAL_SPI_MspInit+0x80>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	4a10      	ldr	r2, [pc, #64]	; (8000b90 <HAL_SPI_MspInit+0x80>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	61d3      	str	r3, [r2, #28]
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <HAL_SPI_MspInit+0x80>)
 8000b58:	69db      	ldr	r3, [r3, #28]
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b62:	23e0      	movs	r3, #224	; 0xe0
 8000b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b72:	2305      	movs	r3, #5
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	; (8000b94 <HAL_SPI_MspInit+0x84>)
 8000b7e:	f000 faf5 	bl	800116c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	; 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40013000 	.word	0x40013000
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020000 	.word	0x40020000

08000b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a17      	ldr	r2, [pc, #92]	; (8000c14 <HAL_UART_MspInit+0x7c>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d127      	bne.n	8000c0a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bba:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <HAL_UART_MspInit+0x80>)
 8000bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bbe:	4a16      	ldr	r2, [pc, #88]	; (8000c18 <HAL_UART_MspInit+0x80>)
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc4:	6253      	str	r3, [r2, #36]	; 0x24
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <HAL_UART_MspInit+0x80>)
 8000bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <HAL_UART_MspInit+0x80>)
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	4a10      	ldr	r2, [pc, #64]	; (8000c18 <HAL_UART_MspInit+0x80>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	61d3      	str	r3, [r2, #28]
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <HAL_UART_MspInit+0x80>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bea:	230c      	movs	r3, #12
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bfa:	2307      	movs	r3, #7
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <HAL_UART_MspInit+0x84>)
 8000c06:	f000 fab1 	bl	800116c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	; 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40004400 	.word	0x40004400
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020000 	.word	0x40020000

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <NMI_Handler+0x4>

08000c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <MemManage_Handler+0x4>

08000c32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr

08000c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr

08000c56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr

08000c62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c66:	f000 f957 	bl	8000f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <USB_LP_IRQHandler+0x10>)
 8000c76:	f000 fd3d 	bl	80016f4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20001988 	.word	0x20001988

08000c84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000c88:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c8c:	f000 fc16 	bl	80014bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c90:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c94:	f000 fc12 	bl	80014bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return 1;
 8000ca0:	2301      	movs	r3, #1
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr

08000caa <_kill>:

int _kill(int pid, int sig)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000cb4:	f008 fc50 	bl	8009558 <__errno>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2216      	movs	r2, #22
 8000cbc:	601a      	str	r2, [r3, #0]
  return -1;
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <_exit>:

void _exit (int status)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000cd2:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff ffe7 	bl	8000caa <_kill>
  while (1) {}    /* Make sure we hang here */
 8000cdc:	e7fe      	b.n	8000cdc <_exit+0x12>

08000cde <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b086      	sub	sp, #24
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	60f8      	str	r0, [r7, #12]
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	e00a      	b.n	8000d06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cf0:	f3af 8000 	nop.w
 8000cf4:	4601      	mov	r1, r0
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	1c5a      	adds	r2, r3, #1
 8000cfa:	60ba      	str	r2, [r7, #8]
 8000cfc:	b2ca      	uxtb	r2, r1
 8000cfe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	3301      	adds	r3, #1
 8000d04:	617b      	str	r3, [r7, #20]
 8000d06:	697a      	ldr	r2, [r7, #20]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	dbf0      	blt.n	8000cf0 <_read+0x12>
  }

  return len;
 8000d0e:	687b      	ldr	r3, [r7, #4]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	e009      	b.n	8000d3e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	1c5a      	adds	r2, r3, #1
 8000d2e:	60ba      	str	r2, [r7, #8]
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	697a      	ldr	r2, [r7, #20]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	dbf1      	blt.n	8000d2a <_write+0x12>
  }
  return len;
 8000d46:	687b      	ldr	r3, [r7, #4]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <_close>:

int _close(int file)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr

08000d66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d66:	b480      	push	{r7}
 8000d68:	b083      	sub	sp, #12
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
 8000d6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d76:	605a      	str	r2, [r3, #4]
  return 0;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <_isatty>:

int _isatty(int file)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d8c:	2301      	movs	r3, #1
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db8:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <_sbrk+0x5c>)
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <_sbrk+0x60>)
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d102      	bne.n	8000dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <_sbrk+0x64>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <_sbrk+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d207      	bcs.n	8000df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de0:	f008 fbba 	bl	8009558 <__errno>
 8000de4:	4603      	mov	r3, r0
 8000de6:	220c      	movs	r2, #12
 8000de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	e009      	b.n	8000e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <_sbrk+0x64>)
 8000e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20014000 	.word	0x20014000
 8000e10:	00000400 	.word	0x00000400
 8000e14:	20000410 	.word	0x20000410
 8000e18:	20001ea8 	.word	0x20001ea8

08000e1c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e28:	480c      	ldr	r0, [pc, #48]	; (8000e5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e2a:	490d      	ldr	r1, [pc, #52]	; (8000e60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	; (8000e64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e40:	4c0a      	ldr	r4, [pc, #40]	; (8000e6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e4e:	f7ff ffe5 	bl	8000e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e52:	f008 fb87 	bl	8009564 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e56:	f7ff fcfb 	bl	8000850 <main>
  bx lr
 8000e5a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e60:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 8000e64:	0800b208 	.word	0x0800b208
  ldr r2, =_sbss
 8000e68:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 8000e6c:	20001ea4 	.word	0x20001ea4

08000e70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC1_IRQHandler>

08000e72 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	f000 f933 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e82:	2000      	movs	r0, #0
 8000e84:	f000 f80e 	bl	8000ea4 <HAL_InitTick>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d002      	beq.n	8000e94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	71fb      	strb	r3, [r7, #7]
 8000e92:	e001      	b.n	8000e98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e94:	f7ff fe0c 	bl	8000ab0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e98:	79fb      	ldrb	r3, [r7, #7]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <HAL_InitTick+0x68>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d022      	beq.n	8000efe <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_InitTick+0x6c>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <HAL_InitTick+0x68>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ec4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f000 f940 	bl	8001152 <HAL_SYSTICK_Config>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d10f      	bne.n	8000ef8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b0f      	cmp	r3, #15
 8000edc:	d809      	bhi.n	8000ef2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	6879      	ldr	r1, [r7, #4]
 8000ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee6:	f000 f90a 	bl	80010fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <HAL_InitTick+0x70>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	e007      	b.n	8000f02 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	73fb      	strb	r3, [r7, #15]
 8000ef6:	e004      	b.n	8000f02 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	e001      	b.n	8000f02 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	2000016c 	.word	0x2000016c
 8000f10:	20000164 	.word	0x20000164
 8000f14:	20000168 	.word	0x20000168

08000f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <HAL_IncTick+0x1c>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <HAL_IncTick+0x20>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4413      	add	r3, r2
 8000f26:	4a03      	ldr	r2, [pc, #12]	; (8000f34 <HAL_IncTick+0x1c>)
 8000f28:	6013      	str	r3, [r2, #0]
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000414 	.word	0x20000414
 8000f38:	2000016c 	.word	0x2000016c

08000f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f40:	4b02      	ldr	r3, [pc, #8]	; (8000f4c <HAL_GetTick+0x10>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	20000414 	.word	0x20000414

08000f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f82:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	60d3      	str	r3, [r2, #12]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	f003 0307 	and.w	r3, r3, #7
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	db0b      	blt.n	8000fde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	f003 021f 	and.w	r2, r3, #31
 8000fcc:	4906      	ldr	r1, [pc, #24]	; (8000fe8 <__NVIC_EnableIRQ+0x34>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	095b      	lsrs	r3, r3, #5
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	e000e100 	.word	0xe000e100

08000fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db0a      	blt.n	8001016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	490c      	ldr	r1, [pc, #48]	; (8001038 <__NVIC_SetPriority+0x4c>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	0112      	lsls	r2, r2, #4
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	440b      	add	r3, r1
 8001010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001014:	e00a      	b.n	800102c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4908      	ldr	r1, [pc, #32]	; (800103c <__NVIC_SetPriority+0x50>)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	3b04      	subs	r3, #4
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	440b      	add	r3, r1
 800102a:	761a      	strb	r2, [r3, #24]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000e100 	.word	0xe000e100
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f1c3 0307 	rsb	r3, r3, #7
 800105a:	2b04      	cmp	r3, #4
 800105c:	bf28      	it	cs
 800105e:	2304      	movcs	r3, #4
 8001060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3304      	adds	r3, #4
 8001066:	2b06      	cmp	r3, #6
 8001068:	d902      	bls.n	8001070 <NVIC_EncodePriority+0x30>
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3b03      	subs	r3, #3
 800106e:	e000      	b.n	8001072 <NVIC_EncodePriority+0x32>
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	f04f 32ff 	mov.w	r2, #4294967295
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43da      	mvns	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001088:	f04f 31ff 	mov.w	r1, #4294967295
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	43d9      	mvns	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	4313      	orrs	r3, r2
         );
}
 800109a:	4618      	mov	r0, r3
 800109c:	3724      	adds	r7, #36	; 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b4:	d301      	bcc.n	80010ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00f      	b.n	80010da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <SysTick_Config+0x40>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c2:	210f      	movs	r1, #15
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f7ff ff90 	bl	8000fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <SysTick_Config+0x40>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d2:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <SysTick_Config+0x40>)
 80010d4:	2207      	movs	r2, #7
 80010d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	e000e010 	.word	0xe000e010

080010e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff2d 	bl	8000f50 <__NVIC_SetPriorityGrouping>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001110:	f7ff ff42 	bl	8000f98 <__NVIC_GetPriorityGrouping>
 8001114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	6978      	ldr	r0, [r7, #20]
 800111c:	f7ff ff90 	bl	8001040 <NVIC_EncodePriority>
 8001120:	4602      	mov	r2, r0
 8001122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff5f 	bl	8000fec <__NVIC_SetPriority>
}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff35 	bl	8000fb4 <__NVIC_EnableIRQ>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ffa2 	bl	80010a4 <SysTick_Config>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b480      	push	{r7}
 800116e:	b087      	sub	sp, #28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001182:	e160      	b.n	8001446 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	2101      	movs	r1, #1
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	fa01 f303 	lsl.w	r3, r1, r3
 8001190:	4013      	ands	r3, r2
 8001192:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 8152 	beq.w	8001440 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d005      	beq.n	80011b4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d130      	bne.n	8001216 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80011ea:	2201      	movs	r2, #1
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4013      	ands	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	091b      	lsrs	r3, r3, #4
 8001200:	f003 0201 	and.w	r2, r3, #1
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	2b03      	cmp	r3, #3
 8001220:	d017      	beq.n	8001252 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	2203      	movs	r2, #3
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d123      	bne.n	80012a6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	08da      	lsrs	r2, r3, #3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3208      	adds	r2, #8
 8001266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800126a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	220f      	movs	r2, #15
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	691a      	ldr	r2, [r3, #16]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	f003 0307 	and.w	r3, r3, #7
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	08da      	lsrs	r2, r3, #3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3208      	adds	r2, #8
 80012a0:	6939      	ldr	r1, [r7, #16]
 80012a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	2203      	movs	r2, #3
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 0203 	and.w	r2, r3, #3
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 80ac 	beq.w	8001440 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e8:	4b5e      	ldr	r3, [pc, #376]	; (8001464 <HAL_GPIO_Init+0x2f8>)
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	4a5d      	ldr	r2, [pc, #372]	; (8001464 <HAL_GPIO_Init+0x2f8>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	6213      	str	r3, [r2, #32]
 80012f4:	4b5b      	ldr	r3, [pc, #364]	; (8001464 <HAL_GPIO_Init+0x2f8>)
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001300:	4a59      	ldr	r2, [pc, #356]	; (8001468 <HAL_GPIO_Init+0x2fc>)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	089b      	lsrs	r3, r3, #2
 8001306:	3302      	adds	r3, #2
 8001308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	220f      	movs	r2, #15
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a51      	ldr	r2, [pc, #324]	; (800146c <HAL_GPIO_Init+0x300>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d025      	beq.n	8001378 <HAL_GPIO_Init+0x20c>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a50      	ldr	r2, [pc, #320]	; (8001470 <HAL_GPIO_Init+0x304>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d01f      	beq.n	8001374 <HAL_GPIO_Init+0x208>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a4f      	ldr	r2, [pc, #316]	; (8001474 <HAL_GPIO_Init+0x308>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d019      	beq.n	8001370 <HAL_GPIO_Init+0x204>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a4e      	ldr	r2, [pc, #312]	; (8001478 <HAL_GPIO_Init+0x30c>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d013      	beq.n	800136c <HAL_GPIO_Init+0x200>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a4d      	ldr	r2, [pc, #308]	; (800147c <HAL_GPIO_Init+0x310>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d00d      	beq.n	8001368 <HAL_GPIO_Init+0x1fc>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a4c      	ldr	r2, [pc, #304]	; (8001480 <HAL_GPIO_Init+0x314>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d007      	beq.n	8001364 <HAL_GPIO_Init+0x1f8>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a4b      	ldr	r2, [pc, #300]	; (8001484 <HAL_GPIO_Init+0x318>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d101      	bne.n	8001360 <HAL_GPIO_Init+0x1f4>
 800135c:	2306      	movs	r3, #6
 800135e:	e00c      	b.n	800137a <HAL_GPIO_Init+0x20e>
 8001360:	2307      	movs	r3, #7
 8001362:	e00a      	b.n	800137a <HAL_GPIO_Init+0x20e>
 8001364:	2305      	movs	r3, #5
 8001366:	e008      	b.n	800137a <HAL_GPIO_Init+0x20e>
 8001368:	2304      	movs	r3, #4
 800136a:	e006      	b.n	800137a <HAL_GPIO_Init+0x20e>
 800136c:	2303      	movs	r3, #3
 800136e:	e004      	b.n	800137a <HAL_GPIO_Init+0x20e>
 8001370:	2302      	movs	r3, #2
 8001372:	e002      	b.n	800137a <HAL_GPIO_Init+0x20e>
 8001374:	2301      	movs	r3, #1
 8001376:	e000      	b.n	800137a <HAL_GPIO_Init+0x20e>
 8001378:	2300      	movs	r3, #0
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	f002 0203 	and.w	r2, r2, #3
 8001380:	0092      	lsls	r2, r2, #2
 8001382:	4093      	lsls	r3, r2
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800138a:	4937      	ldr	r1, [pc, #220]	; (8001468 <HAL_GPIO_Init+0x2fc>)
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	3302      	adds	r3, #2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001398:	4b3b      	ldr	r3, [pc, #236]	; (8001488 <HAL_GPIO_Init+0x31c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013bc:	4a32      	ldr	r2, [pc, #200]	; (8001488 <HAL_GPIO_Init+0x31c>)
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013c2:	4b31      	ldr	r3, [pc, #196]	; (8001488 <HAL_GPIO_Init+0x31c>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013e6:	4a28      	ldr	r2, [pc, #160]	; (8001488 <HAL_GPIO_Init+0x31c>)
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ec:	4b26      	ldr	r3, [pc, #152]	; (8001488 <HAL_GPIO_Init+0x31c>)
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4313      	orrs	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001410:	4a1d      	ldr	r2, [pc, #116]	; (8001488 <HAL_GPIO_Init+0x31c>)
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <HAL_GPIO_Init+0x31c>)
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	43db      	mvns	r3, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4013      	ands	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4313      	orrs	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800143a:	4a13      	ldr	r2, [pc, #76]	; (8001488 <HAL_GPIO_Init+0x31c>)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	3301      	adds	r3, #1
 8001444:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa22 f303 	lsr.w	r3, r2, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	f47f ae97 	bne.w	8001184 <HAL_GPIO_Init+0x18>
  }
}
 8001456:	bf00      	nop
 8001458:	bf00      	nop
 800145a:	371c      	adds	r7, #28
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800
 8001468:	40010000 	.word	0x40010000
 800146c:	40020000 	.word	0x40020000
 8001470:	40020400 	.word	0x40020400
 8001474:	40020800 	.word	0x40020800
 8001478:	40020c00 	.word	0x40020c00
 800147c:	40021000 	.word	0x40021000
 8001480:	40021400 	.word	0x40021400
 8001484:	40021800 	.word	0x40021800
 8001488:	40010400 	.word	0x40010400

0800148c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	807b      	strh	r3, [r7, #2]
 8001498:	4613      	mov	r3, r2
 800149a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800149c:	787b      	ldrb	r3, [r7, #1]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014a2:	887a      	ldrh	r2, [r7, #2]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80014a8:	e003      	b.n	80014b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80014aa:	887b      	ldrh	r3, [r7, #2]
 80014ac:	041a      	lsls	r2, r3, #16
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	619a      	str	r2, [r3, #24]
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr

080014bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014c8:	695a      	ldr	r2, [r3, #20]
 80014ca:	88fb      	ldrh	r3, [r7, #6]
 80014cc:	4013      	ands	r3, r2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d006      	beq.n	80014e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014d2:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff f9ae 	bl	800083c <HAL_GPIO_EXTI_Callback>
  }
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40010400 	.word	0x40010400

080014ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ee:	b08b      	sub	sp, #44	; 0x2c
 80014f0:	af06      	add	r7, sp, #24
 80014f2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e0d0      	b.n	80016a0 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	d106      	bne.n	8001518 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f007 fd80 	bl	8009018 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2203      	movs	r2, #3
 800151c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f002 fe41 	bl	80041ac <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800152a:	2300      	movs	r3, #0
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	e04c      	b.n	80015ca <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	1c5a      	adds	r2, r3, #1
 8001536:	4613      	mov	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	440b      	add	r3, r1
 8001540:	3301      	adds	r3, #1
 8001542:	2201      	movs	r2, #1
 8001544:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	4613      	mov	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	440b      	add	r3, r1
 8001556:	7bfa      	ldrb	r2, [r7, #15]
 8001558:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800155a:	7bfa      	ldrb	r2, [r7, #15]
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	b298      	uxth	r0, r3
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	440b      	add	r3, r1
 800156c:	3336      	adds	r3, #54	; 0x36
 800156e:	4602      	mov	r2, r0
 8001570:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	440b      	add	r3, r1
 8001582:	3303      	adds	r3, #3
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001588:	7bfa      	ldrb	r2, [r7, #15]
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	440b      	add	r3, r1
 8001596:	3338      	adds	r3, #56	; 0x38
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800159c:	7bfa      	ldrb	r2, [r7, #15]
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	440b      	add	r3, r1
 80015aa:	333c      	adds	r3, #60	; 0x3c
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015b0:	7bfa      	ldrb	r2, [r7, #15]
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	440b      	add	r3, r1
 80015be:	3340      	adds	r3, #64	; 0x40
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	3301      	adds	r3, #1
 80015c8:	73fb      	strb	r3, [r7, #15]
 80015ca:	7bfa      	ldrb	r2, [r7, #15]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d3ad      	bcc.n	8001530 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015d4:	2300      	movs	r3, #0
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	e044      	b.n	8001664 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	440b      	add	r3, r1
 80015e8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	440b      	add	r3, r1
 80015fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001602:	7bfa      	ldrb	r2, [r7, #15]
 8001604:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001606:	7bfa      	ldrb	r2, [r7, #15]
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	440b      	add	r3, r1
 8001614:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800161c:	7bfa      	ldrb	r2, [r7, #15]
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	440b      	add	r3, r1
 800162a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001632:	7bfa      	ldrb	r2, [r7, #15]
 8001634:	6879      	ldr	r1, [r7, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	440b      	add	r3, r1
 8001640:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001648:	7bfa      	ldrb	r2, [r7, #15]
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	440b      	add	r3, r1
 8001656:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	3301      	adds	r3, #1
 8001662:	73fb      	strb	r3, [r7, #15]
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	429a      	cmp	r2, r3
 800166c:	d3b5      	bcc.n	80015da <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	687e      	ldr	r6, [r7, #4]
 8001676:	466d      	mov	r5, sp
 8001678:	f106 0410 	add.w	r4, r6, #16
 800167c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800167e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001680:	6823      	ldr	r3, [r4, #0]
 8001682:	602b      	str	r3, [r5, #0]
 8001684:	1d33      	adds	r3, r6, #4
 8001686:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001688:	6838      	ldr	r0, [r7, #0]
 800168a:	f002 fda9 	bl	80041e0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016a8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d101      	bne.n	80016be <HAL_PCD_Start+0x16>
 80016ba:	2302      	movs	r3, #2
 80016bc:	e016      	b.n	80016ec <HAL_PCD_Start+0x44>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f002 fd58 	bl	8004180 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80016d0:	2101      	movs	r1, #1
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f007 fc82 	bl	8008fdc <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f005 fa3d 	bl	8006b5c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f005 fa35 	bl	8006b70 <USB_ReadInterrupts>
 8001706:	4603      	mov	r3, r0
 8001708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800170c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001710:	d102      	bne.n	8001718 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 faf5 	bl	8001d02 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f005 fa27 	bl	8006b70 <USB_ReadInterrupts>
 8001722:	4603      	mov	r3, r0
 8001724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800172c:	d112      	bne.n	8001754 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001736:	b29a      	uxth	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001740:	b292      	uxth	r2, r2
 8001742:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f007 fce1 	bl	800910e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800174c:	2100      	movs	r1, #0
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f8c7 	bl	80018e2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f005 fa09 	bl	8006b70 <USB_ReadInterrupts>
 800175e:	4603      	mov	r3, r0
 8001760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001764:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001768:	d10b      	bne.n	8001782 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001772:	b29a      	uxth	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800177c:	b292      	uxth	r2, r2
 800177e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f005 f9f2 	bl	8006b70 <USB_ReadInterrupts>
 800178c:	4603      	mov	r3, r0
 800178e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001796:	d10b      	bne.n	80017b0 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017aa:	b292      	uxth	r2, r2
 80017ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f005 f9db 	bl	8006b70 <USB_ReadInterrupts>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017c4:	d126      	bne.n	8001814 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 0204 	bic.w	r2, r2, #4
 80017d8:	b292      	uxth	r2, r2
 80017da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0208 	bic.w	r2, r2, #8
 80017f0:	b292      	uxth	r2, r2
 80017f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f007 fcc2 	bl	8009180 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001804:	b29a      	uxth	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800180e:	b292      	uxth	r2, r2
 8001810:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f005 f9a9 	bl	8006b70 <USB_ReadInterrupts>
 800181e:	4603      	mov	r3, r0
 8001820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001828:	d126      	bne.n	8001878 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001832:	b29a      	uxth	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 0208 	orr.w	r2, r2, #8
 800183c:	b292      	uxth	r2, r2
 800183e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800184a:	b29a      	uxth	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001854:	b292      	uxth	r2, r2
 8001856:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001862:	b29a      	uxth	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f042 0204 	orr.w	r2, r2, #4
 800186c:	b292      	uxth	r2, r2
 800186e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f007 fc6a 	bl	800914c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f005 f977 	bl	8006b70 <USB_ReadInterrupts>
 8001882:	4603      	mov	r3, r0
 8001884:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800188c:	d10e      	bne.n	80018ac <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001896:	b29a      	uxth	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018a0:	b292      	uxth	r2, r2
 80018a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f007 fc23 	bl	80090f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f005 f95d 	bl	8006b70 <USB_ReadInterrupts>
 80018b6:	4603      	mov	r3, r0
 80018b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018c0:	d10b      	bne.n	80018da <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018d4:	b292      	uxth	r2, r2
 80018d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	460b      	mov	r3, r1
 80018ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d101      	bne.n	80018fc <HAL_PCD_SetAddress+0x1a>
 80018f8:	2302      	movs	r3, #2
 80018fa:	e013      	b.n	8001924 <HAL_PCD_SetAddress+0x42>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	78fa      	ldrb	r2, [r7, #3]
 8001908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	78fa      	ldrb	r2, [r7, #3]
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f005 f90e 	bl	8006b36 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	4608      	mov	r0, r1
 8001936:	4611      	mov	r1, r2
 8001938:	461a      	mov	r2, r3
 800193a:	4603      	mov	r3, r0
 800193c:	70fb      	strb	r3, [r7, #3]
 800193e:	460b      	mov	r3, r1
 8001940:	803b      	strh	r3, [r7, #0]
 8001942:	4613      	mov	r3, r2
 8001944:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800194a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800194e:	2b00      	cmp	r3, #0
 8001950:	da0e      	bge.n	8001970 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001952:	78fb      	ldrb	r3, [r7, #3]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	1c5a      	adds	r2, r3, #1
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2201      	movs	r2, #1
 800196c:	705a      	strb	r2, [r3, #1]
 800196e:	e00e      	b.n	800198e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	f003 0207 	and.w	r2, r3, #7
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	b2da      	uxtb	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800199a:	883a      	ldrh	r2, [r7, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	78ba      	ldrb	r2, [r7, #2]
 80019a4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	785b      	ldrb	r3, [r3, #1]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d004      	beq.n	80019b8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80019b8:	78bb      	ldrb	r3, [r7, #2]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d102      	bne.n	80019c4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_PCD_EP_Open+0xa6>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e00e      	b.n	80019f0 <HAL_PCD_EP_Open+0xc4>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68f9      	ldr	r1, [r7, #12]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f002 fc1d 	bl	8004220 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80019ee:	7afb      	ldrb	r3, [r7, #11]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	da0e      	bge.n	8001a2a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	4413      	add	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2201      	movs	r2, #1
 8001a26:	705a      	strb	r2, [r3, #1]
 8001a28:	e00e      	b.n	8001a48 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	f003 0207 	and.w	r2, r3, #7
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	4413      	add	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d101      	bne.n	8001a62 <HAL_PCD_EP_Close+0x6a>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e00e      	b.n	8001a80 <HAL_PCD_EP_Close+0x88>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68f9      	ldr	r1, [r7, #12]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f002 ff3f 	bl	80048f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	607a      	str	r2, [r7, #4]
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	460b      	mov	r3, r1
 8001a96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a98:	7afb      	ldrb	r3, [r7, #11]
 8001a9a:	f003 0207 	and.w	r2, r3, #7
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4413      	add	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ac8:	7afb      	ldrb	r3, [r7, #11]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ad4:	7afb      	ldrb	r3, [r7, #11]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d106      	bne.n	8001aec <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6979      	ldr	r1, [r7, #20]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f003 f8f1 	bl	8004ccc <USB_EPStartXfer>
 8001aea:	e005      	b.n	8001af8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6979      	ldr	r1, [r7, #20]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f003 f8ea 	bl	8004ccc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b0e:	78fb      	ldrb	r3, [r7, #3]
 8001b10:	f003 0207 	and.w	r2, r3, #7
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	440b      	add	r3, r1
 8001b20:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001b24:	681b      	ldr	r3, [r3, #0]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	607a      	str	r2, [r7, #4]
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b40:	7afb      	ldrb	r3, [r7, #11]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	4413      	add	r3, r2
 8001b54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	2200      	movs	r2, #0
 8001b74:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b7c:	7afb      	ldrb	r3, [r7, #11]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b88:	7afb      	ldrb	r3, [r7, #11]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d106      	bne.n	8001ba0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6979      	ldr	r1, [r7, #20]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f003 f897 	bl	8004ccc <USB_EPStartXfer>
 8001b9e:	e005      	b.n	8001bac <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6979      	ldr	r1, [r7, #20]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f003 f890 	bl	8004ccc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001bc2:	78fb      	ldrb	r3, [r7, #3]
 8001bc4:	f003 0207 	and.w	r2, r3, #7
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d901      	bls.n	8001bd4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e03e      	b.n	8001c52 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	da0e      	bge.n	8001bfa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	4613      	mov	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	4413      	add	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	705a      	strb	r2, [r3, #1]
 8001bf8:	e00c      	b.n	8001c14 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001bfa:	78fa      	ldrb	r2, [r7, #3]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2201      	movs	r2, #1
 8001c18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c1a:	78fb      	ldrb	r3, [r7, #3]
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_PCD_EP_SetStall+0x7e>
 8001c30:	2302      	movs	r3, #2
 8001c32:	e00e      	b.n	8001c52 <HAL_PCD_EP_SetStall+0x9c>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68f9      	ldr	r1, [r7, #12]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f004 fe7a 	bl	800693c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b084      	sub	sp, #16
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	460b      	mov	r3, r1
 8001c64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c66:	78fb      	ldrb	r3, [r7, #3]
 8001c68:	f003 020f 	and.w	r2, r3, #15
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d901      	bls.n	8001c78 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e040      	b.n	8001cfa <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	da0e      	bge.n	8001c9e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c80:	78fb      	ldrb	r3, [r7, #3]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	4413      	add	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	705a      	strb	r2, [r3, #1]
 8001c9c:	e00e      	b.n	8001cbc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c9e:	78fb      	ldrb	r3, [r7, #3]
 8001ca0:	f003 0207 	and.w	r2, r3, #7
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cc2:	78fb      	ldrb	r3, [r7, #3]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <HAL_PCD_EP_ClrStall+0x82>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	e00e      	b.n	8001cfa <HAL_PCD_EP_ClrStall+0xa0>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68f9      	ldr	r1, [r7, #12]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f004 fe76 	bl	80069dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b08e      	sub	sp, #56	; 0x38
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d0a:	e2ec      	b.n	80022e6 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d14:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001d16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001d22:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f040 8161 	bne.w	8001fee <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001d2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d2e:	f003 0310 	and.w	r3, r3, #16
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d152      	bne.n	8001ddc <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d46:	81fb      	strh	r3, [r7, #14]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	89fb      	ldrh	r3, [r7, #14]
 8001d4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3328      	adds	r3, #40	; 0x28
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4413      	add	r3, r2
 8001d74:	3302      	adds	r3, #2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6812      	ldr	r2, [r2, #0]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	695a      	ldr	r2, [r3, #20]
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	441a      	add	r2, r3
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f007 f98e 	bl	80090be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 829b 	beq.w	80022e6 <PCD_EP_ISR_Handler+0x5e4>
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f040 8296 	bne.w	80022e6 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	b292      	uxth	r2, r2
 8001dce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001dda:	e284      	b.n	80022e6 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001dec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d034      	beq.n	8001e60 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	461a      	mov	r2, r3
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4413      	add	r3, r2
 8001e0a:	3306      	adds	r3, #6
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6818      	ldr	r0, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	f004 feef 	bl	8006c18 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e46:	4013      	ands	r3, r2
 8001e48:	823b      	strh	r3, [r7, #16]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	8a3a      	ldrh	r2, [r7, #16]
 8001e50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e54:	b292      	uxth	r2, r2
 8001e56:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f007 f903 	bl	8009064 <HAL_PCD_SetupStageCallback>
 8001e5e:	e242      	b.n	80022e6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e60:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f280 823e 	bge.w	80022e6 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e76:	4013      	ands	r3, r2
 8001e78:	83bb      	strh	r3, [r7, #28]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	8bba      	ldrh	r2, [r7, #28]
 8001e80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e84:	b292      	uxth	r2, r2
 8001e86:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3306      	adds	r3, #6
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d019      	beq.n	8001ef0 <PCD_EP_ISR_Handler+0x1ee>
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d015      	beq.n	8001ef0 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	6959      	ldr	r1, [r3, #20]
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	f004 fe9f 	bl	8006c18 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	695a      	ldr	r2, [r3, #20]
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	441a      	add	r2, r3
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001ee8:	2100      	movs	r1, #0
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f007 f8cc 	bl	8009088 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f040 81f2 	bne.w	80022e6 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	61bb      	str	r3, [r7, #24]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	4413      	add	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d112      	bne.n	8001f50 <PCD_EP_ISR_Handler+0x24e>
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	801a      	strh	r2, [r3, #0]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	801a      	strh	r2, [r3, #0]
 8001f4e:	e02f      	b.n	8001fb0 <PCD_EP_ISR_Handler+0x2ae>
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	2b3e      	cmp	r3, #62	; 0x3e
 8001f56:	d813      	bhi.n	8001f80 <PCD_EP_ISR_Handler+0x27e>
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	085b      	lsrs	r3, r3, #1
 8001f5e:	633b      	str	r3, [r7, #48]	; 0x30
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <PCD_EP_ISR_Handler+0x270>
 8001f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f6e:	3301      	adds	r3, #1
 8001f70:	633b      	str	r3, [r7, #48]	; 0x30
 8001f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	029b      	lsls	r3, r3, #10
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	801a      	strh	r2, [r3, #0]
 8001f7e:	e017      	b.n	8001fb0 <PCD_EP_ISR_Handler+0x2ae>
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	095b      	lsrs	r3, r3, #5
 8001f86:	633b      	str	r3, [r7, #48]	; 0x30
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	f003 031f 	and.w	r3, r3, #31
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d102      	bne.n	8001f9a <PCD_EP_ISR_Handler+0x298>
 8001f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f96:	3b01      	subs	r3, #1
 8001f98:	633b      	str	r3, [r7, #48]	; 0x30
 8001f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	029b      	lsls	r3, r3, #10
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fc0:	827b      	strh	r3, [r7, #18]
 8001fc2:	8a7b      	ldrh	r3, [r7, #18]
 8001fc4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001fc8:	827b      	strh	r3, [r7, #18]
 8001fca:	8a7b      	ldrh	r3, [r7, #18]
 8001fcc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001fd0:	827b      	strh	r3, [r7, #18]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	8a7b      	ldrh	r3, [r7, #18]
 8001fd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	8013      	strh	r3, [r2, #0]
 8001fec:	e17b      	b.n	80022e6 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002000:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002004:	2b00      	cmp	r3, #0
 8002006:	f280 80ea 	bge.w	80021de <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	b29a      	uxth	r2, r3
 800201c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002020:	4013      	ands	r3, r2
 8002022:	853b      	strh	r3, [r7, #40]	; 0x28
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	461a      	mov	r2, r3
 800202a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002034:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002038:	b292      	uxth	r2, r2
 800203a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800203c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	4413      	add	r3, r2
 8002050:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	7b1b      	ldrb	r3, [r3, #12]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d122      	bne.n	80020a0 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002062:	b29b      	uxth	r3, r3
 8002064:	461a      	mov	r2, r3
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4413      	add	r3, r2
 800206e:	3306      	adds	r3, #6
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6812      	ldr	r2, [r2, #0]
 8002076:	4413      	add	r3, r2
 8002078:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002082:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002084:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 8087 	beq.w	800219a <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6818      	ldr	r0, [r3, #0]
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	6959      	ldr	r1, [r3, #20]
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	88da      	ldrh	r2, [r3, #6]
 8002098:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800209a:	f004 fdbd 	bl	8006c18 <USB_ReadPMA>
 800209e:	e07c      	b.n	800219a <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	78db      	ldrb	r3, [r3, #3]
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d108      	bne.n	80020ba <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80020a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020aa:	461a      	mov	r2, r3
 80020ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f927 	bl	8002302 <HAL_PCD_EP_DB_Receive>
 80020b4:	4603      	mov	r3, r0
 80020b6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80020b8:	e06f      	b.n	800219a <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d4:	847b      	strh	r3, [r7, #34]	; 0x22
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	441a      	add	r2, r3
 80020e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80020e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	b29b      	uxth	r3, r3
 800210c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d021      	beq.n	8002158 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800211c:	b29b      	uxth	r3, r3
 800211e:	461a      	mov	r2, r3
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4413      	add	r3, r2
 8002128:	3302      	adds	r3, #2
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	4413      	add	r3, r2
 8002132:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800213c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800213e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002140:	2b00      	cmp	r3, #0
 8002142:	d02a      	beq.n	800219a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6818      	ldr	r0, [r3, #0]
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	6959      	ldr	r1, [r3, #20]
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	891a      	ldrh	r2, [r3, #8]
 8002150:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002152:	f004 fd61 	bl	8006c18 <USB_ReadPMA>
 8002156:	e020      	b.n	800219a <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002160:	b29b      	uxth	r3, r3
 8002162:	461a      	mov	r2, r3
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4413      	add	r3, r2
 800216c:	3306      	adds	r3, #6
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	4413      	add	r3, r2
 8002176:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002180:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002182:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002184:	2b00      	cmp	r3, #0
 8002186:	d008      	beq.n	800219a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6818      	ldr	r0, [r3, #0]
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	6959      	ldr	r1, [r3, #20]
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	895a      	ldrh	r2, [r3, #10]
 8002194:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002196:	f004 fd3f 	bl	8006c18 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	69da      	ldr	r2, [r3, #28]
 800219e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021a0:	441a      	add	r2, r3
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021ac:	441a      	add	r2, r3
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d004      	beq.n	80021c4 <PCD_EP_ISR_Handler+0x4c2>
 80021ba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d206      	bcs.n	80021d2 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4619      	mov	r1, r3
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f006 ff5c 	bl	8009088 <HAL_PCD_DataOutStageCallback>
 80021d0:	e005      	b.n	80021de <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021d8:	4618      	mov	r0, r3
 80021da:	f002 fd77 	bl	8004ccc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80021de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d07e      	beq.n	80022e6 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80021e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021ec:	1c5a      	adds	r2, r3, #1
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	b29b      	uxth	r3, r3
 800220e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002216:	843b      	strh	r3, [r7, #32]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	441a      	add	r2, r3
 8002226:	8c3b      	ldrh	r3, [r7, #32]
 8002228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800222c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002230:	b29b      	uxth	r3, r3
 8002232:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	78db      	ldrb	r3, [r3, #3]
 8002238:	2b03      	cmp	r3, #3
 800223a:	d00c      	beq.n	8002256 <PCD_EP_ISR_Handler+0x554>
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	78db      	ldrb	r3, [r3, #3]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d008      	beq.n	8002256 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002248:	2b02      	cmp	r3, #2
 800224a:	d146      	bne.n	80022da <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800224c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800224e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002252:	2b00      	cmp	r3, #0
 8002254:	d141      	bne.n	80022da <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800225e:	b29b      	uxth	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4413      	add	r3, r2
 800226a:	3302      	adds	r3, #2
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6812      	ldr	r2, [r2, #0]
 8002272:	4413      	add	r3, r2
 8002274:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800227e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	699a      	ldr	r2, [r3, #24]
 8002284:	8bfb      	ldrh	r3, [r7, #30]
 8002286:	429a      	cmp	r2, r3
 8002288:	d906      	bls.n	8002298 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	699a      	ldr	r2, [r3, #24]
 800228e:	8bfb      	ldrh	r3, [r7, #30]
 8002290:	1ad2      	subs	r2, r2, r3
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	619a      	str	r2, [r3, #24]
 8002296:	e002      	b.n	800229e <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	2200      	movs	r2, #0
 800229c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d106      	bne.n	80022b4 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	4619      	mov	r1, r3
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f006 ff06 	bl	80090be <HAL_PCD_DataInStageCallback>
 80022b2:	e018      	b.n	80022e6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	695a      	ldr	r2, [r3, #20]
 80022b8:	8bfb      	ldrh	r3, [r7, #30]
 80022ba:	441a      	add	r2, r3
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	69da      	ldr	r2, [r3, #28]
 80022c4:	8bfb      	ldrh	r3, [r7, #30]
 80022c6:	441a      	add	r2, r3
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022d2:	4618      	mov	r0, r3
 80022d4:	f002 fcfa 	bl	8004ccc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80022d8:	e005      	b.n	80022e6 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80022da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022dc:	461a      	mov	r2, r3
 80022de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f91b 	bl	800251c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	b21b      	sxth	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f6ff ad0a 	blt.w	8001d0c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3738      	adds	r7, #56	; 0x38
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b088      	sub	sp, #32
 8002306:	af00      	add	r7, sp, #0
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	4613      	mov	r3, r2
 800230e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002310:	88fb      	ldrh	r3, [r7, #6]
 8002312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d07e      	beq.n	8002418 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002322:	b29b      	uxth	r3, r3
 8002324:	461a      	mov	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4413      	add	r3, r2
 800232e:	3302      	adds	r3, #2
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	6812      	ldr	r2, [r2, #0]
 8002336:	4413      	add	r3, r2
 8002338:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002342:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	699a      	ldr	r2, [r3, #24]
 8002348:	8b7b      	ldrh	r3, [r7, #26]
 800234a:	429a      	cmp	r2, r3
 800234c:	d306      	bcc.n	800235c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	699a      	ldr	r2, [r3, #24]
 8002352:	8b7b      	ldrh	r3, [r7, #26]
 8002354:	1ad2      	subs	r2, r2, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	619a      	str	r2, [r3, #24]
 800235a:	e002      	b.n	8002362 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2200      	movs	r2, #0
 8002360:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d123      	bne.n	80023b2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	b29b      	uxth	r3, r3
 800237c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002384:	833b      	strh	r3, [r7, #24]
 8002386:	8b3b      	ldrh	r3, [r7, #24]
 8002388:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800238c:	833b      	strh	r3, [r7, #24]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	441a      	add	r2, r3
 800239c:	8b3b      	ldrh	r3, [r7, #24]
 800239e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023b2:	88fb      	ldrh	r3, [r7, #6]
 80023b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d01f      	beq.n	80023fc <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023d6:	82fb      	strh	r3, [r7, #22]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	461a      	mov	r2, r3
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	441a      	add	r2, r3
 80023e6:	8afb      	ldrh	r3, [r7, #22]
 80023e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80023fc:	8b7b      	ldrh	r3, [r7, #26]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 8087 	beq.w	8002512 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	6959      	ldr	r1, [r3, #20]
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	891a      	ldrh	r2, [r3, #8]
 8002410:	8b7b      	ldrh	r3, [r7, #26]
 8002412:	f004 fc01 	bl	8006c18 <USB_ReadPMA>
 8002416:	e07c      	b.n	8002512 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002420:	b29b      	uxth	r3, r3
 8002422:	461a      	mov	r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4413      	add	r3, r2
 800242c:	3306      	adds	r3, #6
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	4413      	add	r3, r2
 8002436:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002440:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	699a      	ldr	r2, [r3, #24]
 8002446:	8b7b      	ldrh	r3, [r7, #26]
 8002448:	429a      	cmp	r2, r3
 800244a:	d306      	bcc.n	800245a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	699a      	ldr	r2, [r3, #24]
 8002450:	8b7b      	ldrh	r3, [r7, #26]
 8002452:	1ad2      	subs	r2, r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	619a      	str	r2, [r3, #24]
 8002458:	e002      	b.n	8002460 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2200      	movs	r2, #0
 800245e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d123      	bne.n	80024b0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	b29b      	uxth	r3, r3
 800247a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800247e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002482:	83fb      	strh	r3, [r7, #30]
 8002484:	8bfb      	ldrh	r3, [r7, #30]
 8002486:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800248a:	83fb      	strh	r3, [r7, #30]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	441a      	add	r2, r3
 800249a:	8bfb      	ldrh	r3, [r7, #30]
 800249c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80024b0:	88fb      	ldrh	r3, [r7, #6]
 80024b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d11f      	bne.n	80024fa <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024d4:	83bb      	strh	r3, [r7, #28]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	441a      	add	r2, r3
 80024e4:	8bbb      	ldrh	r3, [r7, #28]
 80024e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80024fa:	8b7b      	ldrh	r3, [r7, #26]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6818      	ldr	r0, [r3, #0]
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	6959      	ldr	r1, [r3, #20]
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	895a      	ldrh	r2, [r3, #10]
 800250c:	8b7b      	ldrh	r3, [r7, #26]
 800250e:	f004 fb83 	bl	8006c18 <USB_ReadPMA>
    }
  }

  return count;
 8002512:	8b7b      	ldrh	r3, [r7, #26]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3720      	adds	r7, #32
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b0a2      	sub	sp, #136	; 0x88
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	4613      	mov	r3, r2
 8002528:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800252a:	88fb      	ldrh	r3, [r7, #6]
 800252c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 81c7 	beq.w	80028c4 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800253e:	b29b      	uxth	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4413      	add	r3, r2
 800254a:	3302      	adds	r3, #2
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	4413      	add	r3, r2
 8002554:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800255e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	699a      	ldr	r2, [r3, #24]
 8002566:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800256a:	429a      	cmp	r2, r3
 800256c:	d907      	bls.n	800257e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	699a      	ldr	r2, [r3, #24]
 8002572:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002576:	1ad2      	subs	r2, r2, r3
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	619a      	str	r2, [r3, #24]
 800257c:	e002      	b.n	8002584 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2200      	movs	r2, #0
 8002582:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	2b00      	cmp	r3, #0
 800258a:	f040 80b9 	bne.w	8002700 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	785b      	ldrb	r3, [r3, #1]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d126      	bne.n	80025e4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	62bb      	str	r3, [r7, #40]	; 0x28
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	461a      	mov	r2, r3
 80025a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025aa:	4413      	add	r3, r2
 80025ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	011a      	lsls	r2, r3, #4
 80025b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b6:	4413      	add	r3, r2
 80025b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	801a      	strh	r2, [r3, #0]
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025dc:	b29a      	uxth	r2, r3
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	801a      	strh	r2, [r3, #0]
 80025e2:	e01a      	b.n	800261a <HAL_PCD_EP_DB_Transmit+0xfe>
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	785b      	ldrb	r3, [r3, #1]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d116      	bne.n	800261a <HAL_PCD_EP_DB_Transmit+0xfe>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	633b      	str	r3, [r7, #48]	; 0x30
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	461a      	mov	r2, r3
 80025fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002600:	4413      	add	r3, r2
 8002602:	633b      	str	r3, [r7, #48]	; 0x30
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	011a      	lsls	r2, r3, #4
 800260a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260c:	4413      	add	r3, r2
 800260e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002612:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002616:	2200      	movs	r2, #0
 8002618:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	623b      	str	r3, [r7, #32]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	785b      	ldrb	r3, [r3, #1]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d126      	bne.n	8002676 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	61bb      	str	r3, [r7, #24]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002636:	b29b      	uxth	r3, r3
 8002638:	461a      	mov	r2, r3
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	4413      	add	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	011a      	lsls	r2, r3, #4
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	4413      	add	r3, r2
 800264a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	b29b      	uxth	r3, r3
 8002656:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800265a:	b29a      	uxth	r2, r3
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	801a      	strh	r2, [r3, #0]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	b29b      	uxth	r3, r3
 8002666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800266a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800266e:	b29a      	uxth	r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	801a      	strh	r2, [r3, #0]
 8002674:	e017      	b.n	80026a6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	785b      	ldrb	r3, [r3, #1]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d113      	bne.n	80026a6 <HAL_PCD_EP_DB_Transmit+0x18a>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002686:	b29b      	uxth	r3, r3
 8002688:	461a      	mov	r2, r3
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	4413      	add	r3, r2
 800268e:	623b      	str	r3, [r7, #32]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	011a      	lsls	r2, r3, #4
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	4413      	add	r3, r2
 800269a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800269e:	61fb      	str	r3, [r7, #28]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	2200      	movs	r2, #0
 80026a4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	4619      	mov	r1, r3
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f006 fd06 	bl	80090be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026b2:	88fb      	ldrh	r3, [r7, #6]
 80026b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 82d4 	beq.w	8002c66 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d8:	827b      	strh	r3, [r7, #18]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	441a      	add	r2, r3
 80026e8:	8a7b      	ldrh	r3, [r7, #18]
 80026ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	8013      	strh	r3, [r2, #0]
 80026fe:	e2b2      	b.n	8002c66 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002700:	88fb      	ldrh	r3, [r7, #6]
 8002702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d021      	beq.n	800274e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	461a      	mov	r2, r3
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	b29b      	uxth	r3, r3
 800271c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002724:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	461a      	mov	r2, r3
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	441a      	add	r2, r3
 8002736:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800273a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800273e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002742:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800274a:	b29b      	uxth	r3, r3
 800274c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002754:	2b01      	cmp	r3, #1
 8002756:	f040 8286 	bne.w	8002c66 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	695a      	ldr	r2, [r3, #20]
 800275e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002762:	441a      	add	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	69da      	ldr	r2, [r3, #28]
 800276c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002770:	441a      	add	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	6a1a      	ldr	r2, [r3, #32]
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	429a      	cmp	r2, r3
 8002780:	d309      	bcc.n	8002796 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	6a1a      	ldr	r2, [r3, #32]
 800278c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800278e:	1ad2      	subs	r2, r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	621a      	str	r2, [r3, #32]
 8002794:	e015      	b.n	80027c2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d107      	bne.n	80027ae <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800279e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027a2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027ac:	e009      	b.n	80027c2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2200      	movs	r2, #0
 80027c0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	785b      	ldrb	r3, [r3, #1]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d155      	bne.n	8002876 <HAL_PCD_EP_DB_Transmit+0x35a>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027d8:	b29b      	uxth	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027de:	4413      	add	r3, r2
 80027e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	011a      	lsls	r2, r3, #4
 80027e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ea:	4413      	add	r3, r2
 80027ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027f0:	637b      	str	r3, [r7, #52]	; 0x34
 80027f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d112      	bne.n	800281e <HAL_PCD_EP_DB_Transmit+0x302>
 80027f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002802:	b29a      	uxth	r2, r3
 8002804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002806:	801a      	strh	r2, [r3, #0]
 8002808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	b29b      	uxth	r3, r3
 800280e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002816:	b29a      	uxth	r2, r3
 8002818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800281a:	801a      	strh	r2, [r3, #0]
 800281c:	e047      	b.n	80028ae <HAL_PCD_EP_DB_Transmit+0x392>
 800281e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002820:	2b3e      	cmp	r3, #62	; 0x3e
 8002822:	d811      	bhi.n	8002848 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002826:	085b      	lsrs	r3, r3, #1
 8002828:	64bb      	str	r3, [r7, #72]	; 0x48
 800282a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d002      	beq.n	800283a <HAL_PCD_EP_DB_Transmit+0x31e>
 8002834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002836:	3301      	adds	r3, #1
 8002838:	64bb      	str	r3, [r7, #72]	; 0x48
 800283a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800283c:	b29b      	uxth	r3, r3
 800283e:	029b      	lsls	r3, r3, #10
 8002840:	b29a      	uxth	r2, r3
 8002842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002844:	801a      	strh	r2, [r3, #0]
 8002846:	e032      	b.n	80028ae <HAL_PCD_EP_DB_Transmit+0x392>
 8002848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800284a:	095b      	lsrs	r3, r3, #5
 800284c:	64bb      	str	r3, [r7, #72]	; 0x48
 800284e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002850:	f003 031f 	and.w	r3, r3, #31
 8002854:	2b00      	cmp	r3, #0
 8002856:	d102      	bne.n	800285e <HAL_PCD_EP_DB_Transmit+0x342>
 8002858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800285a:	3b01      	subs	r3, #1
 800285c:	64bb      	str	r3, [r7, #72]	; 0x48
 800285e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002860:	b29b      	uxth	r3, r3
 8002862:	029b      	lsls	r3, r3, #10
 8002864:	b29b      	uxth	r3, r3
 8002866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800286a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800286e:	b29a      	uxth	r2, r3
 8002870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002872:	801a      	strh	r2, [r3, #0]
 8002874:	e01b      	b.n	80028ae <HAL_PCD_EP_DB_Transmit+0x392>
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	785b      	ldrb	r3, [r3, #1]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d117      	bne.n	80028ae <HAL_PCD_EP_DB_Transmit+0x392>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	643b      	str	r3, [r7, #64]	; 0x40
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800288c:	b29b      	uxth	r3, r3
 800288e:	461a      	mov	r2, r3
 8002890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002892:	4413      	add	r3, r2
 8002894:	643b      	str	r3, [r7, #64]	; 0x40
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	011a      	lsls	r2, r3, #4
 800289c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800289e:	4413      	add	r3, r2
 80028a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ac:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6818      	ldr	r0, [r3, #0]
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	6959      	ldr	r1, [r3, #20]
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	891a      	ldrh	r2, [r3, #8]
 80028ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028bc:	b29b      	uxth	r3, r3
 80028be:	f004 f966 	bl	8006b8e <USB_WritePMA>
 80028c2:	e1d0      	b.n	8002c66 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4413      	add	r3, r2
 80028d8:	3306      	adds	r3, #6
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	699a      	ldr	r2, [r3, #24]
 80028f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d307      	bcc.n	800290c <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	699a      	ldr	r2, [r3, #24]
 8002900:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002904:	1ad2      	subs	r2, r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	619a      	str	r2, [r3, #24]
 800290a:	e002      	b.n	8002912 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2200      	movs	r2, #0
 8002910:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b00      	cmp	r3, #0
 8002918:	f040 80c4 	bne.w	8002aa4 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	785b      	ldrb	r3, [r3, #1]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d126      	bne.n	8002972 <HAL_PCD_EP_DB_Transmit+0x456>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	66fb      	str	r3, [r7, #108]	; 0x6c
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002932:	b29b      	uxth	r3, r3
 8002934:	461a      	mov	r2, r3
 8002936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002938:	4413      	add	r3, r2
 800293a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	011a      	lsls	r2, r3, #4
 8002942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002944:	4413      	add	r3, r2
 8002946:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800294a:	66bb      	str	r3, [r7, #104]	; 0x68
 800294c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	b29b      	uxth	r3, r3
 8002952:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002956:	b29a      	uxth	r2, r3
 8002958:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800295a:	801a      	strh	r2, [r3, #0]
 800295c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	b29b      	uxth	r3, r3
 8002962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800296a:	b29a      	uxth	r2, r3
 800296c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800296e:	801a      	strh	r2, [r3, #0]
 8002970:	e01a      	b.n	80029a8 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	785b      	ldrb	r3, [r3, #1]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d116      	bne.n	80029a8 <HAL_PCD_EP_DB_Transmit+0x48c>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	677b      	str	r3, [r7, #116]	; 0x74
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002988:	b29b      	uxth	r3, r3
 800298a:	461a      	mov	r2, r3
 800298c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800298e:	4413      	add	r3, r2
 8002990:	677b      	str	r3, [r7, #116]	; 0x74
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	011a      	lsls	r2, r3, #4
 8002998:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800299a:	4413      	add	r3, r2
 800299c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029a0:	673b      	str	r3, [r7, #112]	; 0x70
 80029a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029a4:	2200      	movs	r2, #0
 80029a6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	785b      	ldrb	r3, [r3, #1]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d12f      	bne.n	8002a16 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	461a      	mov	r2, r3
 80029ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029ce:	4413      	add	r3, r2
 80029d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	011a      	lsls	r2, r3, #4
 80029da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029de:	4413      	add	r3, r2
 80029e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029fa:	801a      	strh	r2, [r3, #0]
 80029fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a12:	801a      	strh	r2, [r3, #0]
 8002a14:	e017      	b.n	8002a46 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	785b      	ldrb	r3, [r3, #1]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d113      	bne.n	8002a46 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	461a      	mov	r2, r3
 8002a2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a2c:	4413      	add	r3, r2
 8002a2e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	011a      	lsls	r2, r3, #4
 8002a36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a38:	4413      	add	r3, r2
 8002a3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a42:	2200      	movs	r2, #0
 8002a44:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f006 fb36 	bl	80090be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a52:	88fb      	ldrh	r3, [r7, #6]
 8002a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f040 8104 	bne.w	8002c66 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	461a      	mov	r2, r3
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a78:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	461a      	mov	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	441a      	add	r2, r3
 8002a8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	8013      	strh	r3, [r2, #0]
 8002aa2:	e0e0      	b.n	8002c66 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002aa4:	88fb      	ldrh	r3, [r7, #6]
 8002aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d121      	bne.n	8002af2 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	441a      	add	r2, r3
 8002ada:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ae6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	f040 80b4 	bne.w	8002c66 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	695a      	ldr	r2, [r3, #20]
 8002b02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b06:	441a      	add	r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	69da      	ldr	r2, [r3, #28]
 8002b10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b14:	441a      	add	r2, r3
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	6a1a      	ldr	r2, [r3, #32]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d309      	bcc.n	8002b3a <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	6a1a      	ldr	r2, [r3, #32]
 8002b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b32:	1ad2      	subs	r2, r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	621a      	str	r2, [r3, #32]
 8002b38:	e015      	b.n	8002b66 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d107      	bne.n	8002b52 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002b42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b46:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b50:	e009      	b.n	8002b66 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	667b      	str	r3, [r7, #100]	; 0x64
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	785b      	ldrb	r3, [r3, #1]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d155      	bne.n	8002c20 <HAL_PCD_EP_DB_Transmit+0x704>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	461a      	mov	r2, r3
 8002b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b88:	4413      	add	r3, r2
 8002b8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	011a      	lsls	r2, r3, #4
 8002b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b94:	4413      	add	r3, r2
 8002b96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d112      	bne.n	8002bc8 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002ba2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bb0:	801a      	strh	r2, [r3, #0]
 8002bb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bc4:	801a      	strh	r2, [r3, #0]
 8002bc6:	e044      	b.n	8002c52 <HAL_PCD_EP_DB_Transmit+0x736>
 8002bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bca:	2b3e      	cmp	r3, #62	; 0x3e
 8002bcc:	d811      	bhi.n	8002bf2 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bd0:	085b      	lsrs	r3, r3, #1
 8002bd2:	657b      	str	r3, [r7, #84]	; 0x54
 8002bd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be0:	3301      	adds	r3, #1
 8002be2:	657b      	str	r3, [r7, #84]	; 0x54
 8002be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	029b      	lsls	r3, r3, #10
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bee:	801a      	strh	r2, [r3, #0]
 8002bf0:	e02f      	b.n	8002c52 <HAL_PCD_EP_DB_Transmit+0x736>
 8002bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf4:	095b      	lsrs	r3, r3, #5
 8002bf6:	657b      	str	r3, [r7, #84]	; 0x54
 8002bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bfa:	f003 031f 	and.w	r3, r3, #31
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d102      	bne.n	8002c08 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c04:	3b01      	subs	r3, #1
 8002c06:	657b      	str	r3, [r7, #84]	; 0x54
 8002c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	029b      	lsls	r3, r3, #10
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c1c:	801a      	strh	r2, [r3, #0]
 8002c1e:	e018      	b.n	8002c52 <HAL_PCD_EP_DB_Transmit+0x736>
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	785b      	ldrb	r3, [r3, #1]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d114      	bne.n	8002c52 <HAL_PCD_EP_DB_Transmit+0x736>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	461a      	mov	r2, r3
 8002c34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c36:	4413      	add	r3, r2
 8002c38:	667b      	str	r3, [r7, #100]	; 0x64
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	011a      	lsls	r2, r3, #4
 8002c40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c42:	4413      	add	r3, r2
 8002c44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c48:	663b      	str	r3, [r7, #96]	; 0x60
 8002c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c50:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	6959      	ldr	r1, [r3, #20]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	895a      	ldrh	r2, [r3, #10]
 8002c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	f003 ff94 	bl	8006b8e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c80:	823b      	strh	r3, [r7, #16]
 8002c82:	8a3b      	ldrh	r3, [r7, #16]
 8002c84:	f083 0310 	eor.w	r3, r3, #16
 8002c88:	823b      	strh	r3, [r7, #16]
 8002c8a:	8a3b      	ldrh	r3, [r7, #16]
 8002c8c:	f083 0320 	eor.w	r3, r3, #32
 8002c90:	823b      	strh	r3, [r7, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	441a      	add	r2, r3
 8002ca0:	8a3b      	ldrh	r3, [r7, #16]
 8002ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3788      	adds	r7, #136	; 0x88
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	817b      	strh	r3, [r7, #10]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002cd2:	897b      	ldrh	r3, [r7, #10]
 8002cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00b      	beq.n	8002cf6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cde:	897b      	ldrh	r3, [r7, #10]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	e009      	b.n	8002d0a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cf6:	897a      	ldrh	r2, [r7, #10]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	4413      	add	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002d0a:	893b      	ldrh	r3, [r7, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d107      	bne.n	8002d20 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2200      	movs	r2, #0
 8002d14:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	80da      	strh	r2, [r3, #6]
 8002d1e:	e00b      	b.n	8002d38 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2201      	movs	r2, #1
 8002d24:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	0c1b      	lsrs	r3, r3, #16
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	371c      	adds	r7, #28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e31d      	b.n	8003392 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d56:	4b94      	ldr	r3, [pc, #592]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d60:	4b91      	ldr	r3, [pc, #580]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d68:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d07b      	beq.n	8002e6e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d006      	beq.n	8002d8a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	2b0c      	cmp	r3, #12
 8002d80:	d10f      	bne.n	8002da2 <HAL_RCC_OscConfig+0x5e>
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d88:	d10b      	bne.n	8002da2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8a:	4b87      	ldr	r3, [pc, #540]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d06a      	beq.n	8002e6c <HAL_RCC_OscConfig+0x128>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d166      	bne.n	8002e6c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e2f7      	b.n	8003392 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d106      	bne.n	8002db8 <HAL_RCC_OscConfig+0x74>
 8002daa:	4b7f      	ldr	r3, [pc, #508]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a7e      	ldr	r2, [pc, #504]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	e02d      	b.n	8002e14 <HAL_RCC_OscConfig+0xd0>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10c      	bne.n	8002dda <HAL_RCC_OscConfig+0x96>
 8002dc0:	4b79      	ldr	r3, [pc, #484]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a78      	ldr	r2, [pc, #480]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dca:	6013      	str	r3, [r2, #0]
 8002dcc:	4b76      	ldr	r3, [pc, #472]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a75      	ldr	r2, [pc, #468]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd6:	6013      	str	r3, [r2, #0]
 8002dd8:	e01c      	b.n	8002e14 <HAL_RCC_OscConfig+0xd0>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b05      	cmp	r3, #5
 8002de0:	d10c      	bne.n	8002dfc <HAL_RCC_OscConfig+0xb8>
 8002de2:	4b71      	ldr	r3, [pc, #452]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a70      	ldr	r2, [pc, #448]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	4b6e      	ldr	r3, [pc, #440]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a6d      	ldr	r2, [pc, #436]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	e00b      	b.n	8002e14 <HAL_RCC_OscConfig+0xd0>
 8002dfc:	4b6a      	ldr	r3, [pc, #424]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a69      	ldr	r2, [pc, #420]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	4b67      	ldr	r3, [pc, #412]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a66      	ldr	r2, [pc, #408]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d013      	beq.n	8002e44 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1c:	f7fe f88e 	bl	8000f3c <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e24:	f7fe f88a 	bl	8000f3c <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b64      	cmp	r3, #100	; 0x64
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e2ad      	b.n	8003392 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e36:	4b5c      	ldr	r3, [pc, #368]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0xe0>
 8002e42:	e014      	b.n	8002e6e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e44:	f7fe f87a 	bl	8000f3c <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e4c:	f7fe f876 	bl	8000f3c <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b64      	cmp	r3, #100	; 0x64
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e299      	b.n	8003392 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e5e:	4b52      	ldr	r3, [pc, #328]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x108>
 8002e6a:	e000      	b.n	8002e6e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d05a      	beq.n	8002f30 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d005      	beq.n	8002e8c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	2b0c      	cmp	r3, #12
 8002e84:	d119      	bne.n	8002eba <HAL_RCC_OscConfig+0x176>
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d116      	bne.n	8002eba <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e8c:	4b46      	ldr	r3, [pc, #280]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x160>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e276      	b.n	8003392 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea4:	4b40      	ldr	r3, [pc, #256]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	021b      	lsls	r3, r3, #8
 8002eb2:	493d      	ldr	r1, [pc, #244]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb8:	e03a      	b.n	8002f30 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d020      	beq.n	8002f04 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ec2:	4b3a      	ldr	r3, [pc, #232]	; (8002fac <HAL_RCC_OscConfig+0x268>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7fe f838 	bl	8000f3c <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ed0:	f7fe f834 	bl	8000f3c <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e257      	b.n	8003392 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ee2:	4b31      	ldr	r3, [pc, #196]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eee:	4b2e      	ldr	r3, [pc, #184]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	021b      	lsls	r3, r3, #8
 8002efc:	492a      	ldr	r1, [pc, #168]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	604b      	str	r3, [r1, #4]
 8002f02:	e015      	b.n	8002f30 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f04:	4b29      	ldr	r3, [pc, #164]	; (8002fac <HAL_RCC_OscConfig+0x268>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0a:	f7fe f817 	bl	8000f3c <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f12:	f7fe f813 	bl	8000f3c <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e236      	b.n	8003392 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f24:	4b20      	ldr	r3, [pc, #128]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1f0      	bne.n	8002f12 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0310 	and.w	r3, r3, #16
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 80b8 	beq.w	80030ae <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d170      	bne.n	8003026 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f44:	4b18      	ldr	r3, [pc, #96]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_RCC_OscConfig+0x218>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e21a      	b.n	8003392 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1a      	ldr	r2, [r3, #32]
 8002f60:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d921      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 fc7d 	bl	8003870 <RCC_SetFlashLatencyFromMSIRange>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e208      	b.n	8003392 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f80:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	4906      	ldr	r1, [pc, #24]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f92:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	061b      	lsls	r3, r3, #24
 8002fa0:	4901      	ldr	r1, [pc, #4]	; (8002fa8 <HAL_RCC_OscConfig+0x264>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	604b      	str	r3, [r1, #4]
 8002fa6:	e020      	b.n	8002fea <HAL_RCC_OscConfig+0x2a6>
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fb0:	4b99      	ldr	r3, [pc, #612]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	4996      	ldr	r1, [pc, #600]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fc2:	4b95      	ldr	r3, [pc, #596]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	061b      	lsls	r3, r3, #24
 8002fd0:	4991      	ldr	r1, [pc, #580]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 fc48 	bl	8003870 <RCC_SetFlashLatencyFromMSIRange>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e1d3      	b.n	8003392 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	0b5b      	lsrs	r3, r3, #13
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002ffa:	4a87      	ldr	r2, [pc, #540]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 8002ffc:	6892      	ldr	r2, [r2, #8]
 8002ffe:	0912      	lsrs	r2, r2, #4
 8003000:	f002 020f 	and.w	r2, r2, #15
 8003004:	4985      	ldr	r1, [pc, #532]	; (800321c <HAL_RCC_OscConfig+0x4d8>)
 8003006:	5c8a      	ldrb	r2, [r1, r2]
 8003008:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800300a:	4a85      	ldr	r2, [pc, #532]	; (8003220 <HAL_RCC_OscConfig+0x4dc>)
 800300c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800300e:	4b85      	ldr	r3, [pc, #532]	; (8003224 <HAL_RCC_OscConfig+0x4e0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd ff46 	bl	8000ea4 <HAL_InitTick>
 8003018:	4603      	mov	r3, r0
 800301a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d045      	beq.n	80030ae <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	e1b5      	b.n	8003392 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d029      	beq.n	8003082 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800302e:	4b7e      	ldr	r3, [pc, #504]	; (8003228 <HAL_RCC_OscConfig+0x4e4>)
 8003030:	2201      	movs	r2, #1
 8003032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003034:	f7fd ff82 	bl	8000f3c <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800303c:	f7fd ff7e 	bl	8000f3c <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e1a1      	b.n	8003392 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800304e:	4b72      	ldr	r3, [pc, #456]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0f0      	beq.n	800303c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800305a:	4b6f      	ldr	r3, [pc, #444]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	496c      	ldr	r1, [pc, #432]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 8003068:	4313      	orrs	r3, r2
 800306a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800306c:	4b6a      	ldr	r3, [pc, #424]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	061b      	lsls	r3, r3, #24
 800307a:	4967      	ldr	r1, [pc, #412]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 800307c:	4313      	orrs	r3, r2
 800307e:	604b      	str	r3, [r1, #4]
 8003080:	e015      	b.n	80030ae <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003082:	4b69      	ldr	r3, [pc, #420]	; (8003228 <HAL_RCC_OscConfig+0x4e4>)
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7fd ff58 	bl	8000f3c <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003090:	f7fd ff54 	bl	8000f3c <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e177      	b.n	8003392 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80030a2:	4b5d      	ldr	r3, [pc, #372]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d030      	beq.n	800311c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d016      	beq.n	80030f0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030c2:	4b5a      	ldr	r3, [pc, #360]	; (800322c <HAL_RCC_OscConfig+0x4e8>)
 80030c4:	2201      	movs	r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c8:	f7fd ff38 	bl	8000f3c <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030d0:	f7fd ff34 	bl	8000f3c <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e157      	b.n	8003392 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030e2:	4b4d      	ldr	r3, [pc, #308]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 80030e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCC_OscConfig+0x38c>
 80030ee:	e015      	b.n	800311c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f0:	4b4e      	ldr	r3, [pc, #312]	; (800322c <HAL_RCC_OscConfig+0x4e8>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f6:	f7fd ff21 	bl	8000f3c <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030fe:	f7fd ff1d 	bl	8000f3c <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e140      	b.n	8003392 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003110:	4b41      	ldr	r3, [pc, #260]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 8003112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1f0      	bne.n	80030fe <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 80b5 	beq.w	8003294 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800312a:	2300      	movs	r3, #0
 800312c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800312e:	4b3a      	ldr	r3, [pc, #232]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10d      	bne.n	8003156 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800313a:	4b37      	ldr	r3, [pc, #220]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	4a36      	ldr	r2, [pc, #216]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 8003140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003144:	6253      	str	r3, [r2, #36]	; 0x24
 8003146:	4b34      	ldr	r3, [pc, #208]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314e:	60bb      	str	r3, [r7, #8]
 8003150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003152:	2301      	movs	r3, #1
 8003154:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003156:	4b36      	ldr	r3, [pc, #216]	; (8003230 <HAL_RCC_OscConfig+0x4ec>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315e:	2b00      	cmp	r3, #0
 8003160:	d118      	bne.n	8003194 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003162:	4b33      	ldr	r3, [pc, #204]	; (8003230 <HAL_RCC_OscConfig+0x4ec>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a32      	ldr	r2, [pc, #200]	; (8003230 <HAL_RCC_OscConfig+0x4ec>)
 8003168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800316c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800316e:	f7fd fee5 	bl	8000f3c <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003176:	f7fd fee1 	bl	8000f3c <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b64      	cmp	r3, #100	; 0x64
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e104      	b.n	8003392 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003188:	4b29      	ldr	r3, [pc, #164]	; (8003230 <HAL_RCC_OscConfig+0x4ec>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0f0      	beq.n	8003176 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d106      	bne.n	80031aa <HAL_RCC_OscConfig+0x466>
 800319c:	4b1e      	ldr	r3, [pc, #120]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 800319e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a0:	4a1d      	ldr	r2, [pc, #116]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 80031a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a6:	6353      	str	r3, [r2, #52]	; 0x34
 80031a8:	e02d      	b.n	8003206 <HAL_RCC_OscConfig+0x4c2>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10c      	bne.n	80031cc <HAL_RCC_OscConfig+0x488>
 80031b2:	4b19      	ldr	r3, [pc, #100]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 80031b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b6:	4a18      	ldr	r2, [pc, #96]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 80031b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031bc:	6353      	str	r3, [r2, #52]	; 0x34
 80031be:	4b16      	ldr	r3, [pc, #88]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 80031c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c2:	4a15      	ldr	r2, [pc, #84]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 80031c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031c8:	6353      	str	r3, [r2, #52]	; 0x34
 80031ca:	e01c      	b.n	8003206 <HAL_RCC_OscConfig+0x4c2>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2b05      	cmp	r3, #5
 80031d2:	d10c      	bne.n	80031ee <HAL_RCC_OscConfig+0x4aa>
 80031d4:	4b10      	ldr	r3, [pc, #64]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 80031d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d8:	4a0f      	ldr	r2, [pc, #60]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 80031da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031de:	6353      	str	r3, [r2, #52]	; 0x34
 80031e0:	4b0d      	ldr	r3, [pc, #52]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 80031e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e4:	4a0c      	ldr	r2, [pc, #48]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 80031e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ea:	6353      	str	r3, [r2, #52]	; 0x34
 80031ec:	e00b      	b.n	8003206 <HAL_RCC_OscConfig+0x4c2>
 80031ee:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 80031f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f2:	4a09      	ldr	r2, [pc, #36]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 80031f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031f8:	6353      	str	r3, [r2, #52]	; 0x34
 80031fa:	4b07      	ldr	r3, [pc, #28]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 80031fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fe:	4a06      	ldr	r2, [pc, #24]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 8003200:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003204:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d024      	beq.n	8003258 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320e:	f7fd fe95 	bl	8000f3c <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003214:	e019      	b.n	800324a <HAL_RCC_OscConfig+0x506>
 8003216:	bf00      	nop
 8003218:	40023800 	.word	0x40023800
 800321c:	0800af98 	.word	0x0800af98
 8003220:	20000164 	.word	0x20000164
 8003224:	20000168 	.word	0x20000168
 8003228:	42470020 	.word	0x42470020
 800322c:	42470680 	.word	0x42470680
 8003230:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003234:	f7fd fe82 	bl	8000f3c <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003242:	4293      	cmp	r3, r2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e0a3      	b.n	8003392 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800324a:	4b54      	ldr	r3, [pc, #336]	; (800339c <HAL_RCC_OscConfig+0x658>)
 800324c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0ee      	beq.n	8003234 <HAL_RCC_OscConfig+0x4f0>
 8003256:	e014      	b.n	8003282 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003258:	f7fd fe70 	bl	8000f3c <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800325e:	e00a      	b.n	8003276 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003260:	f7fd fe6c 	bl	8000f3c <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	f241 3288 	movw	r2, #5000	; 0x1388
 800326e:	4293      	cmp	r3, r2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e08d      	b.n	8003392 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003276:	4b49      	ldr	r3, [pc, #292]	; (800339c <HAL_RCC_OscConfig+0x658>)
 8003278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1ee      	bne.n	8003260 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003282:	7ffb      	ldrb	r3, [r7, #31]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d105      	bne.n	8003294 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003288:	4b44      	ldr	r3, [pc, #272]	; (800339c <HAL_RCC_OscConfig+0x658>)
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	4a43      	ldr	r2, [pc, #268]	; (800339c <HAL_RCC_OscConfig+0x658>)
 800328e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003292:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	2b00      	cmp	r3, #0
 800329a:	d079      	beq.n	8003390 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	2b0c      	cmp	r3, #12
 80032a0:	d056      	beq.n	8003350 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d13b      	bne.n	8003322 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032aa:	4b3d      	ldr	r3, [pc, #244]	; (80033a0 <HAL_RCC_OscConfig+0x65c>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b0:	f7fd fe44 	bl	8000f3c <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b8:	f7fd fe40 	bl	8000f3c <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e063      	b.n	8003392 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032ca:	4b34      	ldr	r3, [pc, #208]	; (800339c <HAL_RCC_OscConfig+0x658>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f0      	bne.n	80032b8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032d6:	4b31      	ldr	r3, [pc, #196]	; (800339c <HAL_RCC_OscConfig+0x658>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	4319      	orrs	r1, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ec:	430b      	orrs	r3, r1
 80032ee:	492b      	ldr	r1, [pc, #172]	; (800339c <HAL_RCC_OscConfig+0x658>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032f4:	4b2a      	ldr	r3, [pc, #168]	; (80033a0 <HAL_RCC_OscConfig+0x65c>)
 80032f6:	2201      	movs	r2, #1
 80032f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fa:	f7fd fe1f 	bl	8000f3c <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003302:	f7fd fe1b 	bl	8000f3c <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e03e      	b.n	8003392 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003314:	4b21      	ldr	r3, [pc, #132]	; (800339c <HAL_RCC_OscConfig+0x658>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_RCC_OscConfig+0x5be>
 8003320:	e036      	b.n	8003390 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003322:	4b1f      	ldr	r3, [pc, #124]	; (80033a0 <HAL_RCC_OscConfig+0x65c>)
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003328:	f7fd fe08 	bl	8000f3c <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003330:	f7fd fe04 	bl	8000f3c <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e027      	b.n	8003392 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003342:	4b16      	ldr	r3, [pc, #88]	; (800339c <HAL_RCC_OscConfig+0x658>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f0      	bne.n	8003330 <HAL_RCC_OscConfig+0x5ec>
 800334e:	e01f      	b.n	8003390 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e01a      	b.n	8003392 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800335c:	4b0f      	ldr	r3, [pc, #60]	; (800339c <HAL_RCC_OscConfig+0x658>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336c:	429a      	cmp	r2, r3
 800336e:	d10d      	bne.n	800338c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337a:	429a      	cmp	r2, r3
 800337c:	d106      	bne.n	800338c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003388:	429a      	cmp	r2, r3
 800338a:	d001      	beq.n	8003390 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e000      	b.n	8003392 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3720      	adds	r7, #32
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40023800 	.word	0x40023800
 80033a0:	42470060 	.word	0x42470060

080033a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e11a      	b.n	80035ee <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033b8:	4b8f      	ldr	r3, [pc, #572]	; (80035f8 <HAL_RCC_ClockConfig+0x254>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d919      	bls.n	80033fa <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d105      	bne.n	80033d8 <HAL_RCC_ClockConfig+0x34>
 80033cc:	4b8a      	ldr	r3, [pc, #552]	; (80035f8 <HAL_RCC_ClockConfig+0x254>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a89      	ldr	r2, [pc, #548]	; (80035f8 <HAL_RCC_ClockConfig+0x254>)
 80033d2:	f043 0304 	orr.w	r3, r3, #4
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	4b87      	ldr	r3, [pc, #540]	; (80035f8 <HAL_RCC_ClockConfig+0x254>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f023 0201 	bic.w	r2, r3, #1
 80033e0:	4985      	ldr	r1, [pc, #532]	; (80035f8 <HAL_RCC_ClockConfig+0x254>)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e8:	4b83      	ldr	r3, [pc, #524]	; (80035f8 <HAL_RCC_ClockConfig+0x254>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d001      	beq.n	80033fa <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e0f9      	b.n	80035ee <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d008      	beq.n	8003418 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003406:	4b7d      	ldr	r3, [pc, #500]	; (80035fc <HAL_RCC_ClockConfig+0x258>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	497a      	ldr	r1, [pc, #488]	; (80035fc <HAL_RCC_ClockConfig+0x258>)
 8003414:	4313      	orrs	r3, r2
 8003416:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 808e 	beq.w	8003542 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b02      	cmp	r3, #2
 800342c:	d107      	bne.n	800343e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800342e:	4b73      	ldr	r3, [pc, #460]	; (80035fc <HAL_RCC_ClockConfig+0x258>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d121      	bne.n	800347e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e0d7      	b.n	80035ee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b03      	cmp	r3, #3
 8003444:	d107      	bne.n	8003456 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003446:	4b6d      	ldr	r3, [pc, #436]	; (80035fc <HAL_RCC_ClockConfig+0x258>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d115      	bne.n	800347e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e0cb      	b.n	80035ee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d107      	bne.n	800346e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800345e:	4b67      	ldr	r3, [pc, #412]	; (80035fc <HAL_RCC_ClockConfig+0x258>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d109      	bne.n	800347e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e0bf      	b.n	80035ee <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800346e:	4b63      	ldr	r3, [pc, #396]	; (80035fc <HAL_RCC_ClockConfig+0x258>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e0b7      	b.n	80035ee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800347e:	4b5f      	ldr	r3, [pc, #380]	; (80035fc <HAL_RCC_ClockConfig+0x258>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f023 0203 	bic.w	r2, r3, #3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	495c      	ldr	r1, [pc, #368]	; (80035fc <HAL_RCC_ClockConfig+0x258>)
 800348c:	4313      	orrs	r3, r2
 800348e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003490:	f7fd fd54 	bl	8000f3c <HAL_GetTick>
 8003494:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d112      	bne.n	80034c4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800349e:	e00a      	b.n	80034b6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a0:	f7fd fd4c 	bl	8000f3c <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e09b      	b.n	80035ee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034b6:	4b51      	ldr	r3, [pc, #324]	; (80035fc <HAL_RCC_ClockConfig+0x258>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 030c 	and.w	r3, r3, #12
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d1ee      	bne.n	80034a0 <HAL_RCC_ClockConfig+0xfc>
 80034c2:	e03e      	b.n	8003542 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d112      	bne.n	80034f2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034cc:	e00a      	b.n	80034e4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ce:	f7fd fd35 	bl	8000f3c <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034dc:	4293      	cmp	r3, r2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e084      	b.n	80035ee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034e4:	4b45      	ldr	r3, [pc, #276]	; (80035fc <HAL_RCC_ClockConfig+0x258>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 030c 	and.w	r3, r3, #12
 80034ec:	2b0c      	cmp	r3, #12
 80034ee:	d1ee      	bne.n	80034ce <HAL_RCC_ClockConfig+0x12a>
 80034f0:	e027      	b.n	8003542 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d11d      	bne.n	8003536 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80034fa:	e00a      	b.n	8003512 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034fc:	f7fd fd1e 	bl	8000f3c <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f241 3288 	movw	r2, #5000	; 0x1388
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e06d      	b.n	80035ee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003512:	4b3a      	ldr	r3, [pc, #232]	; (80035fc <HAL_RCC_ClockConfig+0x258>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b04      	cmp	r3, #4
 800351c:	d1ee      	bne.n	80034fc <HAL_RCC_ClockConfig+0x158>
 800351e:	e010      	b.n	8003542 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003520:	f7fd fd0c 	bl	8000f3c <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f241 3288 	movw	r2, #5000	; 0x1388
 800352e:	4293      	cmp	r3, r2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e05b      	b.n	80035ee <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003536:	4b31      	ldr	r3, [pc, #196]	; (80035fc <HAL_RCC_ClockConfig+0x258>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 030c 	and.w	r3, r3, #12
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1ee      	bne.n	8003520 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003542:	4b2d      	ldr	r3, [pc, #180]	; (80035f8 <HAL_RCC_ClockConfig+0x254>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d219      	bcs.n	8003584 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d105      	bne.n	8003562 <HAL_RCC_ClockConfig+0x1be>
 8003556:	4b28      	ldr	r3, [pc, #160]	; (80035f8 <HAL_RCC_ClockConfig+0x254>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a27      	ldr	r2, [pc, #156]	; (80035f8 <HAL_RCC_ClockConfig+0x254>)
 800355c:	f043 0304 	orr.w	r3, r3, #4
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	4b25      	ldr	r3, [pc, #148]	; (80035f8 <HAL_RCC_ClockConfig+0x254>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f023 0201 	bic.w	r2, r3, #1
 800356a:	4923      	ldr	r1, [pc, #140]	; (80035f8 <HAL_RCC_ClockConfig+0x254>)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	4313      	orrs	r3, r2
 8003570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003572:	4b21      	ldr	r3, [pc, #132]	; (80035f8 <HAL_RCC_ClockConfig+0x254>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d001      	beq.n	8003584 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e034      	b.n	80035ee <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b00      	cmp	r3, #0
 800358e:	d008      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003590:	4b1a      	ldr	r3, [pc, #104]	; (80035fc <HAL_RCC_ClockConfig+0x258>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	4917      	ldr	r1, [pc, #92]	; (80035fc <HAL_RCC_ClockConfig+0x258>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d009      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ae:	4b13      	ldr	r3, [pc, #76]	; (80035fc <HAL_RCC_ClockConfig+0x258>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	490f      	ldr	r1, [pc, #60]	; (80035fc <HAL_RCC_ClockConfig+0x258>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035c2:	f000 f823 	bl	800360c <HAL_RCC_GetSysClockFreq>
 80035c6:	4602      	mov	r2, r0
 80035c8:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <HAL_RCC_ClockConfig+0x258>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	091b      	lsrs	r3, r3, #4
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	490b      	ldr	r1, [pc, #44]	; (8003600 <HAL_RCC_ClockConfig+0x25c>)
 80035d4:	5ccb      	ldrb	r3, [r1, r3]
 80035d6:	fa22 f303 	lsr.w	r3, r2, r3
 80035da:	4a0a      	ldr	r2, [pc, #40]	; (8003604 <HAL_RCC_ClockConfig+0x260>)
 80035dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035de:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <HAL_RCC_ClockConfig+0x264>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fd fc5e 	bl	8000ea4 <HAL_InitTick>
 80035e8:	4603      	mov	r3, r0
 80035ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80035ec:	7afb      	ldrb	r3, [r7, #11]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40023c00 	.word	0x40023c00
 80035fc:	40023800 	.word	0x40023800
 8003600:	0800af98 	.word	0x0800af98
 8003604:	20000164 	.word	0x20000164
 8003608:	20000168 	.word	0x20000168

0800360c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800360c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003610:	b092      	sub	sp, #72	; 0x48
 8003612:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003614:	4b79      	ldr	r3, [pc, #484]	; (80037fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800361a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800361c:	f003 030c 	and.w	r3, r3, #12
 8003620:	2b0c      	cmp	r3, #12
 8003622:	d00d      	beq.n	8003640 <HAL_RCC_GetSysClockFreq+0x34>
 8003624:	2b0c      	cmp	r3, #12
 8003626:	f200 80d5 	bhi.w	80037d4 <HAL_RCC_GetSysClockFreq+0x1c8>
 800362a:	2b04      	cmp	r3, #4
 800362c:	d002      	beq.n	8003634 <HAL_RCC_GetSysClockFreq+0x28>
 800362e:	2b08      	cmp	r3, #8
 8003630:	d003      	beq.n	800363a <HAL_RCC_GetSysClockFreq+0x2e>
 8003632:	e0cf      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003634:	4b72      	ldr	r3, [pc, #456]	; (8003800 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003636:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003638:	e0da      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800363a:	4b72      	ldr	r3, [pc, #456]	; (8003804 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800363c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800363e:	e0d7      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003642:	0c9b      	lsrs	r3, r3, #18
 8003644:	f003 020f 	and.w	r2, r3, #15
 8003648:	4b6f      	ldr	r3, [pc, #444]	; (8003808 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800364a:	5c9b      	ldrb	r3, [r3, r2]
 800364c:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800364e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003650:	0d9b      	lsrs	r3, r3, #22
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	3301      	adds	r3, #1
 8003658:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800365a:	4b68      	ldr	r3, [pc, #416]	; (80037fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d05d      	beq.n	8003722 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003668:	2200      	movs	r2, #0
 800366a:	4618      	mov	r0, r3
 800366c:	4611      	mov	r1, r2
 800366e:	4604      	mov	r4, r0
 8003670:	460d      	mov	r5, r1
 8003672:	4622      	mov	r2, r4
 8003674:	462b      	mov	r3, r5
 8003676:	f04f 0000 	mov.w	r0, #0
 800367a:	f04f 0100 	mov.w	r1, #0
 800367e:	0159      	lsls	r1, r3, #5
 8003680:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003684:	0150      	lsls	r0, r2, #5
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	4621      	mov	r1, r4
 800368c:	1a51      	subs	r1, r2, r1
 800368e:	6139      	str	r1, [r7, #16]
 8003690:	4629      	mov	r1, r5
 8003692:	eb63 0301 	sbc.w	r3, r3, r1
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036a4:	4659      	mov	r1, fp
 80036a6:	018b      	lsls	r3, r1, #6
 80036a8:	4651      	mov	r1, sl
 80036aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036ae:	4651      	mov	r1, sl
 80036b0:	018a      	lsls	r2, r1, #6
 80036b2:	46d4      	mov	ip, sl
 80036b4:	ebb2 080c 	subs.w	r8, r2, ip
 80036b8:	4659      	mov	r1, fp
 80036ba:	eb63 0901 	sbc.w	r9, r3, r1
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036d2:	4690      	mov	r8, r2
 80036d4:	4699      	mov	r9, r3
 80036d6:	4623      	mov	r3, r4
 80036d8:	eb18 0303 	adds.w	r3, r8, r3
 80036dc:	60bb      	str	r3, [r7, #8]
 80036de:	462b      	mov	r3, r5
 80036e0:	eb49 0303 	adc.w	r3, r9, r3
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036f2:	4629      	mov	r1, r5
 80036f4:	024b      	lsls	r3, r1, #9
 80036f6:	4620      	mov	r0, r4
 80036f8:	4629      	mov	r1, r5
 80036fa:	4604      	mov	r4, r0
 80036fc:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003700:	4601      	mov	r1, r0
 8003702:	024a      	lsls	r2, r1, #9
 8003704:	4610      	mov	r0, r2
 8003706:	4619      	mov	r1, r3
 8003708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800370a:	2200      	movs	r2, #0
 800370c:	62bb      	str	r3, [r7, #40]	; 0x28
 800370e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003710:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003714:	f7fc fd32 	bl	800017c <__aeabi_uldivmod>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	4613      	mov	r3, r2
 800371e:	647b      	str	r3, [r7, #68]	; 0x44
 8003720:	e055      	b.n	80037ce <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003724:	2200      	movs	r2, #0
 8003726:	623b      	str	r3, [r7, #32]
 8003728:	627a      	str	r2, [r7, #36]	; 0x24
 800372a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800372e:	4642      	mov	r2, r8
 8003730:	464b      	mov	r3, r9
 8003732:	f04f 0000 	mov.w	r0, #0
 8003736:	f04f 0100 	mov.w	r1, #0
 800373a:	0159      	lsls	r1, r3, #5
 800373c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003740:	0150      	lsls	r0, r2, #5
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	46c4      	mov	ip, r8
 8003748:	ebb2 0a0c 	subs.w	sl, r2, ip
 800374c:	4640      	mov	r0, r8
 800374e:	4649      	mov	r1, r9
 8003750:	468c      	mov	ip, r1
 8003752:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003762:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003766:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800376a:	ebb2 040a 	subs.w	r4, r2, sl
 800376e:	eb63 050b 	sbc.w	r5, r3, fp
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	f04f 0300 	mov.w	r3, #0
 800377a:	00eb      	lsls	r3, r5, #3
 800377c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003780:	00e2      	lsls	r2, r4, #3
 8003782:	4614      	mov	r4, r2
 8003784:	461d      	mov	r5, r3
 8003786:	4603      	mov	r3, r0
 8003788:	18e3      	adds	r3, r4, r3
 800378a:	603b      	str	r3, [r7, #0]
 800378c:	460b      	mov	r3, r1
 800378e:	eb45 0303 	adc.w	r3, r5, r3
 8003792:	607b      	str	r3, [r7, #4]
 8003794:	f04f 0200 	mov.w	r2, #0
 8003798:	f04f 0300 	mov.w	r3, #0
 800379c:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037a0:	4629      	mov	r1, r5
 80037a2:	028b      	lsls	r3, r1, #10
 80037a4:	4620      	mov	r0, r4
 80037a6:	4629      	mov	r1, r5
 80037a8:	4604      	mov	r4, r0
 80037aa:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80037ae:	4601      	mov	r1, r0
 80037b0:	028a      	lsls	r2, r1, #10
 80037b2:	4610      	mov	r0, r2
 80037b4:	4619      	mov	r1, r3
 80037b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b8:	2200      	movs	r2, #0
 80037ba:	61bb      	str	r3, [r7, #24]
 80037bc:	61fa      	str	r2, [r7, #28]
 80037be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037c2:	f7fc fcdb 	bl	800017c <__aeabi_uldivmod>
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	4613      	mov	r3, r2
 80037cc:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80037ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037d0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80037d2:	e00d      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80037d4:	4b09      	ldr	r3, [pc, #36]	; (80037fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	0b5b      	lsrs	r3, r3, #13
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80037e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e2:	3301      	adds	r3, #1
 80037e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80037ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3748      	adds	r7, #72	; 0x48
 80037f6:	46bd      	mov	sp, r7
 80037f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037fc:	40023800 	.word	0x40023800
 8003800:	00f42400 	.word	0x00f42400
 8003804:	007a1200 	.word	0x007a1200
 8003808:	0800af8c 	.word	0x0800af8c

0800380c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003810:	4b02      	ldr	r3, [pc, #8]	; (800381c <HAL_RCC_GetHCLKFreq+0x10>)
 8003812:	681b      	ldr	r3, [r3, #0]
}
 8003814:	4618      	mov	r0, r3
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr
 800381c:	20000164 	.word	0x20000164

08003820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003824:	f7ff fff2 	bl	800380c <HAL_RCC_GetHCLKFreq>
 8003828:	4602      	mov	r2, r0
 800382a:	4b05      	ldr	r3, [pc, #20]	; (8003840 <HAL_RCC_GetPCLK1Freq+0x20>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	0a1b      	lsrs	r3, r3, #8
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	4903      	ldr	r1, [pc, #12]	; (8003844 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003836:	5ccb      	ldrb	r3, [r1, r3]
 8003838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800383c:	4618      	mov	r0, r3
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40023800 	.word	0x40023800
 8003844:	0800afa8 	.word	0x0800afa8

08003848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800384c:	f7ff ffde 	bl	800380c <HAL_RCC_GetHCLKFreq>
 8003850:	4602      	mov	r2, r0
 8003852:	4b05      	ldr	r3, [pc, #20]	; (8003868 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	0adb      	lsrs	r3, r3, #11
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	4903      	ldr	r1, [pc, #12]	; (800386c <HAL_RCC_GetPCLK2Freq+0x24>)
 800385e:	5ccb      	ldrb	r3, [r1, r3]
 8003860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003864:	4618      	mov	r0, r3
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40023800 	.word	0x40023800
 800386c:	0800afa8 	.word	0x0800afa8

08003870 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003878:	2300      	movs	r3, #0
 800387a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800387c:	4b29      	ldr	r3, [pc, #164]	; (8003924 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d12c      	bne.n	80038e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003888:	4b26      	ldr	r3, [pc, #152]	; (8003924 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003894:	4b24      	ldr	r3, [pc, #144]	; (8003928 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	e016      	b.n	80038ce <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a0:	4b20      	ldr	r3, [pc, #128]	; (8003924 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	4a1f      	ldr	r2, [pc, #124]	; (8003924 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80038a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038aa:	6253      	str	r3, [r2, #36]	; 0x24
 80038ac:	4b1d      	ldr	r3, [pc, #116]	; (8003924 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80038b8:	4b1b      	ldr	r3, [pc, #108]	; (8003928 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80038c0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c2:	4b18      	ldr	r3, [pc, #96]	; (8003924 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	4a17      	ldr	r2, [pc, #92]	; (8003924 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80038c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038cc:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80038d4:	d105      	bne.n	80038e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80038dc:	d101      	bne.n	80038e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80038de:	2301      	movs	r3, #1
 80038e0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d105      	bne.n	80038f4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80038e8:	4b10      	ldr	r3, [pc, #64]	; (800392c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a0f      	ldr	r2, [pc, #60]	; (800392c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ee:	f043 0304 	orr.w	r3, r3, #4
 80038f2:	6013      	str	r3, [r2, #0]
 80038f4:	4b0d      	ldr	r3, [pc, #52]	; (800392c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f023 0201 	bic.w	r2, r3, #1
 80038fc:	490b      	ldr	r1, [pc, #44]	; (800392c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003904:	4b09      	ldr	r3, [pc, #36]	; (800392c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	429a      	cmp	r2, r3
 8003910:	d001      	beq.n	8003916 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e000      	b.n	8003918 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	371c      	adds	r7, #28
 800391c:	46bd      	mov	sp, r7
 800391e:	bc80      	pop	{r7}
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	40023800 	.word	0x40023800
 8003928:	40007000 	.word	0x40007000
 800392c:	40023c00 	.word	0x40023c00

08003930 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e07b      	b.n	8003a3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	2b00      	cmp	r3, #0
 8003948:	d108      	bne.n	800395c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003952:	d009      	beq.n	8003968 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	61da      	str	r2, [r3, #28]
 800395a:	e005      	b.n	8003968 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fd f8c4 	bl	8000b10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800399e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	431a      	orrs	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039d8:	431a      	orrs	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ec:	ea42 0103 	orr.w	r1, r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	0c1b      	lsrs	r3, r3, #16
 8003a06:	f003 0104 	and.w	r1, r3, #4
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	f003 0210 	and.w	r2, r3, #16
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69da      	ldr	r2, [r3, #28]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b08c      	sub	sp, #48	; 0x30
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	607a      	str	r2, [r7, #4]
 8003a4e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a50:	2301      	movs	r3, #1
 8003a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_SPI_TransmitReceive+0x26>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e18a      	b.n	8003d7e <HAL_SPI_TransmitReceive+0x33c>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a70:	f7fd fa64 	bl	8000f3c <HAL_GetTick>
 8003a74:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a86:	887b      	ldrh	r3, [r7, #2]
 8003a88:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d00f      	beq.n	8003ab2 <HAL_SPI_TransmitReceive+0x70>
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a98:	d107      	bne.n	8003aaa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d103      	bne.n	8003aaa <HAL_SPI_TransmitReceive+0x68>
 8003aa2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d003      	beq.n	8003ab2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003aaa:	2302      	movs	r3, #2
 8003aac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ab0:	e15b      	b.n	8003d6a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <HAL_SPI_TransmitReceive+0x82>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <HAL_SPI_TransmitReceive+0x82>
 8003abe:	887b      	ldrh	r3, [r7, #2]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d103      	bne.n	8003acc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003aca:	e14e      	b.n	8003d6a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d003      	beq.n	8003ae0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2205      	movs	r2, #5
 8003adc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	887a      	ldrh	r2, [r7, #2]
 8003af0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	887a      	ldrh	r2, [r7, #2]
 8003af6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	887a      	ldrh	r2, [r7, #2]
 8003b02:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	887a      	ldrh	r2, [r7, #2]
 8003b08:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b20:	2b40      	cmp	r3, #64	; 0x40
 8003b22:	d007      	beq.n	8003b34 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b3c:	d178      	bne.n	8003c30 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <HAL_SPI_TransmitReceive+0x10a>
 8003b46:	8b7b      	ldrh	r3, [r7, #26]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d166      	bne.n	8003c1a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b50:	881a      	ldrh	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5c:	1c9a      	adds	r2, r3, #2
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b70:	e053      	b.n	8003c1a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d11b      	bne.n	8003bb8 <HAL_SPI_TransmitReceive+0x176>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d016      	beq.n	8003bb8 <HAL_SPI_TransmitReceive+0x176>
 8003b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d113      	bne.n	8003bb8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b94:	881a      	ldrh	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba0:	1c9a      	adds	r2, r3, #2
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d119      	bne.n	8003bfa <HAL_SPI_TransmitReceive+0x1b8>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d014      	beq.n	8003bfa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bda:	b292      	uxth	r2, r2
 8003bdc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be2:	1c9a      	adds	r2, r3, #2
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bfa:	f7fd f99f 	bl	8000f3c <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d807      	bhi.n	8003c1a <HAL_SPI_TransmitReceive+0x1d8>
 8003c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c10:	d003      	beq.n	8003c1a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c18:	e0a7      	b.n	8003d6a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1a6      	bne.n	8003b72 <HAL_SPI_TransmitReceive+0x130>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1a1      	bne.n	8003b72 <HAL_SPI_TransmitReceive+0x130>
 8003c2e:	e07c      	b.n	8003d2a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <HAL_SPI_TransmitReceive+0x1fc>
 8003c38:	8b7b      	ldrh	r3, [r7, #26]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d16b      	bne.n	8003d16 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	330c      	adds	r3, #12
 8003c48:	7812      	ldrb	r2, [r2, #0]
 8003c4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c64:	e057      	b.n	8003d16 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d11c      	bne.n	8003cae <HAL_SPI_TransmitReceive+0x26c>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d017      	beq.n	8003cae <HAL_SPI_TransmitReceive+0x26c>
 8003c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d114      	bne.n	8003cae <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	330c      	adds	r3, #12
 8003c8e:	7812      	ldrb	r2, [r2, #0]
 8003c90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d119      	bne.n	8003cf0 <HAL_SPI_TransmitReceive+0x2ae>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d014      	beq.n	8003cf0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cec:	2301      	movs	r3, #1
 8003cee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cf0:	f7fd f924 	bl	8000f3c <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d803      	bhi.n	8003d08 <HAL_SPI_TransmitReceive+0x2c6>
 8003d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d06:	d102      	bne.n	8003d0e <HAL_SPI_TransmitReceive+0x2cc>
 8003d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d103      	bne.n	8003d16 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d14:	e029      	b.n	8003d6a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1a2      	bne.n	8003c66 <HAL_SPI_TransmitReceive+0x224>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d19d      	bne.n	8003c66 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 f8b2 	bl	8003e98 <SPI_EndRxTxTransaction>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d006      	beq.n	8003d48 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2220      	movs	r2, #32
 8003d44:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d46:	e010      	b.n	8003d6a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10b      	bne.n	8003d68 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d50:	2300      	movs	r3, #0
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	e000      	b.n	8003d6a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d68:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3730      	adds	r7, #48	; 0x30
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	603b      	str	r3, [r7, #0]
 8003d94:	4613      	mov	r3, r2
 8003d96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d98:	f7fd f8d0 	bl	8000f3c <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da0:	1a9b      	subs	r3, r3, r2
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	4413      	add	r3, r2
 8003da6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003da8:	f7fd f8c8 	bl	8000f3c <HAL_GetTick>
 8003dac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003dae:	4b39      	ldr	r3, [pc, #228]	; (8003e94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	015b      	lsls	r3, r3, #5
 8003db4:	0d1b      	lsrs	r3, r3, #20
 8003db6:	69fa      	ldr	r2, [r7, #28]
 8003db8:	fb02 f303 	mul.w	r3, r2, r3
 8003dbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dbe:	e054      	b.n	8003e6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc6:	d050      	beq.n	8003e6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dc8:	f7fd f8b8 	bl	8000f3c <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	69fa      	ldr	r2, [r7, #28]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d902      	bls.n	8003dde <SPI_WaitFlagStateUntilTimeout+0x56>
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d13d      	bne.n	8003e5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003df6:	d111      	bne.n	8003e1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e00:	d004      	beq.n	8003e0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e0a:	d107      	bne.n	8003e1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e24:	d10f      	bne.n	8003e46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e017      	b.n	8003e8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	4013      	ands	r3, r2
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	bf0c      	ite	eq
 8003e7a:	2301      	moveq	r3, #1
 8003e7c:	2300      	movne	r3, #0
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	461a      	mov	r2, r3
 8003e82:	79fb      	ldrb	r3, [r7, #7]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d19b      	bne.n	8003dc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3720      	adds	r7, #32
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20000164 	.word	0x20000164

08003e98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af02      	add	r7, sp, #8
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ea4:	4b1b      	ldr	r3, [pc, #108]	; (8003f14 <SPI_EndRxTxTransaction+0x7c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a1b      	ldr	r2, [pc, #108]	; (8003f18 <SPI_EndRxTxTransaction+0x80>)
 8003eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003eae:	0d5b      	lsrs	r3, r3, #21
 8003eb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003eb4:	fb02 f303 	mul.w	r3, r2, r3
 8003eb8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ec2:	d112      	bne.n	8003eea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	2180      	movs	r1, #128	; 0x80
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f7ff ff5a 	bl	8003d88 <SPI_WaitFlagStateUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d016      	beq.n	8003f08 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ede:	f043 0220 	orr.w	r2, r3, #32
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e00f      	b.n	8003f0a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00a      	beq.n	8003f06 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f00:	2b80      	cmp	r3, #128	; 0x80
 8003f02:	d0f2      	beq.n	8003eea <SPI_EndRxTxTransaction+0x52>
 8003f04:	e000      	b.n	8003f08 <SPI_EndRxTxTransaction+0x70>
        break;
 8003f06:	bf00      	nop
  }

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	20000164 	.word	0x20000164
 8003f18:	165e9f81 	.word	0x165e9f81

08003f1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e03f      	b.n	8003fae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d106      	bne.n	8003f48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7fc fe28 	bl	8000b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2224      	movs	r2, #36	; 0x24
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f829 	bl	8003fb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	691a      	ldr	r2, [r3, #16]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695a      	ldr	r2, [r3, #20]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
	...

08003fb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ff8:	f023 030c 	bic.w	r3, r3, #12
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6812      	ldr	r2, [r2, #0]
 8004000:	68b9      	ldr	r1, [r7, #8]
 8004002:	430b      	orrs	r3, r1
 8004004:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699a      	ldr	r2, [r3, #24]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a55      	ldr	r2, [pc, #340]	; (8004178 <UART_SetConfig+0x1c0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d103      	bne.n	800402e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004026:	f7ff fc0f 	bl	8003848 <HAL_RCC_GetPCLK2Freq>
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	e002      	b.n	8004034 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800402e:	f7ff fbf7 	bl	8003820 <HAL_RCC_GetPCLK1Freq>
 8004032:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800403c:	d14c      	bne.n	80040d8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4613      	mov	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	009a      	lsls	r2, r3, #2
 8004048:	441a      	add	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	fbb2 f3f3 	udiv	r3, r2, r3
 8004054:	4a49      	ldr	r2, [pc, #292]	; (800417c <UART_SetConfig+0x1c4>)
 8004056:	fba2 2303 	umull	r2, r3, r2, r3
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	0119      	lsls	r1, r3, #4
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	009a      	lsls	r2, r3, #2
 8004068:	441a      	add	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	fbb2 f2f3 	udiv	r2, r2, r3
 8004074:	4b41      	ldr	r3, [pc, #260]	; (800417c <UART_SetConfig+0x1c4>)
 8004076:	fba3 0302 	umull	r0, r3, r3, r2
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	2064      	movs	r0, #100	; 0x64
 800407e:	fb00 f303 	mul.w	r3, r0, r3
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	3332      	adds	r3, #50	; 0x32
 8004088:	4a3c      	ldr	r2, [pc, #240]	; (800417c <UART_SetConfig+0x1c4>)
 800408a:	fba2 2303 	umull	r2, r3, r2, r3
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004096:	4419      	add	r1, r3
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	009a      	lsls	r2, r3, #2
 80040a2:	441a      	add	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80040ae:	4b33      	ldr	r3, [pc, #204]	; (800417c <UART_SetConfig+0x1c4>)
 80040b0:	fba3 0302 	umull	r0, r3, r3, r2
 80040b4:	095b      	lsrs	r3, r3, #5
 80040b6:	2064      	movs	r0, #100	; 0x64
 80040b8:	fb00 f303 	mul.w	r3, r0, r3
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	3332      	adds	r3, #50	; 0x32
 80040c2:	4a2e      	ldr	r2, [pc, #184]	; (800417c <UART_SetConfig+0x1c4>)
 80040c4:	fba2 2303 	umull	r2, r3, r2, r3
 80040c8:	095b      	lsrs	r3, r3, #5
 80040ca:	f003 0207 	and.w	r2, r3, #7
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	440a      	add	r2, r1
 80040d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040d6:	e04a      	b.n	800416e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	4613      	mov	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	009a      	lsls	r2, r3, #2
 80040e2:	441a      	add	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ee:	4a23      	ldr	r2, [pc, #140]	; (800417c <UART_SetConfig+0x1c4>)
 80040f0:	fba2 2303 	umull	r2, r3, r2, r3
 80040f4:	095b      	lsrs	r3, r3, #5
 80040f6:	0119      	lsls	r1, r3, #4
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	4613      	mov	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	009a      	lsls	r2, r3, #2
 8004102:	441a      	add	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	fbb2 f2f3 	udiv	r2, r2, r3
 800410e:	4b1b      	ldr	r3, [pc, #108]	; (800417c <UART_SetConfig+0x1c4>)
 8004110:	fba3 0302 	umull	r0, r3, r3, r2
 8004114:	095b      	lsrs	r3, r3, #5
 8004116:	2064      	movs	r0, #100	; 0x64
 8004118:	fb00 f303 	mul.w	r3, r0, r3
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	3332      	adds	r3, #50	; 0x32
 8004122:	4a16      	ldr	r2, [pc, #88]	; (800417c <UART_SetConfig+0x1c4>)
 8004124:	fba2 2303 	umull	r2, r3, r2, r3
 8004128:	095b      	lsrs	r3, r3, #5
 800412a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800412e:	4419      	add	r1, r3
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4613      	mov	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	009a      	lsls	r2, r3, #2
 800413a:	441a      	add	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	fbb2 f2f3 	udiv	r2, r2, r3
 8004146:	4b0d      	ldr	r3, [pc, #52]	; (800417c <UART_SetConfig+0x1c4>)
 8004148:	fba3 0302 	umull	r0, r3, r3, r2
 800414c:	095b      	lsrs	r3, r3, #5
 800414e:	2064      	movs	r0, #100	; 0x64
 8004150:	fb00 f303 	mul.w	r3, r0, r3
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	3332      	adds	r3, #50	; 0x32
 800415a:	4a08      	ldr	r2, [pc, #32]	; (800417c <UART_SetConfig+0x1c4>)
 800415c:	fba2 2303 	umull	r2, r3, r2, r3
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	f003 020f 	and.w	r2, r3, #15
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	440a      	add	r2, r1
 800416c:	609a      	str	r2, [r3, #8]
}
 800416e:	bf00      	nop
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40013800 	.word	0x40013800
 800417c:	51eb851f 	.word	0x51eb851f

08004180 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004190:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004194:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	b29a      	uxth	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr

080041ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80041b4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80041b8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	43db      	mvns	r3, r3
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	4013      	ands	r3, r2
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr

080041e0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80041e0:	b084      	sub	sp, #16
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	f107 0014 	add.w	r0, r7, #20
 80041ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	b004      	add	sp, #16
 800421e:	4770      	bx	lr

08004220 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004220:	b480      	push	{r7}
 8004222:	b09b      	sub	sp, #108	; 0x6c
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	b29b      	uxth	r3, r3
 800423e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004246:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	78db      	ldrb	r3, [r3, #3]
 800424e:	2b03      	cmp	r3, #3
 8004250:	d81f      	bhi.n	8004292 <USB_ActivateEndpoint+0x72>
 8004252:	a201      	add	r2, pc, #4	; (adr r2, 8004258 <USB_ActivateEndpoint+0x38>)
 8004254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004258:	08004269 	.word	0x08004269
 800425c:	08004285 	.word	0x08004285
 8004260:	0800429b 	.word	0x0800429b
 8004264:	08004277 	.word	0x08004277
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004268:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800426c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004270:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004274:	e012      	b.n	800429c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004276:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800427a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800427e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004282:	e00b      	b.n	800429c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004284:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004288:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800428c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004290:	e004      	b.n	800429c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004298:	e000      	b.n	800429c <USB_ActivateEndpoint+0x7c>
      break;
 800429a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	441a      	add	r2, r3
 80042a6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80042aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	b29b      	uxth	r3, r3
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	441a      	add	r2, r3
 80042ec:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80042f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004300:	b29b      	uxth	r3, r3
 8004302:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	7b1b      	ldrb	r3, [r3, #12]
 8004308:	2b00      	cmp	r3, #0
 800430a:	f040 8149 	bne.w	80045a0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	785b      	ldrb	r3, [r3, #1]
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 8084 	beq.w	8004420 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004322:	b29b      	uxth	r3, r3
 8004324:	461a      	mov	r2, r3
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	4413      	add	r3, r2
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	011a      	lsls	r2, r3, #4
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	4413      	add	r3, r2
 8004336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800433a:	613b      	str	r3, [r7, #16]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	88db      	ldrh	r3, [r3, #6]
 8004340:	085b      	lsrs	r3, r3, #1
 8004342:	b29b      	uxth	r3, r3
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	81fb      	strh	r3, [r7, #14]
 800435a:	89fb      	ldrh	r3, [r7, #14]
 800435c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004360:	2b00      	cmp	r3, #0
 8004362:	d01b      	beq.n	800439c <USB_ActivateEndpoint+0x17c>
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	b29b      	uxth	r3, r3
 8004372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437a:	81bb      	strh	r3, [r7, #12]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	441a      	add	r2, r3
 8004386:	89bb      	ldrh	r3, [r7, #12]
 8004388:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800438c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004394:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004398:	b29b      	uxth	r3, r3
 800439a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	78db      	ldrb	r3, [r3, #3]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d020      	beq.n	80043e6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ba:	813b      	strh	r3, [r7, #8]
 80043bc:	893b      	ldrh	r3, [r7, #8]
 80043be:	f083 0320 	eor.w	r3, r3, #32
 80043c2:	813b      	strh	r3, [r7, #8]
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	441a      	add	r2, r3
 80043ce:	893b      	ldrh	r3, [r7, #8]
 80043d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	8013      	strh	r3, [r2, #0]
 80043e4:	e27f      	b.n	80048e6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4413      	add	r3, r2
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043fc:	817b      	strh	r3, [r7, #10]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	441a      	add	r2, r3
 8004408:	897b      	ldrh	r3, [r7, #10]
 800440a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800440e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800441a:	b29b      	uxth	r3, r3
 800441c:	8013      	strh	r3, [r2, #0]
 800441e:	e262      	b.n	80048e6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800442a:	b29b      	uxth	r3, r3
 800442c:	461a      	mov	r2, r3
 800442e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004430:	4413      	add	r3, r2
 8004432:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	011a      	lsls	r2, r3, #4
 800443a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443c:	4413      	add	r3, r2
 800443e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004442:	62bb      	str	r3, [r7, #40]	; 0x28
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	88db      	ldrh	r3, [r3, #6]
 8004448:	085b      	lsrs	r3, r3, #1
 800444a:	b29b      	uxth	r3, r3
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	b29a      	uxth	r2, r3
 8004450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004452:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	627b      	str	r3, [r7, #36]	; 0x24
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800445e:	b29b      	uxth	r3, r3
 8004460:	461a      	mov	r2, r3
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	4413      	add	r3, r2
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	011a      	lsls	r2, r3, #4
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	4413      	add	r3, r2
 8004472:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004476:	623b      	str	r3, [r7, #32]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d112      	bne.n	80044a6 <USB_ActivateEndpoint+0x286>
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	b29b      	uxth	r3, r3
 8004486:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800448a:	b29a      	uxth	r2, r3
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	801a      	strh	r2, [r3, #0]
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	b29b      	uxth	r3, r3
 8004496:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800449a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800449e:	b29a      	uxth	r2, r3
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	801a      	strh	r2, [r3, #0]
 80044a4:	e02f      	b.n	8004506 <USB_ActivateEndpoint+0x2e6>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2b3e      	cmp	r3, #62	; 0x3e
 80044ac:	d813      	bhi.n	80044d6 <USB_ActivateEndpoint+0x2b6>
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	085b      	lsrs	r3, r3, #1
 80044b4:	663b      	str	r3, [r7, #96]	; 0x60
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <USB_ActivateEndpoint+0x2a8>
 80044c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044c4:	3301      	adds	r3, #1
 80044c6:	663b      	str	r3, [r7, #96]	; 0x60
 80044c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	029b      	lsls	r3, r3, #10
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	801a      	strh	r2, [r3, #0]
 80044d4:	e017      	b.n	8004506 <USB_ActivateEndpoint+0x2e6>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	663b      	str	r3, [r7, #96]	; 0x60
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f003 031f 	and.w	r3, r3, #31
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d102      	bne.n	80044f0 <USB_ActivateEndpoint+0x2d0>
 80044ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044ec:	3b01      	subs	r3, #1
 80044ee:	663b      	str	r3, [r7, #96]	; 0x60
 80044f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	029b      	lsls	r3, r3, #10
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004500:	b29a      	uxth	r2, r3
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4413      	add	r3, r2
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	83fb      	strh	r3, [r7, #30]
 8004514:	8bfb      	ldrh	r3, [r7, #30]
 8004516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d01b      	beq.n	8004556 <USB_ActivateEndpoint+0x336>
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	b29b      	uxth	r3, r3
 800452c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004534:	83bb      	strh	r3, [r7, #28]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	441a      	add	r2, r3
 8004540:	8bbb      	ldrh	r3, [r7, #28]
 8004542:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004546:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800454a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800454e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004552:	b29b      	uxth	r3, r3
 8004554:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	b29b      	uxth	r3, r3
 8004564:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456c:	837b      	strh	r3, [r7, #26]
 800456e:	8b7b      	ldrh	r3, [r7, #26]
 8004570:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004574:	837b      	strh	r3, [r7, #26]
 8004576:	8b7b      	ldrh	r3, [r7, #26]
 8004578:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800457c:	837b      	strh	r3, [r7, #26]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	441a      	add	r2, r3
 8004588:	8b7b      	ldrh	r3, [r7, #26]
 800458a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800458e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800459a:	b29b      	uxth	r3, r3
 800459c:	8013      	strh	r3, [r2, #0]
 800459e:	e1a2      	b.n	80048e6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	441a      	add	r2, r3
 80045c4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80045c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045d0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80045d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d8:	b29b      	uxth	r3, r3
 80045da:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	65bb      	str	r3, [r7, #88]	; 0x58
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	461a      	mov	r2, r3
 80045ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045ec:	4413      	add	r3, r2
 80045ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	011a      	lsls	r2, r3, #4
 80045f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	891b      	ldrh	r3, [r3, #8]
 8004604:	085b      	lsrs	r3, r3, #1
 8004606:	b29b      	uxth	r3, r3
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800460e:	801a      	strh	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	653b      	str	r3, [r7, #80]	; 0x50
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800461a:	b29b      	uxth	r3, r3
 800461c:	461a      	mov	r2, r3
 800461e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004620:	4413      	add	r3, r2
 8004622:	653b      	str	r3, [r7, #80]	; 0x50
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	011a      	lsls	r2, r3, #4
 800462a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800462c:	4413      	add	r3, r2
 800462e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	895b      	ldrh	r3, [r3, #10]
 8004638:	085b      	lsrs	r3, r3, #1
 800463a:	b29b      	uxth	r3, r3
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004642:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	785b      	ldrb	r3, [r3, #1]
 8004648:	2b00      	cmp	r3, #0
 800464a:	f040 8091 	bne.w	8004770 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800465c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800465e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d01b      	beq.n	800469e <USB_ActivateEndpoint+0x47e>
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	b29b      	uxth	r3, r3
 8004674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	441a      	add	r2, r3
 8004688:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800468a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800468e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004692:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469a:	b29b      	uxth	r3, r3
 800469c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	873b      	strh	r3, [r7, #56]	; 0x38
 80046ac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80046ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d01b      	beq.n	80046ee <USB_ActivateEndpoint+0x4ce>
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046cc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	441a      	add	r2, r3
 80046d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80046da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004704:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004706:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004708:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800470c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800470e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004710:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004714:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	441a      	add	r2, r3
 8004720:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004722:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004726:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800472a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800472e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004732:	b29b      	uxth	r3, r3
 8004734:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	b29b      	uxth	r3, r3
 8004744:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004748:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800474c:	867b      	strh	r3, [r7, #50]	; 0x32
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	441a      	add	r2, r3
 8004758:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800475a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800475e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800476a:	b29b      	uxth	r3, r3
 800476c:	8013      	strh	r3, [r2, #0]
 800476e:	e0ba      	b.n	80048e6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004780:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d01d      	beq.n	80047c8 <USB_ActivateEndpoint+0x5a8>
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	b29b      	uxth	r3, r3
 800479a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800479e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	441a      	add	r2, r3
 80047b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80047b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80047d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80047dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01d      	beq.n	8004820 <USB_ActivateEndpoint+0x600>
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	881b      	ldrh	r3, [r3, #0]
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	441a      	add	r2, r3
 8004808:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800480c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004810:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004818:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800481c:	b29b      	uxth	r3, r3
 800481e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	78db      	ldrb	r3, [r3, #3]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d024      	beq.n	8004872 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	b29b      	uxth	r3, r3
 8004836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800483a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800483e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004842:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004846:	f083 0320 	eor.w	r3, r3, #32
 800484a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	441a      	add	r2, r3
 8004858:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800485c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004860:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800486c:	b29b      	uxth	r3, r3
 800486e:	8013      	strh	r3, [r2, #0]
 8004870:	e01d      	b.n	80048ae <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	b29b      	uxth	r3, r3
 8004880:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004888:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	441a      	add	r2, r3
 8004896:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800489a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800489e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	441a      	add	r2, r3
 80048d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80048d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80048e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	376c      	adds	r7, #108	; 0x6c
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr

080048f4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b08d      	sub	sp, #52	; 0x34
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	7b1b      	ldrb	r3, [r3, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	f040 808e 	bne.w	8004a24 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	785b      	ldrb	r3, [r3, #1]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d044      	beq.n	800499a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	81bb      	strh	r3, [r7, #12]
 800491e:	89bb      	ldrh	r3, [r7, #12]
 8004920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004924:	2b00      	cmp	r3, #0
 8004926:	d01b      	beq.n	8004960 <USB_DeactivateEndpoint+0x6c>
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	881b      	ldrh	r3, [r3, #0]
 8004934:	b29b      	uxth	r3, r3
 8004936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800493a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493e:	817b      	strh	r3, [r7, #10]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	441a      	add	r2, r3
 800494a:	897b      	ldrh	r3, [r7, #10]
 800494c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004950:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004958:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800495c:	b29b      	uxth	r3, r3
 800495e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	b29b      	uxth	r3, r3
 800496e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004976:	813b      	strh	r3, [r7, #8]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	441a      	add	r2, r3
 8004982:	893b      	ldrh	r3, [r7, #8]
 8004984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800498c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004994:	b29b      	uxth	r3, r3
 8004996:	8013      	strh	r3, [r2, #0]
 8004998:	e192      	b.n	8004cc0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	827b      	strh	r3, [r7, #18]
 80049a8:	8a7b      	ldrh	r3, [r7, #18]
 80049aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d01b      	beq.n	80049ea <USB_DeactivateEndpoint+0xf6>
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	b29b      	uxth	r3, r3
 80049c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c8:	823b      	strh	r3, [r7, #16]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	441a      	add	r2, r3
 80049d4:	8a3b      	ldrh	r3, [r7, #16]
 80049d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a00:	81fb      	strh	r3, [r7, #14]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	441a      	add	r2, r3
 8004a0c:	89fb      	ldrh	r3, [r7, #14]
 8004a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	8013      	strh	r3, [r2, #0]
 8004a22:	e14d      	b.n	8004cc0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	785b      	ldrb	r3, [r3, #1]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f040 80a5 	bne.w	8004b78 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	881b      	ldrh	r3, [r3, #0]
 8004a3a:	843b      	strh	r3, [r7, #32]
 8004a3c:	8c3b      	ldrh	r3, [r7, #32]
 8004a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d01b      	beq.n	8004a7e <USB_DeactivateEndpoint+0x18a>
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5c:	83fb      	strh	r3, [r7, #30]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	441a      	add	r2, r3
 8004a68:	8bfb      	ldrh	r3, [r7, #30]
 8004a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	83bb      	strh	r3, [r7, #28]
 8004a8c:	8bbb      	ldrh	r3, [r7, #28]
 8004a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d01b      	beq.n	8004ace <USB_DeactivateEndpoint+0x1da>
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aac:	837b      	strh	r3, [r7, #26]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	441a      	add	r2, r3
 8004ab8:	8b7b      	ldrh	r3, [r7, #26]
 8004aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ac6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae4:	833b      	strh	r3, [r7, #24]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	441a      	add	r2, r3
 8004af0:	8b3b      	ldrh	r3, [r7, #24]
 8004af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004afe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1c:	82fb      	strh	r3, [r7, #22]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	441a      	add	r2, r3
 8004b28:	8afb      	ldrh	r3, [r7, #22]
 8004b2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b54:	82bb      	strh	r3, [r7, #20]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	441a      	add	r2, r3
 8004b60:	8abb      	ldrh	r3, [r7, #20]
 8004b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	8013      	strh	r3, [r2, #0]
 8004b76:	e0a3      	b.n	8004cc0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d01b      	beq.n	8004bc8 <USB_DeactivateEndpoint+0x2d4>
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	441a      	add	r2, r3
 8004bb2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004bb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004bd6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01b      	beq.n	8004c18 <USB_DeactivateEndpoint+0x324>
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf6:	853b      	strh	r3, [r7, #40]	; 0x28
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	441a      	add	r2, r3
 8004c02:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	441a      	add	r2, r3
 8004c3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	881b      	ldrh	r3, [r3, #0]
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c66:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	441a      	add	r2, r3
 8004c72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	441a      	add	r2, r3
 8004caa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004cac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3734      	adds	r7, #52	; 0x34
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bc80      	pop	{r7}
 8004cca:	4770      	bx	lr

08004ccc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b0cc      	sub	sp, #304	; 0x130
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004cda:	6018      	str	r0, [r3, #0]
 8004cdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ce0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ce4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ce6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	785b      	ldrb	r3, [r3, #1]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	f041 817d 	bne.w	8005ff2 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004cf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	699a      	ldr	r2, [r3, #24]
 8004d04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d908      	bls.n	8004d26 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004d14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004d24:	e007      	b.n	8004d36 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	7b1b      	ldrb	r3, [r3, #12]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d152      	bne.n	8004dec <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004d46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6959      	ldr	r1, [r3, #20]
 8004d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	88da      	ldrh	r2, [r3, #6]
 8004d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004d68:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004d6c:	6800      	ldr	r0, [r0, #0]
 8004d6e:	f001 ff0e 	bl	8006b8e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d76:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004d7a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004d7e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004d82:	6812      	ldr	r2, [r2, #0]
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	4619      	mov	r1, r3
 8004d98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d9c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004da0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004da4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004da8:	6812      	ldr	r2, [r2, #0]
 8004daa:	440a      	add	r2, r1
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	011a      	lsls	r2, r3, #4
 8004dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004dcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dd0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004de0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	801a      	strh	r2, [r3, #0]
 8004de8:	f001 b8b5 	b.w	8005f56 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004dec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	78db      	ldrb	r3, [r3, #3]
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	f040 84c6 	bne.w	800578a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004dfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6a1a      	ldr	r2, [r3, #32]
 8004e0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	f240 8443 	bls.w	80056a2 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004e1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e42:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	441a      	add	r2, r3
 8004e60:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004e64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e6c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004e78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6a1a      	ldr	r2, [r3, #32]
 8004e84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e88:	1ad2      	subs	r2, r2, r3
 8004e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 823e 	beq.w	800533a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ec2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004ec6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004eca:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004ece:	6812      	ldr	r2, [r2, #0]
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ed6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	785b      	ldrb	r3, [r3, #1]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f040 809a 	bne.w	8005018 <USB_EPStartXfer+0x34c>
 8004ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ee8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004ef0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004ef4:	6812      	ldr	r2, [r2, #0]
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004efc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	4619      	mov	r1, r3
 8004f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f12:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f16:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004f1a:	6812      	ldr	r2, [r2, #0]
 8004f1c:	440a      	add	r2, r1
 8004f1e:	601a      	str	r2, [r3, #0]
 8004f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	011a      	lsls	r2, r3, #4
 8004f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d122      	bne.n	8004f96 <USB_EPStartXfer+0x2ca>
 8004f50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f54:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	881b      	ldrh	r3, [r3, #0]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f68:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	801a      	strh	r2, [r3, #0]
 8004f70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f74:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f8c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	801a      	strh	r2, [r3, #0]
 8004f94:	e079      	b.n	800508a <USB_EPStartXfer+0x3be>
 8004f96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f9a:	2b3e      	cmp	r3, #62	; 0x3e
 8004f9c:	d81b      	bhi.n	8004fd6 <USB_EPStartXfer+0x30a>
 8004f9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fa2:	085b      	lsrs	r3, r3, #1
 8004fa4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004fa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d004      	beq.n	8004fbe <USB_EPStartXfer+0x2f2>
 8004fb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004fb8:	3301      	adds	r3, #1
 8004fba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004fbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	029b      	lsls	r3, r3, #10
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fcc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	801a      	strh	r2, [r3, #0]
 8004fd4:	e059      	b.n	800508a <USB_EPStartXfer+0x3be>
 8004fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004fe0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fe4:	f003 031f 	and.w	r3, r3, #31
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d104      	bne.n	8004ff6 <USB_EPStartXfer+0x32a>
 8004fec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004ff6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	029b      	lsls	r3, r3, #10
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005008:	b29a      	uxth	r2, r3
 800500a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800500e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	801a      	strh	r2, [r3, #0]
 8005016:	e038      	b.n	800508a <USB_EPStartXfer+0x3be>
 8005018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800501c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	785b      	ldrb	r3, [r3, #1]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d130      	bne.n	800508a <USB_EPStartXfer+0x3be>
 8005028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800502c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005036:	b29b      	uxth	r3, r3
 8005038:	4619      	mov	r1, r3
 800503a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800503e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005042:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005046:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800504a:	6812      	ldr	r2, [r2, #0]
 800504c:	440a      	add	r2, r1
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005054:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	011a      	lsls	r2, r3, #4
 800505e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005062:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4413      	add	r3, r2
 800506a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800506e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005072:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800507c:	b29a      	uxth	r2, r3
 800507e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005082:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800508a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800508e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	895b      	ldrh	r3, [r3, #10]
 8005096:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800509a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800509e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6959      	ldr	r1, [r3, #20]
 80050a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80050b0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80050b4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80050b8:	6800      	ldr	r0, [r0, #0]
 80050ba:	f001 fd68 	bl	8006b8e <USB_WritePMA>
            ep->xfer_buff += len;
 80050be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	695a      	ldr	r2, [r3, #20]
 80050ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ce:	441a      	add	r2, r3
 80050d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80050dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6a1a      	ldr	r2, [r3, #32]
 80050e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d90f      	bls.n	8005118 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80050f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6a1a      	ldr	r2, [r3, #32]
 8005104:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005108:	1ad2      	subs	r2, r2, r3
 800510a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800510e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	621a      	str	r2, [r3, #32]
 8005116:	e00e      	b.n	8005136 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800511c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005128:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800512c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2200      	movs	r2, #0
 8005134:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800513a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	785b      	ldrb	r3, [r3, #1]
 8005142:	2b00      	cmp	r3, #0
 8005144:	f040 809a 	bne.w	800527c <USB_EPStartXfer+0x5b0>
 8005148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800514c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005150:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005154:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005158:	6812      	ldr	r2, [r2, #0]
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005160:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800516a:	b29b      	uxth	r3, r3
 800516c:	4619      	mov	r1, r3
 800516e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005172:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005176:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800517a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800517e:	6812      	ldr	r2, [r2, #0]
 8005180:	440a      	add	r2, r1
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005188:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	011a      	lsls	r2, r3, #4
 8005192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005196:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4413      	add	r3, r2
 800519e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80051a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d122      	bne.n	80051fa <USB_EPStartXfer+0x52e>
 80051b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	801a      	strh	r2, [r3, #0]
 80051d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	801a      	strh	r2, [r3, #0]
 80051f8:	e083      	b.n	8005302 <USB_EPStartXfer+0x636>
 80051fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051fe:	2b3e      	cmp	r3, #62	; 0x3e
 8005200:	d81b      	bhi.n	800523a <USB_EPStartXfer+0x56e>
 8005202:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005206:	085b      	lsrs	r3, r3, #1
 8005208:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800520c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	2b00      	cmp	r3, #0
 8005216:	d004      	beq.n	8005222 <USB_EPStartXfer+0x556>
 8005218:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800521c:	3301      	adds	r3, #1
 800521e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005222:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005226:	b29b      	uxth	r3, r3
 8005228:	029b      	lsls	r3, r3, #10
 800522a:	b29a      	uxth	r2, r3
 800522c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005230:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	801a      	strh	r2, [r3, #0]
 8005238:	e063      	b.n	8005302 <USB_EPStartXfer+0x636>
 800523a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800523e:	095b      	lsrs	r3, r3, #5
 8005240:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005244:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005248:	f003 031f 	and.w	r3, r3, #31
 800524c:	2b00      	cmp	r3, #0
 800524e:	d104      	bne.n	800525a <USB_EPStartXfer+0x58e>
 8005250:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005254:	3b01      	subs	r3, #1
 8005256:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800525a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800525e:	b29b      	uxth	r3, r3
 8005260:	029b      	lsls	r3, r3, #10
 8005262:	b29b      	uxth	r3, r3
 8005264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800526c:	b29a      	uxth	r2, r3
 800526e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005272:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	801a      	strh	r2, [r3, #0]
 800527a:	e042      	b.n	8005302 <USB_EPStartXfer+0x636>
 800527c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005280:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	785b      	ldrb	r3, [r3, #1]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d13a      	bne.n	8005302 <USB_EPStartXfer+0x636>
 800528c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005290:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005294:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005298:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800529c:	6812      	ldr	r2, [r2, #0]
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	4619      	mov	r1, r3
 80052b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052b6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80052ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80052be:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80052c2:	6812      	ldr	r2, [r2, #0]
 80052c4:	440a      	add	r2, r1
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	011a      	lsls	r2, r3, #4
 80052d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052da:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4413      	add	r3, r2
 80052e2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80052e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052fa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005306:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	891b      	ldrh	r3, [r3, #8]
 800530e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005316:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6959      	ldr	r1, [r3, #20]
 800531e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005322:	b29b      	uxth	r3, r3
 8005324:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005328:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800532c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005330:	6800      	ldr	r0, [r0, #0]
 8005332:	f001 fc2c 	bl	8006b8e <USB_WritePMA>
 8005336:	f000 be0e 	b.w	8005f56 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800533a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800533e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	785b      	ldrb	r3, [r3, #1]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d16d      	bne.n	8005426 <USB_EPStartXfer+0x75a>
 800534a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800534e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	64bb      	str	r3, [r7, #72]	; 0x48
 8005356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800535a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005364:	b29b      	uxth	r3, r3
 8005366:	461a      	mov	r2, r3
 8005368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800536a:	4413      	add	r3, r2
 800536c:	64bb      	str	r3, [r7, #72]	; 0x48
 800536e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005372:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	011a      	lsls	r2, r3, #4
 800537c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800537e:	4413      	add	r3, r2
 8005380:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005384:	647b      	str	r3, [r7, #68]	; 0x44
 8005386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800538a:	2b00      	cmp	r3, #0
 800538c:	d112      	bne.n	80053b4 <USB_EPStartXfer+0x6e8>
 800538e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005390:	881b      	ldrh	r3, [r3, #0]
 8005392:	b29b      	uxth	r3, r3
 8005394:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005398:	b29a      	uxth	r2, r3
 800539a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800539c:	801a      	strh	r2, [r3, #0]
 800539e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053b0:	801a      	strh	r2, [r3, #0]
 80053b2:	e063      	b.n	800547c <USB_EPStartXfer+0x7b0>
 80053b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053b8:	2b3e      	cmp	r3, #62	; 0x3e
 80053ba:	d817      	bhi.n	80053ec <USB_EPStartXfer+0x720>
 80053bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053c0:	085b      	lsrs	r3, r3, #1
 80053c2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80053c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d004      	beq.n	80053dc <USB_EPStartXfer+0x710>
 80053d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80053d6:	3301      	adds	r3, #1
 80053d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80053dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	029b      	lsls	r3, r3, #10
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053e8:	801a      	strh	r2, [r3, #0]
 80053ea:	e047      	b.n	800547c <USB_EPStartXfer+0x7b0>
 80053ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053f0:	095b      	lsrs	r3, r3, #5
 80053f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80053f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053fa:	f003 031f 	and.w	r3, r3, #31
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d104      	bne.n	800540c <USB_EPStartXfer+0x740>
 8005402:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005406:	3b01      	subs	r3, #1
 8005408:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800540c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005410:	b29b      	uxth	r3, r3
 8005412:	029b      	lsls	r3, r3, #10
 8005414:	b29b      	uxth	r3, r3
 8005416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800541a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800541e:	b29a      	uxth	r2, r3
 8005420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005422:	801a      	strh	r2, [r3, #0]
 8005424:	e02a      	b.n	800547c <USB_EPStartXfer+0x7b0>
 8005426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800542a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	785b      	ldrb	r3, [r3, #1]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d122      	bne.n	800547c <USB_EPStartXfer+0x7b0>
 8005436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800543a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	653b      	str	r3, [r7, #80]	; 0x50
 8005442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005446:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005450:	b29b      	uxth	r3, r3
 8005452:	461a      	mov	r2, r3
 8005454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005456:	4413      	add	r3, r2
 8005458:	653b      	str	r3, [r7, #80]	; 0x50
 800545a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800545e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	011a      	lsls	r2, r3, #4
 8005468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800546a:	4413      	add	r3, r2
 800546c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005470:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005472:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005476:	b29a      	uxth	r2, r3
 8005478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800547a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800547c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005480:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	891b      	ldrh	r3, [r3, #8]
 8005488:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800548c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005490:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6959      	ldr	r1, [r3, #20]
 8005498:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800549c:	b29b      	uxth	r3, r3
 800549e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80054a2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80054a6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80054aa:	6800      	ldr	r0, [r0, #0]
 80054ac:	f001 fb6f 	bl	8006b8e <USB_WritePMA>
            ep->xfer_buff += len;
 80054b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	695a      	ldr	r2, [r3, #20]
 80054bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054c0:	441a      	add	r2, r3
 80054c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80054ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6a1a      	ldr	r2, [r3, #32]
 80054da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d90f      	bls.n	800550a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80054ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6a1a      	ldr	r2, [r3, #32]
 80054f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054fa:	1ad2      	subs	r2, r2, r3
 80054fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005500:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	621a      	str	r2, [r3, #32]
 8005508:	e00e      	b.n	8005528 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800550a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800550e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800551a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800551e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2200      	movs	r2, #0
 8005526:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800552c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	643b      	str	r3, [r7, #64]	; 0x40
 8005534:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005538:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	785b      	ldrb	r3, [r3, #1]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d16d      	bne.n	8005620 <USB_EPStartXfer+0x954>
 8005544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005548:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005550:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005554:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800555e:	b29b      	uxth	r3, r3
 8005560:	461a      	mov	r2, r3
 8005562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005564:	4413      	add	r3, r2
 8005566:	63bb      	str	r3, [r7, #56]	; 0x38
 8005568:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800556c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	011a      	lsls	r2, r3, #4
 8005576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005578:	4413      	add	r3, r2
 800557a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800557e:	637b      	str	r3, [r7, #52]	; 0x34
 8005580:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005584:	2b00      	cmp	r3, #0
 8005586:	d112      	bne.n	80055ae <USB_EPStartXfer+0x8e2>
 8005588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	b29b      	uxth	r3, r3
 800558e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005592:	b29a      	uxth	r2, r3
 8005594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005596:	801a      	strh	r2, [r3, #0]
 8005598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	b29b      	uxth	r3, r3
 800559e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055aa:	801a      	strh	r2, [r3, #0]
 80055ac:	e05d      	b.n	800566a <USB_EPStartXfer+0x99e>
 80055ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055b2:	2b3e      	cmp	r3, #62	; 0x3e
 80055b4:	d817      	bhi.n	80055e6 <USB_EPStartXfer+0x91a>
 80055b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ba:	085b      	lsrs	r3, r3, #1
 80055bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80055c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d004      	beq.n	80055d6 <USB_EPStartXfer+0x90a>
 80055cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055d0:	3301      	adds	r3, #1
 80055d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80055d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055da:	b29b      	uxth	r3, r3
 80055dc:	029b      	lsls	r3, r3, #10
 80055de:	b29a      	uxth	r2, r3
 80055e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e2:	801a      	strh	r2, [r3, #0]
 80055e4:	e041      	b.n	800566a <USB_EPStartXfer+0x99e>
 80055e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ea:	095b      	lsrs	r3, r3, #5
 80055ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80055f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055f4:	f003 031f 	and.w	r3, r3, #31
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d104      	bne.n	8005606 <USB_EPStartXfer+0x93a>
 80055fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005600:	3b01      	subs	r3, #1
 8005602:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005606:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800560a:	b29b      	uxth	r3, r3
 800560c:	029b      	lsls	r3, r3, #10
 800560e:	b29b      	uxth	r3, r3
 8005610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005618:	b29a      	uxth	r2, r3
 800561a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561c:	801a      	strh	r2, [r3, #0]
 800561e:	e024      	b.n	800566a <USB_EPStartXfer+0x99e>
 8005620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005624:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	785b      	ldrb	r3, [r3, #1]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d11c      	bne.n	800566a <USB_EPStartXfer+0x99e>
 8005630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005634:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800563e:	b29b      	uxth	r3, r3
 8005640:	461a      	mov	r2, r3
 8005642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005644:	4413      	add	r3, r2
 8005646:	643b      	str	r3, [r7, #64]	; 0x40
 8005648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800564c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	011a      	lsls	r2, r3, #4
 8005656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005658:	4413      	add	r3, r2
 800565a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800565e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005660:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005664:	b29a      	uxth	r2, r3
 8005666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005668:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800566a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800566e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	895b      	ldrh	r3, [r3, #10]
 8005676:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800567a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800567e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6959      	ldr	r1, [r3, #20]
 8005686:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800568a:	b29b      	uxth	r3, r3
 800568c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005690:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005694:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005698:	6800      	ldr	r0, [r0, #0]
 800569a:	f001 fa78 	bl	8006b8e <USB_WritePMA>
 800569e:	f000 bc5a 	b.w	8005f56 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80056a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80056b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80056d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80056dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	441a      	add	r2, r3
 80056f6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80056fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800570a:	b29b      	uxth	r3, r3
 800570c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800570e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005712:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	65fb      	str	r3, [r7, #92]	; 0x5c
 800571a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800571e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005728:	b29b      	uxth	r3, r3
 800572a:	461a      	mov	r2, r3
 800572c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800572e:	4413      	add	r3, r2
 8005730:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005736:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	011a      	lsls	r2, r3, #4
 8005740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005742:	4413      	add	r3, r2
 8005744:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005748:	65bb      	str	r3, [r7, #88]	; 0x58
 800574a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800574e:	b29a      	uxth	r2, r3
 8005750:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005752:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005758:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	891b      	ldrh	r3, [r3, #8]
 8005760:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005768:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6959      	ldr	r1, [r3, #20]
 8005770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005774:	b29b      	uxth	r3, r3
 8005776:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800577a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800577e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005782:	6800      	ldr	r0, [r0, #0]
 8005784:	f001 fa03 	bl	8006b8e <USB_WritePMA>
 8005788:	e3e5      	b.n	8005f56 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800578a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800578e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005798:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80057b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	441a      	add	r2, r3
 80057ce:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80057d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057da:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80057de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80057e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6a1a      	ldr	r2, [r3, #32]
 80057f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057f6:	1ad2      	subs	r2, r2, r3
 80057f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005804:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005808:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005812:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	881b      	ldrh	r3, [r3, #0]
 8005820:	b29b      	uxth	r3, r3
 8005822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 81bc 	beq.w	8005ba4 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800582c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005830:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800583a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800583e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	785b      	ldrb	r3, [r3, #1]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d16d      	bne.n	8005926 <USB_EPStartXfer+0xc5a>
 800584a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800584e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	67bb      	str	r3, [r7, #120]	; 0x78
 8005856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800585a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005864:	b29b      	uxth	r3, r3
 8005866:	461a      	mov	r2, r3
 8005868:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800586a:	4413      	add	r3, r2
 800586c:	67bb      	str	r3, [r7, #120]	; 0x78
 800586e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005872:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	011a      	lsls	r2, r3, #4
 800587c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800587e:	4413      	add	r3, r2
 8005880:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005884:	677b      	str	r3, [r7, #116]	; 0x74
 8005886:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800588a:	2b00      	cmp	r3, #0
 800588c:	d112      	bne.n	80058b4 <USB_EPStartXfer+0xbe8>
 800588e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	b29b      	uxth	r3, r3
 8005894:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005898:	b29a      	uxth	r2, r3
 800589a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800589c:	801a      	strh	r2, [r3, #0]
 800589e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058b0:	801a      	strh	r2, [r3, #0]
 80058b2:	e060      	b.n	8005976 <USB_EPStartXfer+0xcaa>
 80058b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058b8:	2b3e      	cmp	r3, #62	; 0x3e
 80058ba:	d817      	bhi.n	80058ec <USB_EPStartXfer+0xc20>
 80058bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058c0:	085b      	lsrs	r3, r3, #1
 80058c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80058c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d004      	beq.n	80058dc <USB_EPStartXfer+0xc10>
 80058d2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80058d6:	3301      	adds	r3, #1
 80058d8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80058dc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	029b      	lsls	r3, r3, #10
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058e8:	801a      	strh	r2, [r3, #0]
 80058ea:	e044      	b.n	8005976 <USB_EPStartXfer+0xcaa>
 80058ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058f0:	095b      	lsrs	r3, r3, #5
 80058f2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80058f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058fa:	f003 031f 	and.w	r3, r3, #31
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d104      	bne.n	800590c <USB_EPStartXfer+0xc40>
 8005902:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005906:	3b01      	subs	r3, #1
 8005908:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800590c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005910:	b29b      	uxth	r3, r3
 8005912:	029b      	lsls	r3, r3, #10
 8005914:	b29b      	uxth	r3, r3
 8005916:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800591a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800591e:	b29a      	uxth	r2, r3
 8005920:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005922:	801a      	strh	r2, [r3, #0]
 8005924:	e027      	b.n	8005976 <USB_EPStartXfer+0xcaa>
 8005926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800592a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	785b      	ldrb	r3, [r3, #1]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d11f      	bne.n	8005976 <USB_EPStartXfer+0xcaa>
 8005936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800593a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005944:	b29b      	uxth	r3, r3
 8005946:	461a      	mov	r2, r3
 8005948:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800594c:	4413      	add	r3, r2
 800594e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005956:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	011a      	lsls	r2, r3, #4
 8005960:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005964:	4413      	add	r3, r2
 8005966:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800596a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800596c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005970:	b29a      	uxth	r2, r3
 8005972:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005974:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800597a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	895b      	ldrh	r3, [r3, #10]
 8005982:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6959      	ldr	r1, [r3, #20]
 8005992:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005996:	b29b      	uxth	r3, r3
 8005998:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800599c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80059a0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80059a4:	6800      	ldr	r0, [r0, #0]
 80059a6:	f001 f8f2 	bl	8006b8e <USB_WritePMA>
          ep->xfer_buff += len;
 80059aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695a      	ldr	r2, [r3, #20]
 80059b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ba:	441a      	add	r2, r3
 80059bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80059c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6a1a      	ldr	r2, [r3, #32]
 80059d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d90f      	bls.n	8005a04 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80059e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6a1a      	ldr	r2, [r3, #32]
 80059f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f4:	1ad2      	subs	r2, r2, r3
 80059f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	621a      	str	r2, [r3, #32]
 8005a02:	e00e      	b.n	8005a22 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005a04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005a14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005a22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 8295 	beq.w	8005f56 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	785b      	ldrb	r3, [r3, #1]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d16d      	bne.n	8005b18 <USB_EPStartXfer+0xe4c>
 8005a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	461a      	mov	r2, r3
 8005a5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a5c:	4413      	add	r3, r2
 8005a5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	011a      	lsls	r2, r3, #4
 8005a6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a70:	4413      	add	r3, r2
 8005a72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a76:	667b      	str	r3, [r7, #100]	; 0x64
 8005a78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d112      	bne.n	8005aa6 <USB_EPStartXfer+0xdda>
 8005a80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a8e:	801a      	strh	r2, [r3, #0]
 8005a90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a92:	881b      	ldrh	r3, [r3, #0]
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005aa2:	801a      	strh	r2, [r3, #0]
 8005aa4:	e063      	b.n	8005b6e <USB_EPStartXfer+0xea2>
 8005aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aaa:	2b3e      	cmp	r3, #62	; 0x3e
 8005aac:	d817      	bhi.n	8005ade <USB_EPStartXfer+0xe12>
 8005aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab2:	085b      	lsrs	r3, r3, #1
 8005ab4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005ab8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d004      	beq.n	8005ace <USB_EPStartXfer+0xe02>
 8005ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ac8:	3301      	adds	r3, #1
 8005aca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	029b      	lsls	r3, r3, #10
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ada:	801a      	strh	r2, [r3, #0]
 8005adc:	e047      	b.n	8005b6e <USB_EPStartXfer+0xea2>
 8005ade:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ae2:	095b      	lsrs	r3, r3, #5
 8005ae4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005ae8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aec:	f003 031f 	and.w	r3, r3, #31
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d104      	bne.n	8005afe <USB_EPStartXfer+0xe32>
 8005af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005af8:	3b01      	subs	r3, #1
 8005afa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	029b      	lsls	r3, r3, #10
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b14:	801a      	strh	r2, [r3, #0]
 8005b16:	e02a      	b.n	8005b6e <USB_EPStartXfer+0xea2>
 8005b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	785b      	ldrb	r3, [r3, #1]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d122      	bne.n	8005b6e <USB_EPStartXfer+0xea2>
 8005b28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	673b      	str	r3, [r7, #112]	; 0x70
 8005b34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	461a      	mov	r2, r3
 8005b46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b48:	4413      	add	r3, r2
 8005b4a:	673b      	str	r3, [r7, #112]	; 0x70
 8005b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	011a      	lsls	r2, r3, #4
 8005b5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b6c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	891b      	ldrh	r3, [r3, #8]
 8005b7a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6959      	ldr	r1, [r3, #20]
 8005b8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b94:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005b98:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005b9c:	6800      	ldr	r0, [r0, #0]
 8005b9e:	f000 fff6 	bl	8006b8e <USB_WritePMA>
 8005ba2:	e1d8      	b.n	8005f56 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	785b      	ldrb	r3, [r3, #1]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d178      	bne.n	8005ca6 <USB_EPStartXfer+0xfda>
 8005bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bd8:	4413      	add	r3, r2
 8005bda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005bde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005be2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	011a      	lsls	r2, r3, #4
 8005bec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bf6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005bfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d116      	bne.n	8005c30 <USB_EPStartXfer+0xf64>
 8005c02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c14:	801a      	strh	r2, [r3, #0]
 8005c16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c1a:	881b      	ldrh	r3, [r3, #0]
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c2c:	801a      	strh	r2, [r3, #0]
 8005c2e:	e06b      	b.n	8005d08 <USB_EPStartXfer+0x103c>
 8005c30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c34:	2b3e      	cmp	r3, #62	; 0x3e
 8005c36:	d818      	bhi.n	8005c6a <USB_EPStartXfer+0xf9e>
 8005c38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c3c:	085b      	lsrs	r3, r3, #1
 8005c3e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005c42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d004      	beq.n	8005c58 <USB_EPStartXfer+0xf8c>
 8005c4e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005c52:	3301      	adds	r3, #1
 8005c54:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005c58:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	029b      	lsls	r3, r3, #10
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c66:	801a      	strh	r2, [r3, #0]
 8005c68:	e04e      	b.n	8005d08 <USB_EPStartXfer+0x103c>
 8005c6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c6e:	095b      	lsrs	r3, r3, #5
 8005c70:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005c74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c78:	f003 031f 	and.w	r3, r3, #31
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d104      	bne.n	8005c8a <USB_EPStartXfer+0xfbe>
 8005c80:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005c84:	3b01      	subs	r3, #1
 8005c86:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005c8a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	029b      	lsls	r3, r3, #10
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ca2:	801a      	strh	r2, [r3, #0]
 8005ca4:	e030      	b.n	8005d08 <USB_EPStartXfer+0x103c>
 8005ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005caa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	785b      	ldrb	r3, [r3, #1]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d128      	bne.n	8005d08 <USB_EPStartXfer+0x103c>
 8005cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005cc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005cda:	4413      	add	r3, r2
 8005cdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005ce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ce4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	011a      	lsls	r2, r3, #4
 8005cee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cf8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005cfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d06:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005d08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	891b      	ldrh	r3, [r3, #8]
 8005d14:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6959      	ldr	r1, [r3, #20]
 8005d24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d2e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005d32:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005d36:	6800      	ldr	r0, [r0, #0]
 8005d38:	f000 ff29 	bl	8006b8e <USB_WritePMA>
          ep->xfer_buff += len;
 8005d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	695a      	ldr	r2, [r3, #20]
 8005d48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d4c:	441a      	add	r2, r3
 8005d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6a1a      	ldr	r2, [r3, #32]
 8005d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d90f      	bls.n	8005d96 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6a1a      	ldr	r2, [r3, #32]
 8005d82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d86:	1ad2      	subs	r2, r2, r3
 8005d88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	621a      	str	r2, [r3, #32]
 8005d94:	e00e      	b.n	8005db4 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005daa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2200      	movs	r2, #0
 8005db2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005db4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 80cc 	beq.w	8005f56 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005dcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	785b      	ldrb	r3, [r3, #1]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d178      	bne.n	8005ece <USB_EPStartXfer+0x1202>
 8005ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005de0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e00:	4413      	add	r3, r2
 8005e02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	011a      	lsls	r2, r3, #4
 8005e14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e18:	4413      	add	r3, r2
 8005e1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d116      	bne.n	8005e58 <USB_EPStartXfer+0x118c>
 8005e2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e3c:	801a      	strh	r2, [r3, #0]
 8005e3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e54:	801a      	strh	r2, [r3, #0]
 8005e56:	e064      	b.n	8005f22 <USB_EPStartXfer+0x1256>
 8005e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e5c:	2b3e      	cmp	r3, #62	; 0x3e
 8005e5e:	d818      	bhi.n	8005e92 <USB_EPStartXfer+0x11c6>
 8005e60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e64:	085b      	lsrs	r3, r3, #1
 8005e66:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005e6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d004      	beq.n	8005e80 <USB_EPStartXfer+0x11b4>
 8005e76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	029b      	lsls	r3, r3, #10
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e8e:	801a      	strh	r2, [r3, #0]
 8005e90:	e047      	b.n	8005f22 <USB_EPStartXfer+0x1256>
 8005e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e96:	095b      	lsrs	r3, r3, #5
 8005e98:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005e9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ea0:	f003 031f 	and.w	r3, r3, #31
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d104      	bne.n	8005eb2 <USB_EPStartXfer+0x11e6>
 8005ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eac:	3b01      	subs	r3, #1
 8005eae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	029b      	lsls	r3, r3, #10
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ec0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005eca:	801a      	strh	r2, [r3, #0]
 8005ecc:	e029      	b.n	8005f22 <USB_EPStartXfer+0x1256>
 8005ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	785b      	ldrb	r3, [r3, #1]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d121      	bne.n	8005f22 <USB_EPStartXfer+0x1256>
 8005ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	461a      	mov	r2, r3
 8005ef0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005efe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	011a      	lsls	r2, r3, #4
 8005f08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	895b      	ldrh	r3, [r3, #10]
 8005f2e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6959      	ldr	r1, [r3, #20]
 8005f3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f48:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005f4c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005f50:	6800      	ldr	r0, [r0, #0]
 8005f52:	f000 fe1c 	bl	8006b8e <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005f78:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f84:	8013      	strh	r3, [r2, #0]
 8005f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f8a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005f8e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005f92:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005f96:	8812      	ldrh	r2, [r2, #0]
 8005f98:	f082 0210 	eor.w	r2, r2, #16
 8005f9c:	801a      	strh	r2, [r3, #0]
 8005f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005fa6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005faa:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005fae:	8812      	ldrh	r2, [r2, #0]
 8005fb0:	f082 0220 	eor.w	r2, r2, #32
 8005fb4:	801a      	strh	r2, [r3, #0]
 8005fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	441a      	add	r2, r3
 8005fd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd4:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005fd8:	881b      	ldrh	r3, [r3, #0]
 8005fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	8013      	strh	r3, [r2, #0]
 8005fee:	f000 bc9f 	b.w	8006930 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ff6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	7b1b      	ldrb	r3, [r3, #12]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f040 80ae 	bne.w	8006160 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006008:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	699a      	ldr	r2, [r3, #24]
 8006010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006014:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	429a      	cmp	r2, r3
 800601e:	d917      	bls.n	8006050 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006020:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006024:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006034:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	699a      	ldr	r2, [r3, #24]
 800603c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006040:	1ad2      	subs	r2, r2, r3
 8006042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006046:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	619a      	str	r2, [r3, #24]
 800604e:	e00e      	b.n	800606e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006054:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006060:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006064:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2200      	movs	r2, #0
 800606c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800606e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006072:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800607c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006080:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800608a:	b29b      	uxth	r3, r3
 800608c:	461a      	mov	r2, r3
 800608e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006092:	4413      	add	r3, r2
 8006094:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800609c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	011a      	lsls	r2, r3, #4
 80060a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80060aa:	4413      	add	r3, r2
 80060ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d116      	bne.n	80060ea <USB_EPStartXfer+0x141e>
 80060bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060ce:	801a      	strh	r2, [r3, #0]
 80060d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060d4:	881b      	ldrh	r3, [r3, #0]
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060e6:	801a      	strh	r2, [r3, #0]
 80060e8:	e3e8      	b.n	80068bc <USB_EPStartXfer+0x1bf0>
 80060ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ee:	2b3e      	cmp	r3, #62	; 0x3e
 80060f0:	d818      	bhi.n	8006124 <USB_EPStartXfer+0x1458>
 80060f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060f6:	085b      	lsrs	r3, r3, #1
 80060f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80060fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b00      	cmp	r3, #0
 8006106:	d004      	beq.n	8006112 <USB_EPStartXfer+0x1446>
 8006108:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800610c:	3301      	adds	r3, #1
 800610e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006112:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006116:	b29b      	uxth	r3, r3
 8006118:	029b      	lsls	r3, r3, #10
 800611a:	b29a      	uxth	r2, r3
 800611c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006120:	801a      	strh	r2, [r3, #0]
 8006122:	e3cb      	b.n	80068bc <USB_EPStartXfer+0x1bf0>
 8006124:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006128:	095b      	lsrs	r3, r3, #5
 800612a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800612e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006132:	f003 031f 	and.w	r3, r3, #31
 8006136:	2b00      	cmp	r3, #0
 8006138:	d104      	bne.n	8006144 <USB_EPStartXfer+0x1478>
 800613a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800613e:	3b01      	subs	r3, #1
 8006140:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006144:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006148:	b29b      	uxth	r3, r3
 800614a:	029b      	lsls	r3, r3, #10
 800614c:	b29b      	uxth	r3, r3
 800614e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006156:	b29a      	uxth	r2, r3
 8006158:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800615c:	801a      	strh	r2, [r3, #0]
 800615e:	e3ad      	b.n	80068bc <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006164:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	78db      	ldrb	r3, [r3, #3]
 800616c:	2b02      	cmp	r3, #2
 800616e:	f040 8200 	bne.w	8006572 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006176:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	785b      	ldrb	r3, [r3, #1]
 800617e:	2b00      	cmp	r3, #0
 8006180:	f040 8091 	bne.w	80062a6 <USB_EPStartXfer+0x15da>
 8006184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006188:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006196:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	461a      	mov	r2, r3
 80061a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80061a8:	4413      	add	r3, r2
 80061aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	011a      	lsls	r2, r3, #4
 80061bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80061c0:	4413      	add	r3, r2
 80061c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d116      	bne.n	8006208 <USB_EPStartXfer+0x153c>
 80061da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061ec:	801a      	strh	r2, [r3, #0]
 80061ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061f2:	881b      	ldrh	r3, [r3, #0]
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061fe:	b29a      	uxth	r2, r3
 8006200:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006204:	801a      	strh	r2, [r3, #0]
 8006206:	e083      	b.n	8006310 <USB_EPStartXfer+0x1644>
 8006208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800620c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	2b3e      	cmp	r3, #62	; 0x3e
 8006216:	d820      	bhi.n	800625a <USB_EPStartXfer+0x158e>
 8006218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800621c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	085b      	lsrs	r3, r3, #1
 8006226:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800622a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800622e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	d004      	beq.n	8006248 <USB_EPStartXfer+0x157c>
 800623e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006242:	3301      	adds	r3, #1
 8006244:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800624c:	b29b      	uxth	r3, r3
 800624e:	029b      	lsls	r3, r3, #10
 8006250:	b29a      	uxth	r2, r3
 8006252:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006256:	801a      	strh	r2, [r3, #0]
 8006258:	e05a      	b.n	8006310 <USB_EPStartXfer+0x1644>
 800625a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800625e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	095b      	lsrs	r3, r3, #5
 8006268:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800626c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006270:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	f003 031f 	and.w	r3, r3, #31
 800627c:	2b00      	cmp	r3, #0
 800627e:	d104      	bne.n	800628a <USB_EPStartXfer+0x15be>
 8006280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006284:	3b01      	subs	r3, #1
 8006286:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800628a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800628e:	b29b      	uxth	r3, r3
 8006290:	029b      	lsls	r3, r3, #10
 8006292:	b29b      	uxth	r3, r3
 8006294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800629c:	b29a      	uxth	r2, r3
 800629e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062a2:	801a      	strh	r2, [r3, #0]
 80062a4:	e034      	b.n	8006310 <USB_EPStartXfer+0x1644>
 80062a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	785b      	ldrb	r3, [r3, #1]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d12c      	bne.n	8006310 <USB_EPStartXfer+0x1644>
 80062b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80062c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	461a      	mov	r2, r3
 80062d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062da:	4413      	add	r3, r2
 80062dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80062e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	011a      	lsls	r2, r3, #4
 80062ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062f2:	4413      	add	r3, r2
 80062f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006300:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	b29a      	uxth	r2, r3
 800630a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800630e:	801a      	strh	r2, [r3, #0]
 8006310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006314:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800631e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006322:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	785b      	ldrb	r3, [r3, #1]
 800632a:	2b00      	cmp	r3, #0
 800632c:	f040 8091 	bne.w	8006452 <USB_EPStartXfer+0x1786>
 8006330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006334:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800633e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006342:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800634c:	b29b      	uxth	r3, r3
 800634e:	461a      	mov	r2, r3
 8006350:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006354:	4413      	add	r3, r2
 8006356:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800635a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800635e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	011a      	lsls	r2, r3, #4
 8006368:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800636c:	4413      	add	r3, r2
 800636e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006372:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800637a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d116      	bne.n	80063b4 <USB_EPStartXfer+0x16e8>
 8006386:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	b29b      	uxth	r3, r3
 800638e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006392:	b29a      	uxth	r2, r3
 8006394:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006398:	801a      	strh	r2, [r3, #0]
 800639a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800639e:	881b      	ldrh	r3, [r3, #0]
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063b0:	801a      	strh	r2, [r3, #0]
 80063b2:	e07c      	b.n	80064ae <USB_EPStartXfer+0x17e2>
 80063b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	2b3e      	cmp	r3, #62	; 0x3e
 80063c2:	d820      	bhi.n	8006406 <USB_EPStartXfer+0x173a>
 80063c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	085b      	lsrs	r3, r3, #1
 80063d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80063d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d004      	beq.n	80063f4 <USB_EPStartXfer+0x1728>
 80063ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80063ee:	3301      	adds	r3, #1
 80063f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80063f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	029b      	lsls	r3, r3, #10
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006402:	801a      	strh	r2, [r3, #0]
 8006404:	e053      	b.n	80064ae <USB_EPStartXfer+0x17e2>
 8006406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800640a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	095b      	lsrs	r3, r3, #5
 8006414:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800641c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	f003 031f 	and.w	r3, r3, #31
 8006428:	2b00      	cmp	r3, #0
 800642a:	d104      	bne.n	8006436 <USB_EPStartXfer+0x176a>
 800642c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006430:	3b01      	subs	r3, #1
 8006432:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006436:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800643a:	b29b      	uxth	r3, r3
 800643c:	029b      	lsls	r3, r3, #10
 800643e:	b29b      	uxth	r3, r3
 8006440:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006444:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006448:	b29a      	uxth	r2, r3
 800644a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800644e:	801a      	strh	r2, [r3, #0]
 8006450:	e02d      	b.n	80064ae <USB_EPStartXfer+0x17e2>
 8006452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006456:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	785b      	ldrb	r3, [r3, #1]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d125      	bne.n	80064ae <USB_EPStartXfer+0x17e2>
 8006462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006466:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006470:	b29b      	uxth	r3, r3
 8006472:	461a      	mov	r2, r3
 8006474:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006478:	4413      	add	r3, r2
 800647a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800647e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006482:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	011a      	lsls	r2, r3, #4
 800648c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006490:	4413      	add	r3, r2
 8006492:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006496:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800649a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800649e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80064ac:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80064ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	69db      	ldr	r3, [r3, #28]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f000 81fe 	beq.w	80068bc <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80064c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	881b      	ldrh	r3, [r3, #0]
 80064dc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80064e0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80064e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d005      	beq.n	80064f8 <USB_EPStartXfer+0x182c>
 80064ec:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80064f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10d      	bne.n	8006514 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80064f8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80064fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006500:	2b00      	cmp	r3, #0
 8006502:	f040 81db 	bne.w	80068bc <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006506:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800650a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650e:	2b00      	cmp	r3, #0
 8006510:	f040 81d4 	bne.w	80068bc <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006518:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006522:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	b29b      	uxth	r3, r3
 8006532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800653e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006542:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800654c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	441a      	add	r2, r3
 8006558:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800655c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006560:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006568:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800656c:	b29b      	uxth	r3, r3
 800656e:	8013      	strh	r3, [r2, #0]
 8006570:	e1a4      	b.n	80068bc <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006572:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006576:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	78db      	ldrb	r3, [r3, #3]
 800657e:	2b01      	cmp	r3, #1
 8006580:	f040 819a 	bne.w	80068b8 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006584:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006588:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	699a      	ldr	r2, [r3, #24]
 8006590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006594:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	429a      	cmp	r2, r3
 800659e:	d917      	bls.n	80065d0 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80065a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80065b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	699a      	ldr	r2, [r3, #24]
 80065bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065c0:	1ad2      	subs	r2, r2, r3
 80065c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	619a      	str	r2, [r3, #24]
 80065ce:	e00e      	b.n	80065ee <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80065d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80065e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2200      	movs	r2, #0
 80065ec:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80065ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	785b      	ldrb	r3, [r3, #1]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d178      	bne.n	80066f0 <USB_EPStartXfer+0x1a24>
 80065fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006602:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800660c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006610:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800661a:	b29b      	uxth	r3, r3
 800661c:	461a      	mov	r2, r3
 800661e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006622:	4413      	add	r3, r2
 8006624:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800662c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	011a      	lsls	r2, r3, #4
 8006636:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800663a:	4413      	add	r3, r2
 800663c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006640:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006644:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006648:	2b00      	cmp	r3, #0
 800664a:	d116      	bne.n	800667a <USB_EPStartXfer+0x19ae>
 800664c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	b29b      	uxth	r3, r3
 8006654:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006658:	b29a      	uxth	r2, r3
 800665a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800665e:	801a      	strh	r2, [r3, #0]
 8006660:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	b29b      	uxth	r3, r3
 8006668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800666c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006670:	b29a      	uxth	r2, r3
 8006672:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006676:	801a      	strh	r2, [r3, #0]
 8006678:	e06b      	b.n	8006752 <USB_EPStartXfer+0x1a86>
 800667a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800667e:	2b3e      	cmp	r3, #62	; 0x3e
 8006680:	d818      	bhi.n	80066b4 <USB_EPStartXfer+0x19e8>
 8006682:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006686:	085b      	lsrs	r3, r3, #1
 8006688:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800668c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b00      	cmp	r3, #0
 8006696:	d004      	beq.n	80066a2 <USB_EPStartXfer+0x19d6>
 8006698:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800669c:	3301      	adds	r3, #1
 800669e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80066a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	029b      	lsls	r3, r3, #10
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066b0:	801a      	strh	r2, [r3, #0]
 80066b2:	e04e      	b.n	8006752 <USB_EPStartXfer+0x1a86>
 80066b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066b8:	095b      	lsrs	r3, r3, #5
 80066ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80066be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066c2:	f003 031f 	and.w	r3, r3, #31
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d104      	bne.n	80066d4 <USB_EPStartXfer+0x1a08>
 80066ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066ce:	3b01      	subs	r3, #1
 80066d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80066d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066d8:	b29b      	uxth	r3, r3
 80066da:	029b      	lsls	r3, r3, #10
 80066dc:	b29b      	uxth	r3, r3
 80066de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066ec:	801a      	strh	r2, [r3, #0]
 80066ee:	e030      	b.n	8006752 <USB_EPStartXfer+0x1a86>
 80066f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	785b      	ldrb	r3, [r3, #1]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d128      	bne.n	8006752 <USB_EPStartXfer+0x1a86>
 8006700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006704:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800670e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006712:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800671c:	b29b      	uxth	r3, r3
 800671e:	461a      	mov	r2, r3
 8006720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006724:	4413      	add	r3, r2
 8006726:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800672a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800672e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	011a      	lsls	r2, r3, #4
 8006738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800673c:	4413      	add	r3, r2
 800673e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006742:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006746:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800674a:	b29a      	uxth	r2, r3
 800674c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006750:	801a      	strh	r2, [r3, #0]
 8006752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006756:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006764:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	785b      	ldrb	r3, [r3, #1]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d178      	bne.n	8006862 <USB_EPStartXfer+0x1b96>
 8006770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006774:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800677e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006782:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800678c:	b29b      	uxth	r3, r3
 800678e:	461a      	mov	r2, r3
 8006790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006794:	4413      	add	r3, r2
 8006796:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800679a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800679e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	011a      	lsls	r2, r3, #4
 80067a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067ac:	4413      	add	r3, r2
 80067ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d116      	bne.n	80067ec <USB_EPStartXfer+0x1b20>
 80067be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067c2:	881b      	ldrh	r3, [r3, #0]
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067d0:	801a      	strh	r2, [r3, #0]
 80067d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067d6:	881b      	ldrh	r3, [r3, #0]
 80067d8:	b29b      	uxth	r3, r3
 80067da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067e8:	801a      	strh	r2, [r3, #0]
 80067ea:	e067      	b.n	80068bc <USB_EPStartXfer+0x1bf0>
 80067ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067f0:	2b3e      	cmp	r3, #62	; 0x3e
 80067f2:	d818      	bhi.n	8006826 <USB_EPStartXfer+0x1b5a>
 80067f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067f8:	085b      	lsrs	r3, r3, #1
 80067fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80067fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b00      	cmp	r3, #0
 8006808:	d004      	beq.n	8006814 <USB_EPStartXfer+0x1b48>
 800680a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800680e:	3301      	adds	r3, #1
 8006810:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006814:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006818:	b29b      	uxth	r3, r3
 800681a:	029b      	lsls	r3, r3, #10
 800681c:	b29a      	uxth	r2, r3
 800681e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006822:	801a      	strh	r2, [r3, #0]
 8006824:	e04a      	b.n	80068bc <USB_EPStartXfer+0x1bf0>
 8006826:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800682a:	095b      	lsrs	r3, r3, #5
 800682c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006834:	f003 031f 	and.w	r3, r3, #31
 8006838:	2b00      	cmp	r3, #0
 800683a:	d104      	bne.n	8006846 <USB_EPStartXfer+0x1b7a>
 800683c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006840:	3b01      	subs	r3, #1
 8006842:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006846:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800684a:	b29b      	uxth	r3, r3
 800684c:	029b      	lsls	r3, r3, #10
 800684e:	b29b      	uxth	r3, r3
 8006850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006858:	b29a      	uxth	r2, r3
 800685a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800685e:	801a      	strh	r2, [r3, #0]
 8006860:	e02c      	b.n	80068bc <USB_EPStartXfer+0x1bf0>
 8006862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006866:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	785b      	ldrb	r3, [r3, #1]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d124      	bne.n	80068bc <USB_EPStartXfer+0x1bf0>
 8006872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006876:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006880:	b29b      	uxth	r3, r3
 8006882:	461a      	mov	r2, r3
 8006884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006888:	4413      	add	r3, r2
 800688a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800688e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006892:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	011a      	lsls	r2, r3, #4
 800689c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068a0:	4413      	add	r3, r2
 80068a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068b4:	801a      	strh	r2, [r3, #0]
 80068b6:	e001      	b.n	80068bc <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e03a      	b.n	8006932 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	881b      	ldrh	r3, [r3, #0]
 80068d8:	b29b      	uxth	r3, r3
 80068da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80068e6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80068ea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068ee:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80068f2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80068f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80068fa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80068fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006902:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800690c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	441a      	add	r2, r3
 8006918:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800691c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800692c:	b29b      	uxth	r3, r3
 800692e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	785b      	ldrb	r3, [r3, #1]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d020      	beq.n	8006990 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	881b      	ldrh	r3, [r3, #0]
 800695a:	b29b      	uxth	r3, r3
 800695c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006960:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006964:	81bb      	strh	r3, [r7, #12]
 8006966:	89bb      	ldrh	r3, [r7, #12]
 8006968:	f083 0310 	eor.w	r3, r3, #16
 800696c:	81bb      	strh	r3, [r7, #12]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	441a      	add	r2, r3
 8006978:	89bb      	ldrh	r3, [r7, #12]
 800697a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800697e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800698a:	b29b      	uxth	r3, r3
 800698c:	8013      	strh	r3, [r2, #0]
 800698e:	e01f      	b.n	80069d0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	881b      	ldrh	r3, [r3, #0]
 800699c:	b29b      	uxth	r3, r3
 800699e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a6:	81fb      	strh	r3, [r7, #14]
 80069a8:	89fb      	ldrh	r3, [r7, #14]
 80069aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069ae:	81fb      	strh	r3, [r7, #14]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	441a      	add	r2, r3
 80069ba:	89fb      	ldrh	r3, [r7, #14]
 80069bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bc80      	pop	{r7}
 80069da:	4770      	bx	lr

080069dc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	7b1b      	ldrb	r3, [r3, #12]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f040 809d 	bne.w	8006b2a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	785b      	ldrb	r3, [r3, #1]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d04c      	beq.n	8006a92 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	823b      	strh	r3, [r7, #16]
 8006a06:	8a3b      	ldrh	r3, [r7, #16]
 8006a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d01b      	beq.n	8006a48 <USB_EPClearStall+0x6c>
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a26:	81fb      	strh	r3, [r7, #14]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	441a      	add	r2, r3
 8006a32:	89fb      	ldrh	r3, [r7, #14]
 8006a34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	78db      	ldrb	r3, [r3, #3]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d06c      	beq.n	8006b2a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4413      	add	r3, r2
 8006a5a:	881b      	ldrh	r3, [r3, #0]
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a66:	81bb      	strh	r3, [r7, #12]
 8006a68:	89bb      	ldrh	r3, [r7, #12]
 8006a6a:	f083 0320 	eor.w	r3, r3, #32
 8006a6e:	81bb      	strh	r3, [r7, #12]
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	441a      	add	r2, r3
 8006a7a:	89bb      	ldrh	r3, [r7, #12]
 8006a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	8013      	strh	r3, [r2, #0]
 8006a90:	e04b      	b.n	8006b2a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	4413      	add	r3, r2
 8006a9c:	881b      	ldrh	r3, [r3, #0]
 8006a9e:	82fb      	strh	r3, [r7, #22]
 8006aa0:	8afb      	ldrh	r3, [r7, #22]
 8006aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d01b      	beq.n	8006ae2 <USB_EPClearStall+0x106>
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac0:	82bb      	strh	r3, [r7, #20]
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	441a      	add	r2, r3
 8006acc:	8abb      	ldrh	r3, [r7, #20]
 8006ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ad6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4413      	add	r3, r2
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af8:	827b      	strh	r3, [r7, #18]
 8006afa:	8a7b      	ldrh	r3, [r7, #18]
 8006afc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b00:	827b      	strh	r3, [r7, #18]
 8006b02:	8a7b      	ldrh	r3, [r7, #18]
 8006b04:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b08:	827b      	strh	r3, [r7, #18]
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	441a      	add	r2, r3
 8006b14:	8a7b      	ldrh	r3, [r7, #18]
 8006b16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	371c      	adds	r7, #28
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bc80      	pop	{r7}
 8006b34:	4770      	bx	lr

08006b36 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b083      	sub	sp, #12
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006b42:	78fb      	ldrb	r3, [r7, #3]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d103      	bne.n	8006b50 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2280      	movs	r2, #128	; 0x80
 8006b4c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bc80      	pop	{r7}
 8006b5a:	4770      	bx	lr

08006b5c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bc80      	pop	{r7}
 8006b6e:	4770      	bx	lr

08006b70 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006b82:	68fb      	ldr	r3, [r7, #12]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bc80      	pop	{r7}
 8006b8c:	4770      	bx	lr

08006b8e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b08d      	sub	sp, #52	; 0x34
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	60f8      	str	r0, [r7, #12]
 8006b96:	60b9      	str	r1, [r7, #8]
 8006b98:	4611      	mov	r1, r2
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	80fb      	strh	r3, [r7, #6]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ba4:	88bb      	ldrh	r3, [r7, #4]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	085b      	lsrs	r3, r3, #1
 8006baa:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006bb4:	88fb      	ldrh	r3, [r7, #6]
 8006bb6:	005a      	lsls	r2, r3, #1
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bc0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bc6:	e01e      	b.n	8006c06 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	021b      	lsls	r3, r3, #8
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	461a      	mov	r2, r3
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bec:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf0:	3302      	adds	r3, #2
 8006bf2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf6:	3302      	adds	r3, #2
 8006bf8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c02:	3b01      	subs	r3, #1
 8006c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1dd      	bne.n	8006bc8 <USB_WritePMA+0x3a>
  }
}
 8006c0c:	bf00      	nop
 8006c0e:	bf00      	nop
 8006c10:	3734      	adds	r7, #52	; 0x34
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bc80      	pop	{r7}
 8006c16:	4770      	bx	lr

08006c18 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b08b      	sub	sp, #44	; 0x2c
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	4611      	mov	r1, r2
 8006c24:	461a      	mov	r2, r3
 8006c26:	460b      	mov	r3, r1
 8006c28:	80fb      	strh	r3, [r7, #6]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006c2e:	88bb      	ldrh	r3, [r7, #4]
 8006c30:	085b      	lsrs	r3, r3, #1
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c3e:	88fb      	ldrh	r3, [r7, #6]
 8006c40:	005a      	lsls	r2, r3, #1
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c4a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8006c50:	e01b      	b.n	8006c8a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006c52:	6a3b      	ldr	r3, [r7, #32]
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	3302      	adds	r3, #2
 8006c5e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	0a1b      	lsrs	r3, r3, #8
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	3302      	adds	r3, #2
 8006c82:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c86:	3b01      	subs	r3, #1
 8006c88:	627b      	str	r3, [r7, #36]	; 0x24
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1e0      	bne.n	8006c52 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006c90:	88bb      	ldrh	r3, [r7, #4]
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d007      	beq.n	8006cac <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006c9c:	6a3b      	ldr	r3, [r7, #32]
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	701a      	strb	r2, [r3, #0]
  }
}
 8006cac:	bf00      	nop
 8006cae:	372c      	adds	r7, #44	; 0x2c
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bc80      	pop	{r7}
 8006cb4:	4770      	bx	lr

08006cb6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b084      	sub	sp, #16
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	7c1b      	ldrb	r3, [r3, #16]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d115      	bne.n	8006cfa <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006cce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	2181      	movs	r1, #129	; 0x81
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f002 fad5 	bl	8009286 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006ce2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	2101      	movs	r1, #1
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f002 facb 	bl	8009286 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8006cf8:	e012      	b.n	8006d20 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006cfa:	2340      	movs	r3, #64	; 0x40
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	2181      	movs	r1, #129	; 0x81
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f002 fac0 	bl	8009286 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d0c:	2340      	movs	r3, #64	; 0x40
 8006d0e:	2202      	movs	r2, #2
 8006d10:	2101      	movs	r1, #1
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f002 fab7 	bl	8009286 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006d20:	2308      	movs	r3, #8
 8006d22:	2203      	movs	r2, #3
 8006d24:	2182      	movs	r1, #130	; 0x82
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f002 faad 	bl	8009286 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006d32:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006d36:	f002 fbcd 	bl	80094d4 <USBD_static_malloc>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d102      	bne.n	8006d52 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	73fb      	strb	r3, [r7, #15]
 8006d50:	e026      	b.n	8006da0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d58:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	7c1b      	ldrb	r3, [r3, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d109      	bne.n	8006d90 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d86:	2101      	movs	r1, #1
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f002 fb6d 	bl	8009468 <USBD_LL_PrepareReceive>
 8006d8e:	e007      	b.n	8006da0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d96:	2340      	movs	r3, #64	; 0x40
 8006d98:	2101      	movs	r1, #1
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f002 fb64 	bl	8009468 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b084      	sub	sp, #16
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	460b      	mov	r3, r1
 8006db4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006db6:	2300      	movs	r3, #0
 8006db8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006dba:	2181      	movs	r1, #129	; 0x81
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f002 fa88 	bl	80092d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006dc8:	2101      	movs	r1, #1
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f002 fa81 	bl	80092d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006dd8:	2182      	movs	r1, #130	; 0x82
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f002 fa79 	bl	80092d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00e      	beq.n	8006e0e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006e00:	4618      	mov	r0, r3
 8006e02:	f002 fb73 	bl	80094ec <USBD_static_free>
    pdev->pClassData = NULL;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8006e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006e28:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006e32:	2300      	movs	r3, #0
 8006e34:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d039      	beq.n	8006eb6 <USBD_CDC_Setup+0x9e>
 8006e42:	2b20      	cmp	r3, #32
 8006e44:	d17f      	bne.n	8006f46 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	88db      	ldrh	r3, [r3, #6]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d029      	beq.n	8006ea2 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	b25b      	sxtb	r3, r3
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	da11      	bge.n	8006e7c <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	683a      	ldr	r2, [r7, #0]
 8006e62:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006e64:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	88d2      	ldrh	r2, [r2, #6]
 8006e6a:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006e6c:	6939      	ldr	r1, [r7, #16]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	88db      	ldrh	r3, [r3, #6]
 8006e72:	461a      	mov	r2, r3
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f001 f994 	bl	80081a2 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8006e7a:	e06b      	b.n	8006f54 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	785a      	ldrb	r2, [r3, #1]
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	88db      	ldrh	r3, [r3, #6]
 8006e8a:	b2da      	uxtb	r2, r3
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006e92:	6939      	ldr	r1, [r7, #16]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	88db      	ldrh	r3, [r3, #6]
 8006e98:	461a      	mov	r2, r3
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f001 f9af 	bl	80081fe <USBD_CtlPrepareRx>
    break;
 8006ea0:	e058      	b.n	8006f54 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	7850      	ldrb	r0, [r2, #1]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	4798      	blx	r3
    break;
 8006eb4:	e04e      	b.n	8006f54 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	785b      	ldrb	r3, [r3, #1]
 8006eba:	2b0b      	cmp	r3, #11
 8006ebc:	d02e      	beq.n	8006f1c <USBD_CDC_Setup+0x104>
 8006ebe:	2b0b      	cmp	r3, #11
 8006ec0:	dc38      	bgt.n	8006f34 <USBD_CDC_Setup+0x11c>
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d002      	beq.n	8006ecc <USBD_CDC_Setup+0xb4>
 8006ec6:	2b0a      	cmp	r3, #10
 8006ec8:	d014      	beq.n	8006ef4 <USBD_CDC_Setup+0xdc>
 8006eca:	e033      	b.n	8006f34 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006ed2:	2b03      	cmp	r3, #3
 8006ed4:	d107      	bne.n	8006ee6 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006ed6:	f107 030c 	add.w	r3, r7, #12
 8006eda:	2202      	movs	r2, #2
 8006edc:	4619      	mov	r1, r3
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f001 f95f 	bl	80081a2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006ee4:	e02e      	b.n	8006f44 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8006ee6:	6839      	ldr	r1, [r7, #0]
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f001 f8f0 	bl	80080ce <USBD_CtlError>
			  ret = USBD_FAIL;
 8006eee:	2302      	movs	r3, #2
 8006ef0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ef2:	e027      	b.n	8006f44 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006efa:	2b03      	cmp	r3, #3
 8006efc:	d107      	bne.n	8006f0e <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8006efe:	f107 030f 	add.w	r3, r7, #15
 8006f02:	2201      	movs	r2, #1
 8006f04:	4619      	mov	r1, r3
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f001 f94b 	bl	80081a2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006f0c:	e01a      	b.n	8006f44 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8006f0e:	6839      	ldr	r1, [r7, #0]
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f001 f8dc 	bl	80080ce <USBD_CtlError>
			  ret = USBD_FAIL;
 8006f16:	2302      	movs	r3, #2
 8006f18:	75fb      	strb	r3, [r7, #23]
      break;
 8006f1a:	e013      	b.n	8006f44 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006f22:	2b03      	cmp	r3, #3
 8006f24:	d00d      	beq.n	8006f42 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 8006f26:	6839      	ldr	r1, [r7, #0]
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f001 f8d0 	bl	80080ce <USBD_CtlError>
			  ret = USBD_FAIL;
 8006f2e:	2302      	movs	r3, #2
 8006f30:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006f32:	e006      	b.n	8006f42 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 8006f34:	6839      	ldr	r1, [r7, #0]
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f001 f8c9 	bl	80080ce <USBD_CtlError>
      ret = USBD_FAIL;
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f40:	e000      	b.n	8006f44 <USBD_CDC_Setup+0x12c>
      break;
 8006f42:	bf00      	nop
    }
    break;
 8006f44:	e006      	b.n	8006f54 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 8006f46:	6839      	ldr	r1, [r7, #0]
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f001 f8c0 	bl	80080ce <USBD_CtlError>
    ret = USBD_FAIL;
 8006f4e:	2302      	movs	r3, #2
 8006f50:	75fb      	strb	r3, [r7, #23]
    break;
 8006f52:	bf00      	nop
  }

  return ret;
 8006f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3718      	adds	r7, #24
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b084      	sub	sp, #16
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
 8006f66:	460b      	mov	r3, r1
 8006f68:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f70:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006f78:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d03a      	beq.n	8006ffa <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006f84:	78fa      	ldrb	r2, [r7, #3]
 8006f86:	6879      	ldr	r1, [r7, #4]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	440b      	add	r3, r1
 8006f92:	331c      	adds	r3, #28
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d029      	beq.n	8006fee <USBD_CDC_DataIn+0x90>
 8006f9a:	78fa      	ldrb	r2, [r7, #3]
 8006f9c:	6879      	ldr	r1, [r7, #4]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	440b      	add	r3, r1
 8006fa8:	331c      	adds	r3, #28
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	78f9      	ldrb	r1, [r7, #3]
 8006fae:	68b8      	ldr	r0, [r7, #8]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	440b      	add	r3, r1
 8006fb6:	00db      	lsls	r3, r3, #3
 8006fb8:	4403      	add	r3, r0
 8006fba:	3338      	adds	r3, #56	; 0x38
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	fbb2 f1f3 	udiv	r1, r2, r3
 8006fc2:	fb01 f303 	mul.w	r3, r1, r3
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d110      	bne.n	8006fee <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006fcc:	78fa      	ldrb	r2, [r7, #3]
 8006fce:	6879      	ldr	r1, [r7, #4]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	440b      	add	r3, r1
 8006fda:	331c      	adds	r3, #28
 8006fdc:	2200      	movs	r2, #0
 8006fde:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006fe0:	78f9      	ldrb	r1, [r7, #3]
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f002 fa1b 	bl	8009422 <USBD_LL_Transmit>
 8006fec:	e003      	b.n	8006ff6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	e000      	b.n	8006ffc <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006ffa:	2302      	movs	r3, #2
  }
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	460b      	mov	r3, r1
 800700e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007016:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8007018:	78fb      	ldrb	r3, [r7, #3]
 800701a:	4619      	mov	r1, r3
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f002 fa46 	bl	80094ae <USBD_LL_GetRxDataSize>
 8007022:	4602      	mov	r2, r0
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00d      	beq.n	8007050 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007048:	4611      	mov	r1, r2
 800704a:	4798      	blx	r3

    return USBD_OK;
 800704c:	2300      	movs	r3, #0
 800704e:	e000      	b.n	8007052 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007050:	2302      	movs	r3, #2
  }
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b084      	sub	sp, #16
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007068:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007070:	2b00      	cmp	r3, #0
 8007072:	d015      	beq.n	80070a0 <USBD_CDC_EP0_RxReady+0x46>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800707a:	2bff      	cmp	r3, #255	; 0xff
 800707c:	d010      	beq.n	80070a0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800708c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007094:	b292      	uxth	r2, r2
 8007096:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	22ff      	movs	r2, #255	; 0xff
 800709c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
	...

080070ac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2243      	movs	r2, #67	; 0x43
 80070b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80070ba:	4b03      	ldr	r3, [pc, #12]	; (80070c8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80070bc:	4618      	mov	r0, r3
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bc80      	pop	{r7}
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	200001f8 	.word	0x200001f8

080070cc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2243      	movs	r2, #67	; 0x43
 80070d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80070da:	4b03      	ldr	r3, [pc, #12]	; (80070e8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80070dc:	4618      	mov	r0, r3
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bc80      	pop	{r7}
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	200001b4 	.word	0x200001b4

080070ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2243      	movs	r2, #67	; 0x43
 80070f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80070fa:	4b03      	ldr	r3, [pc, #12]	; (8007108 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	bc80      	pop	{r7}
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	2000023c 	.word	0x2000023c

0800710c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	220a      	movs	r2, #10
 8007118:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800711a:	4b03      	ldr	r3, [pc, #12]	; (8007128 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800711c:	4618      	mov	r0, r3
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	bc80      	pop	{r7}
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	20000170 	.word	0x20000170

0800712c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007136:	2302      	movs	r3, #2
 8007138:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d005      	beq.n	800714c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8007148:	2300      	movs	r3, #0
 800714a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800714c:	7bfb      	ldrb	r3, [r7, #15]
}
 800714e:	4618      	mov	r0, r3
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	bc80      	pop	{r7}
 8007156:	4770      	bx	lr

08007158 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8007158:	b480      	push	{r7}
 800715a:	b087      	sub	sp, #28
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	4613      	mov	r3, r2
 8007164:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800716c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007176:	88fa      	ldrh	r2, [r7, #6]
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	371c      	adds	r7, #28
 8007184:	46bd      	mov	sp, r7
 8007186:	bc80      	pop	{r7}
 8007188:	4770      	bx	lr

0800718a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800718a:	b480      	push	{r7}
 800718c:	b085      	sub	sp, #20
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800719a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bc80      	pop	{r7}
 80071ae:	4770      	bx	lr

080071b0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80071be:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d01c      	beq.n	8007204 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d115      	bne.n	8007200 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	2181      	movs	r1, #129	; 0x81
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f002 f913 	bl	8009422 <USBD_LL_Transmit>

      return USBD_OK;
 80071fc:	2300      	movs	r3, #0
 80071fe:	e002      	b.n	8007206 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007200:	2301      	movs	r3, #1
 8007202:	e000      	b.n	8007206 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007204:	2302      	movs	r3, #2
  }
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b084      	sub	sp, #16
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800721c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007224:	2b00      	cmp	r3, #0
 8007226:	d017      	beq.n	8007258 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	7c1b      	ldrb	r3, [r3, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d109      	bne.n	8007244 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007236:	f44f 7300 	mov.w	r3, #512	; 0x200
 800723a:	2101      	movs	r1, #1
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f002 f913 	bl	8009468 <USBD_LL_PrepareReceive>
 8007242:	e007      	b.n	8007254 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800724a:	2340      	movs	r3, #64	; 0x40
 800724c:	2101      	movs	r1, #1
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f002 f90a 	bl	8009468 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007254:	2300      	movs	r3, #0
 8007256:	e000      	b.n	800725a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007258:	2302      	movs	r3, #2
  }
}
 800725a:	4618      	mov	r0, r3
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b084      	sub	sp, #16
 8007266:	af00      	add	r7, sp, #0
 8007268:	60f8      	str	r0, [r7, #12]
 800726a:	60b9      	str	r1, [r7, #8]
 800726c:	4613      	mov	r3, r2
 800726e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d101      	bne.n	800727a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007276:	2302      	movs	r3, #2
 8007278:	e01a      	b.n	80072b0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007280:	2b00      	cmp	r3, #0
 8007282:	d003      	beq.n	800728c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d003      	beq.n	800729a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	79fa      	ldrb	r2, [r7, #7]
 80072a6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f001 ff77 	bl	800919c <USBD_LL_Init>

  return USBD_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d006      	beq.n	80072da <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	73fb      	strb	r3, [r7, #15]
 80072d8:	e001      	b.n	80072de <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80072da:	2302      	movs	r3, #2
 80072dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80072de:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bc80      	pop	{r7}
 80072e8:	4770      	bx	lr

080072ea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b082      	sub	sp, #8
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f001 ffac 	bl	8009250 <USBD_LL_Start>

  return USBD_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8007302:	b480      	push	{r7}
 8007304:	b083      	sub	sp, #12
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	bc80      	pop	{r7}
 8007314:	4770      	bx	lr

08007316 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b084      	sub	sp, #16
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	460b      	mov	r3, r1
 8007320:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007322:	2302      	movs	r3, #2
 8007324:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00c      	beq.n	800734a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	78fa      	ldrb	r2, [r7, #3]
 800733a:	4611      	mov	r1, r2
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	4798      	blx	r3
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800734a:	7bfb      	ldrb	r3, [r7, #15]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	460b      	mov	r3, r1
 800735e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	78fa      	ldrb	r2, [r7, #3]
 800736a:	4611      	mov	r1, r2
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	4798      	blx	r3
  return USBD_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b082      	sub	sp, #8
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800738a:	6839      	ldr	r1, [r7, #0]
 800738c:	4618      	mov	r0, r3
 800738e:	f000 fe62 	bl	8008056 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80073a0:	461a      	mov	r2, r3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80073ae:	f003 031f 	and.w	r3, r3, #31
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d016      	beq.n	80073e4 <USBD_LL_SetupStage+0x6a>
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d81c      	bhi.n	80073f4 <USBD_LL_SetupStage+0x7a>
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d002      	beq.n	80073c4 <USBD_LL_SetupStage+0x4a>
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d008      	beq.n	80073d4 <USBD_LL_SetupStage+0x5a>
 80073c2:	e017      	b.n	80073f4 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 f9c5 	bl	800775c <USBD_StdDevReq>
    break;
 80073d2:	e01a      	b.n	800740a <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80073da:	4619      	mov	r1, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fa27 	bl	8007830 <USBD_StdItfReq>
    break;
 80073e2:	e012      	b.n	800740a <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80073ea:	4619      	mov	r1, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 fa67 	bl	80078c0 <USBD_StdEPReq>
    break;
 80073f2:	e00a      	b.n	800740a <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80073fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	4619      	mov	r1, r3
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f001 ff84 	bl	8009310 <USBD_LL_StallEP>
    break;
 8007408:	bf00      	nop
  }

  return USBD_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	460b      	mov	r3, r1
 800741e:	607a      	str	r2, [r7, #4]
 8007420:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8007422:	7afb      	ldrb	r3, [r7, #11]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d14b      	bne.n	80074c0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800742e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007436:	2b03      	cmp	r3, #3
 8007438:	d134      	bne.n	80074a4 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	68da      	ldr	r2, [r3, #12]
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	429a      	cmp	r2, r3
 8007444:	d919      	bls.n	800747a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	68da      	ldr	r2, [r3, #12]
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	1ad2      	subs	r2, r2, r3
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	68da      	ldr	r2, [r3, #12]
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800745c:	429a      	cmp	r2, r3
 800745e:	d203      	bcs.n	8007468 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8007464:	b29b      	uxth	r3, r3
 8007466:	e002      	b.n	800746e <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800746c:	b29b      	uxth	r3, r3
 800746e:	461a      	mov	r2, r3
 8007470:	6879      	ldr	r1, [r7, #4]
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f000 fee1 	bl	800823a <USBD_CtlContinueRx>
 8007478:	e038      	b.n	80074ec <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00a      	beq.n	800749c <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800748c:	2b03      	cmp	r3, #3
 800748e:	d105      	bne.n	800749c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f000 fede 	bl	800825e <USBD_CtlSendStatus>
 80074a2:	e023      	b.n	80074ec <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80074aa:	2b05      	cmp	r3, #5
 80074ac:	d11e      	bne.n	80074ec <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80074b6:	2100      	movs	r1, #0
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f001 ff29 	bl	8009310 <USBD_LL_StallEP>
 80074be:	e015      	b.n	80074ec <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00d      	beq.n	80074e8 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80074d2:	2b03      	cmp	r3, #3
 80074d4:	d108      	bne.n	80074e8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	7afa      	ldrb	r2, [r7, #11]
 80074e0:	4611      	mov	r1, r2
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	4798      	blx	r3
 80074e6:	e001      	b.n	80074ec <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074e8:	2302      	movs	r3, #2
 80074ea:	e000      	b.n	80074ee <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3718      	adds	r7, #24
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b086      	sub	sp, #24
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	60f8      	str	r0, [r7, #12]
 80074fe:	460b      	mov	r3, r1
 8007500:	607a      	str	r2, [r7, #4]
 8007502:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007504:	7afb      	ldrb	r3, [r7, #11]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d17f      	bne.n	800760a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	3314      	adds	r3, #20
 800750e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007516:	2b02      	cmp	r3, #2
 8007518:	d15c      	bne.n	80075d4 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	68da      	ldr	r2, [r3, #12]
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	429a      	cmp	r2, r3
 8007524:	d915      	bls.n	8007552 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	68da      	ldr	r2, [r3, #12]
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	1ad2      	subs	r2, r2, r3
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	b29b      	uxth	r3, r3
 800753a:	461a      	mov	r2, r3
 800753c:	6879      	ldr	r1, [r7, #4]
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f000 fe4b 	bl	80081da <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007544:	2300      	movs	r3, #0
 8007546:	2200      	movs	r2, #0
 8007548:	2100      	movs	r1, #0
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f001 ff8c 	bl	8009468 <USBD_LL_PrepareReceive>
 8007550:	e04e      	b.n	80075f0 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	697a      	ldr	r2, [r7, #20]
 8007558:	6912      	ldr	r2, [r2, #16]
 800755a:	fbb3 f1f2 	udiv	r1, r3, r2
 800755e:	fb01 f202 	mul.w	r2, r1, r2
 8007562:	1a9b      	subs	r3, r3, r2
 8007564:	2b00      	cmp	r3, #0
 8007566:	d11c      	bne.n	80075a2 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	689a      	ldr	r2, [r3, #8]
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007570:	429a      	cmp	r2, r3
 8007572:	d316      	bcc.n	80075a2 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	689a      	ldr	r2, [r3, #8]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800757e:	429a      	cmp	r2, r3
 8007580:	d20f      	bcs.n	80075a2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007582:	2200      	movs	r2, #0
 8007584:	2100      	movs	r1, #0
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f000 fe27 	bl	80081da <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007594:	2300      	movs	r3, #0
 8007596:	2200      	movs	r2, #0
 8007598:	2100      	movs	r1, #0
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f001 ff64 	bl	8009468 <USBD_LL_PrepareReceive>
 80075a0:	e026      	b.n	80075f0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00a      	beq.n	80075c4 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80075b4:	2b03      	cmp	r3, #3
 80075b6:	d105      	bne.n	80075c4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80075c4:	2180      	movs	r1, #128	; 0x80
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f001 fea2 	bl	8009310 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 fe59 	bl	8008284 <USBD_CtlReceiveStatus>
 80075d2:	e00d      	b.n	80075f0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80075da:	2b04      	cmp	r3, #4
 80075dc:	d004      	beq.n	80075e8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d103      	bne.n	80075f0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80075e8:	2180      	movs	r1, #128	; 0x80
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f001 fe90 	bl	8009310 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d11d      	bne.n	8007636 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f7ff fe81 	bl	8007302 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8007608:	e015      	b.n	8007636 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00d      	beq.n	8007632 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800761c:	2b03      	cmp	r3, #3
 800761e:	d108      	bne.n	8007632 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007626:	695b      	ldr	r3, [r3, #20]
 8007628:	7afa      	ldrb	r2, [r7, #11]
 800762a:	4611      	mov	r1, r2
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	4798      	blx	r3
 8007630:	e001      	b.n	8007636 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007632:	2302      	movs	r3, #2
 8007634:	e000      	b.n	8007638 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007648:	2340      	movs	r3, #64	; 0x40
 800764a:	2200      	movs	r2, #0
 800764c:	2100      	movs	r1, #0
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f001 fe19 	bl	8009286 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2240      	movs	r2, #64	; 0x40
 8007660:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007664:	2340      	movs	r3, #64	; 0x40
 8007666:	2200      	movs	r2, #0
 8007668:	2180      	movs	r1, #128	; 0x80
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f001 fe0b 	bl	8009286 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2240      	movs	r2, #64	; 0x40
 800767a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d009      	beq.n	80076b8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	6852      	ldr	r2, [r2, #4]
 80076b0:	b2d2      	uxtb	r2, r2
 80076b2:	4611      	mov	r1, r2
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	4798      	blx	r3
  }

  return USBD_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3708      	adds	r7, #8
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b083      	sub	sp, #12
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
 80076ca:	460b      	mov	r3, r1
 80076cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	78fa      	ldrb	r2, [r7, #3]
 80076d2:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	370c      	adds	r7, #12
 80076da:	46bd      	mov	sp, r7
 80076dc:	bc80      	pop	{r7}
 80076de:	4770      	bx	lr

080076e0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2204      	movs	r2, #4
 80076f8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	370c      	adds	r7, #12
 8007702:	46bd      	mov	sp, r7
 8007704:	bc80      	pop	{r7}
 8007706:	4770      	bx	lr

08007708 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	bc80      	pop	{r7}
 8007726:	4770      	bx	lr

08007728 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007736:	2b03      	cmp	r3, #3
 8007738:	d10b      	bne.n	8007752 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d005      	beq.n	8007752 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3708      	adds	r7, #8
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007766:	2300      	movs	r3, #0
 8007768:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007772:	2b40      	cmp	r3, #64	; 0x40
 8007774:	d005      	beq.n	8007782 <USBD_StdDevReq+0x26>
 8007776:	2b40      	cmp	r3, #64	; 0x40
 8007778:	d84f      	bhi.n	800781a <USBD_StdDevReq+0xbe>
 800777a:	2b00      	cmp	r3, #0
 800777c:	d009      	beq.n	8007792 <USBD_StdDevReq+0x36>
 800777e:	2b20      	cmp	r3, #32
 8007780:	d14b      	bne.n	800781a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	6839      	ldr	r1, [r7, #0]
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	4798      	blx	r3
    break;
 8007790:	e048      	b.n	8007824 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	785b      	ldrb	r3, [r3, #1]
 8007796:	2b09      	cmp	r3, #9
 8007798:	d839      	bhi.n	800780e <USBD_StdDevReq+0xb2>
 800779a:	a201      	add	r2, pc, #4	; (adr r2, 80077a0 <USBD_StdDevReq+0x44>)
 800779c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a0:	080077f1 	.word	0x080077f1
 80077a4:	08007805 	.word	0x08007805
 80077a8:	0800780f 	.word	0x0800780f
 80077ac:	080077fb 	.word	0x080077fb
 80077b0:	0800780f 	.word	0x0800780f
 80077b4:	080077d3 	.word	0x080077d3
 80077b8:	080077c9 	.word	0x080077c9
 80077bc:	0800780f 	.word	0x0800780f
 80077c0:	080077e7 	.word	0x080077e7
 80077c4:	080077dd 	.word	0x080077dd
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f9da 	bl	8007b84 <USBD_GetDescriptor>
      break;
 80077d0:	e022      	b.n	8007818 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 80077d2:	6839      	ldr	r1, [r7, #0]
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 facf 	bl	8007d78 <USBD_SetAddress>
      break;
 80077da:	e01d      	b.n	8007818 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80077dc:	6839      	ldr	r1, [r7, #0]
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fb0e 	bl	8007e00 <USBD_SetConfig>
      break;
 80077e4:	e018      	b.n	8007818 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80077e6:	6839      	ldr	r1, [r7, #0]
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 fb97 	bl	8007f1c <USBD_GetConfig>
      break;
 80077ee:	e013      	b.n	8007818 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80077f0:	6839      	ldr	r1, [r7, #0]
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fbc7 	bl	8007f86 <USBD_GetStatus>
      break;
 80077f8:	e00e      	b.n	8007818 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80077fa:	6839      	ldr	r1, [r7, #0]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fbf5 	bl	8007fec <USBD_SetFeature>
      break;
 8007802:	e009      	b.n	8007818 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8007804:	6839      	ldr	r1, [r7, #0]
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fc04 	bl	8008014 <USBD_ClrFeature>
      break;
 800780c:	e004      	b.n	8007818 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800780e:	6839      	ldr	r1, [r7, #0]
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 fc5c 	bl	80080ce <USBD_CtlError>
      break;
 8007816:	bf00      	nop
    }
    break;
 8007818:	e004      	b.n	8007824 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800781a:	6839      	ldr	r1, [r7, #0]
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fc56 	bl	80080ce <USBD_CtlError>
    break;
 8007822:	bf00      	nop
  }

  return ret;
 8007824:	7bfb      	ldrb	r3, [r7, #15]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop

08007830 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800783a:	2300      	movs	r3, #0
 800783c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007846:	2b40      	cmp	r3, #64	; 0x40
 8007848:	d005      	beq.n	8007856 <USBD_StdItfReq+0x26>
 800784a:	2b40      	cmp	r3, #64	; 0x40
 800784c:	d82e      	bhi.n	80078ac <USBD_StdItfReq+0x7c>
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <USBD_StdItfReq+0x26>
 8007852:	2b20      	cmp	r3, #32
 8007854:	d12a      	bne.n	80078ac <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800785c:	3b01      	subs	r3, #1
 800785e:	2b02      	cmp	r3, #2
 8007860:	d81d      	bhi.n	800789e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	889b      	ldrh	r3, [r3, #4]
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b01      	cmp	r3, #1
 800786a:	d813      	bhi.n	8007894 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	6839      	ldr	r1, [r7, #0]
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	4798      	blx	r3
 800787a:	4603      	mov	r3, r0
 800787c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	88db      	ldrh	r3, [r3, #6]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d110      	bne.n	80078a8 <USBD_StdItfReq+0x78>
 8007886:	7bfb      	ldrb	r3, [r7, #15]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10d      	bne.n	80078a8 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fce6 	bl	800825e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007892:	e009      	b.n	80078a8 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fc19 	bl	80080ce <USBD_CtlError>
      break;
 800789c:	e004      	b.n	80078a8 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fc14 	bl	80080ce <USBD_CtlError>
      break;
 80078a6:	e000      	b.n	80078aa <USBD_StdItfReq+0x7a>
      break;
 80078a8:	bf00      	nop
    }
    break;
 80078aa:	e004      	b.n	80078b6 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80078ac:	6839      	ldr	r1, [r7, #0]
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fc0d 	bl	80080ce <USBD_CtlError>
    break;
 80078b4:	bf00      	nop
  }

  return USBD_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80078ca:	2300      	movs	r3, #0
 80078cc:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	889b      	ldrh	r3, [r3, #4]
 80078d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078dc:	2b40      	cmp	r3, #64	; 0x40
 80078de:	d007      	beq.n	80078f0 <USBD_StdEPReq+0x30>
 80078e0:	2b40      	cmp	r3, #64	; 0x40
 80078e2:	f200 8144 	bhi.w	8007b6e <USBD_StdEPReq+0x2ae>
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00a      	beq.n	8007900 <USBD_StdEPReq+0x40>
 80078ea:	2b20      	cmp	r3, #32
 80078ec:	f040 813f 	bne.w	8007b6e <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	4798      	blx	r3
    break;
 80078fe:	e13b      	b.n	8007b78 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007908:	2b20      	cmp	r3, #32
 800790a:	d10a      	bne.n	8007922 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	4798      	blx	r3
 800791a:	4603      	mov	r3, r0
 800791c:	73fb      	strb	r3, [r7, #15]

      return ret;
 800791e:	7bfb      	ldrb	r3, [r7, #15]
 8007920:	e12b      	b.n	8007b7a <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	785b      	ldrb	r3, [r3, #1]
 8007926:	2b03      	cmp	r3, #3
 8007928:	d007      	beq.n	800793a <USBD_StdEPReq+0x7a>
 800792a:	2b03      	cmp	r3, #3
 800792c:	f300 8119 	bgt.w	8007b62 <USBD_StdEPReq+0x2a2>
 8007930:	2b00      	cmp	r3, #0
 8007932:	d072      	beq.n	8007a1a <USBD_StdEPReq+0x15a>
 8007934:	2b01      	cmp	r3, #1
 8007936:	d03a      	beq.n	80079ae <USBD_StdEPReq+0xee>
 8007938:	e113      	b.n	8007b62 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007940:	2b02      	cmp	r3, #2
 8007942:	d002      	beq.n	800794a <USBD_StdEPReq+0x8a>
 8007944:	2b03      	cmp	r3, #3
 8007946:	d015      	beq.n	8007974 <USBD_StdEPReq+0xb4>
 8007948:	e02b      	b.n	80079a2 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800794a:	7bbb      	ldrb	r3, [r7, #14]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00c      	beq.n	800796a <USBD_StdEPReq+0xaa>
 8007950:	7bbb      	ldrb	r3, [r7, #14]
 8007952:	2b80      	cmp	r3, #128	; 0x80
 8007954:	d009      	beq.n	800796a <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007956:	7bbb      	ldrb	r3, [r7, #14]
 8007958:	4619      	mov	r1, r3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f001 fcd8 	bl	8009310 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007960:	2180      	movs	r1, #128	; 0x80
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f001 fcd4 	bl	8009310 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007968:	e020      	b.n	80079ac <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fbae 	bl	80080ce <USBD_CtlError>
        break;
 8007972:	e01b      	b.n	80079ac <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	885b      	ldrh	r3, [r3, #2]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10e      	bne.n	800799a <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800797c:	7bbb      	ldrb	r3, [r7, #14]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00b      	beq.n	800799a <USBD_StdEPReq+0xda>
 8007982:	7bbb      	ldrb	r3, [r7, #14]
 8007984:	2b80      	cmp	r3, #128	; 0x80
 8007986:	d008      	beq.n	800799a <USBD_StdEPReq+0xda>
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	88db      	ldrh	r3, [r3, #6]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d104      	bne.n	800799a <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007990:	7bbb      	ldrb	r3, [r7, #14]
 8007992:	4619      	mov	r1, r3
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f001 fcbb 	bl	8009310 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fc5f 	bl	800825e <USBD_CtlSendStatus>

        break;
 80079a0:	e004      	b.n	80079ac <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 80079a2:	6839      	ldr	r1, [r7, #0]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 fb92 	bl	80080ce <USBD_CtlError>
        break;
 80079aa:	bf00      	nop
      }
      break;
 80079ac:	e0de      	b.n	8007b6c <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	d002      	beq.n	80079be <USBD_StdEPReq+0xfe>
 80079b8:	2b03      	cmp	r3, #3
 80079ba:	d015      	beq.n	80079e8 <USBD_StdEPReq+0x128>
 80079bc:	e026      	b.n	8007a0c <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079be:	7bbb      	ldrb	r3, [r7, #14]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00c      	beq.n	80079de <USBD_StdEPReq+0x11e>
 80079c4:	7bbb      	ldrb	r3, [r7, #14]
 80079c6:	2b80      	cmp	r3, #128	; 0x80
 80079c8:	d009      	beq.n	80079de <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80079ca:	7bbb      	ldrb	r3, [r7, #14]
 80079cc:	4619      	mov	r1, r3
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f001 fc9e 	bl	8009310 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80079d4:	2180      	movs	r1, #128	; 0x80
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f001 fc9a 	bl	8009310 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80079dc:	e01c      	b.n	8007a18 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 80079de:	6839      	ldr	r1, [r7, #0]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fb74 	bl	80080ce <USBD_CtlError>
        break;
 80079e6:	e017      	b.n	8007a18 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	885b      	ldrh	r3, [r3, #2]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d112      	bne.n	8007a16 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80079f0:	7bbb      	ldrb	r3, [r7, #14]
 80079f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d004      	beq.n	8007a04 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80079fa:	7bbb      	ldrb	r3, [r7, #14]
 80079fc:	4619      	mov	r1, r3
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f001 fca5 	bl	800934e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 fc2a 	bl	800825e <USBD_CtlSendStatus>
        }
        break;
 8007a0a:	e004      	b.n	8007a16 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fb5d 	bl	80080ce <USBD_CtlError>
        break;
 8007a14:	e000      	b.n	8007a18 <USBD_StdEPReq+0x158>
        break;
 8007a16:	bf00      	nop
      }
      break;
 8007a18:	e0a8      	b.n	8007b6c <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d002      	beq.n	8007a2a <USBD_StdEPReq+0x16a>
 8007a24:	2b03      	cmp	r3, #3
 8007a26:	d031      	beq.n	8007a8c <USBD_StdEPReq+0x1cc>
 8007a28:	e095      	b.n	8007b56 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a2a:	7bbb      	ldrb	r3, [r7, #14]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d007      	beq.n	8007a40 <USBD_StdEPReq+0x180>
 8007a30:	7bbb      	ldrb	r3, [r7, #14]
 8007a32:	2b80      	cmp	r3, #128	; 0x80
 8007a34:	d004      	beq.n	8007a40 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fb48 	bl	80080ce <USBD_CtlError>
          break;
 8007a3e:	e08f      	b.n	8007b60 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007a40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	da0b      	bge.n	8007a60 <USBD_StdEPReq+0x1a0>
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a4e:	4613      	mov	r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	4413      	add	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	3310      	adds	r3, #16
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	e00a      	b.n	8007a76 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007a60:	7bbb      	ldrb	r3, [r7, #14]
 8007a62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007a66:	4613      	mov	r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	4413      	add	r3, r2
 8007a76:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	2202      	movs	r2, #2
 8007a82:	4619      	mov	r1, r3
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fb8c 	bl	80081a2 <USBD_CtlSendData>
          break;
 8007a8a:	e069      	b.n	8007b60 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8007a8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	da11      	bge.n	8007ab8 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	f003 020f 	and.w	r2, r3, #15
 8007a9a:	6879      	ldr	r1, [r7, #4]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	4413      	add	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	440b      	add	r3, r1
 8007aa6:	3318      	adds	r3, #24
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d117      	bne.n	8007ade <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8007aae:	6839      	ldr	r1, [r7, #0]
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 fb0c 	bl	80080ce <USBD_CtlError>
            break;
 8007ab6:	e053      	b.n	8007b60 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ab8:	7bbb      	ldrb	r3, [r7, #14]
 8007aba:	f003 020f 	and.w	r2, r3, #15
 8007abe:	6879      	ldr	r1, [r7, #4]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	4413      	add	r3, r2
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	440b      	add	r3, r1
 8007aca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d104      	bne.n	8007ade <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8007ad4:	6839      	ldr	r1, [r7, #0]
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 faf9 	bl	80080ce <USBD_CtlError>
            break;
 8007adc:	e040      	b.n	8007b60 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007ade:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	da0b      	bge.n	8007afe <USBD_StdEPReq+0x23e>
 8007ae6:	7bbb      	ldrb	r3, [r7, #14]
 8007ae8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007aec:	4613      	mov	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	3310      	adds	r3, #16
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	4413      	add	r3, r2
 8007afa:	3304      	adds	r3, #4
 8007afc:	e00a      	b.n	8007b14 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007afe:	7bbb      	ldrb	r3, [r7, #14]
 8007b00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007b04:	4613      	mov	r3, r2
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	4413      	add	r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	4413      	add	r3, r2
 8007b14:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b16:	7bbb      	ldrb	r3, [r7, #14]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d002      	beq.n	8007b22 <USBD_StdEPReq+0x262>
 8007b1c:	7bbb      	ldrb	r3, [r7, #14]
 8007b1e:	2b80      	cmp	r3, #128	; 0x80
 8007b20:	d103      	bne.n	8007b2a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	2200      	movs	r2, #0
 8007b26:	601a      	str	r2, [r3, #0]
 8007b28:	e00e      	b.n	8007b48 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007b2a:	7bbb      	ldrb	r3, [r7, #14]
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f001 fc2c 	bl	800938c <USBD_LL_IsStallEP>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d003      	beq.n	8007b42 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	601a      	str	r2, [r3, #0]
 8007b40:	e002      	b.n	8007b48 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	2200      	movs	r2, #0
 8007b46:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fb27 	bl	80081a2 <USBD_CtlSendData>
          break;
 8007b54:	e004      	b.n	8007b60 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 fab8 	bl	80080ce <USBD_CtlError>
        break;
 8007b5e:	bf00      	nop
      }
      break;
 8007b60:	e004      	b.n	8007b6c <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fab2 	bl	80080ce <USBD_CtlError>
      break;
 8007b6a:	bf00      	nop
    }
    break;
 8007b6c:	e004      	b.n	8007b78 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8007b6e:	6839      	ldr	r1, [r7, #0]
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 faac 	bl	80080ce <USBD_CtlError>
    break;
 8007b76:	bf00      	nop
  }

  return ret;
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
	...

08007b84 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	885b      	ldrh	r3, [r3, #2]
 8007b92:	0a1b      	lsrs	r3, r3, #8
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	3b01      	subs	r3, #1
 8007b98:	2b06      	cmp	r3, #6
 8007b9a:	f200 80c9 	bhi.w	8007d30 <USBD_GetDescriptor+0x1ac>
 8007b9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ba4 <USBD_GetDescriptor+0x20>)
 8007ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba4:	08007bc1 	.word	0x08007bc1
 8007ba8:	08007bd9 	.word	0x08007bd9
 8007bac:	08007c19 	.word	0x08007c19
 8007bb0:	08007d31 	.word	0x08007d31
 8007bb4:	08007d31 	.word	0x08007d31
 8007bb8:	08007cdd 	.word	0x08007cdd
 8007bbc:	08007d03 	.word	0x08007d03
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	7c12      	ldrb	r2, [r2, #16]
 8007bcc:	f107 010a 	add.w	r1, r7, #10
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	4798      	blx	r3
 8007bd4:	60f8      	str	r0, [r7, #12]
    break;
 8007bd6:	e0b0      	b.n	8007d3a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	7c1b      	ldrb	r3, [r3, #16]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d10d      	bne.n	8007bfc <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be8:	f107 020a 	add.w	r2, r7, #10
 8007bec:	4610      	mov	r0, r2
 8007bee:	4798      	blx	r3
 8007bf0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	2202      	movs	r2, #2
 8007bf8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007bfa:	e09e      	b.n	8007d3a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c04:	f107 020a 	add.w	r2, r7, #10
 8007c08:	4610      	mov	r0, r2
 8007c0a:	4798      	blx	r3
 8007c0c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	3301      	adds	r3, #1
 8007c12:	2202      	movs	r2, #2
 8007c14:	701a      	strb	r2, [r3, #0]
    break;
 8007c16:	e090      	b.n	8007d3a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	885b      	ldrh	r3, [r3, #2]
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b05      	cmp	r3, #5
 8007c20:	d856      	bhi.n	8007cd0 <USBD_GetDescriptor+0x14c>
 8007c22:	a201      	add	r2, pc, #4	; (adr r2, 8007c28 <USBD_GetDescriptor+0xa4>)
 8007c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c28:	08007c41 	.word	0x08007c41
 8007c2c:	08007c59 	.word	0x08007c59
 8007c30:	08007c71 	.word	0x08007c71
 8007c34:	08007c89 	.word	0x08007c89
 8007c38:	08007ca1 	.word	0x08007ca1
 8007c3c:	08007cb9 	.word	0x08007cb9
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	7c12      	ldrb	r2, [r2, #16]
 8007c4c:	f107 010a 	add.w	r1, r7, #10
 8007c50:	4610      	mov	r0, r2
 8007c52:	4798      	blx	r3
 8007c54:	60f8      	str	r0, [r7, #12]
      break;
 8007c56:	e040      	b.n	8007cda <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	7c12      	ldrb	r2, [r2, #16]
 8007c64:	f107 010a 	add.w	r1, r7, #10
 8007c68:	4610      	mov	r0, r2
 8007c6a:	4798      	blx	r3
 8007c6c:	60f8      	str	r0, [r7, #12]
      break;
 8007c6e:	e034      	b.n	8007cda <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	7c12      	ldrb	r2, [r2, #16]
 8007c7c:	f107 010a 	add.w	r1, r7, #10
 8007c80:	4610      	mov	r0, r2
 8007c82:	4798      	blx	r3
 8007c84:	60f8      	str	r0, [r7, #12]
      break;
 8007c86:	e028      	b.n	8007cda <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	7c12      	ldrb	r2, [r2, #16]
 8007c94:	f107 010a 	add.w	r1, r7, #10
 8007c98:	4610      	mov	r0, r2
 8007c9a:	4798      	blx	r3
 8007c9c:	60f8      	str	r0, [r7, #12]
      break;
 8007c9e:	e01c      	b.n	8007cda <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007ca6:	695b      	ldr	r3, [r3, #20]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	7c12      	ldrb	r2, [r2, #16]
 8007cac:	f107 010a 	add.w	r1, r7, #10
 8007cb0:	4610      	mov	r0, r2
 8007cb2:	4798      	blx	r3
 8007cb4:	60f8      	str	r0, [r7, #12]
      break;
 8007cb6:	e010      	b.n	8007cda <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	7c12      	ldrb	r2, [r2, #16]
 8007cc4:	f107 010a 	add.w	r1, r7, #10
 8007cc8:	4610      	mov	r0, r2
 8007cca:	4798      	blx	r3
 8007ccc:	60f8      	str	r0, [r7, #12]
      break;
 8007cce:	e004      	b.n	8007cda <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f9fb 	bl	80080ce <USBD_CtlError>
      return;
 8007cd8:	e04b      	b.n	8007d72 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8007cda:	e02e      	b.n	8007d3a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	7c1b      	ldrb	r3, [r3, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d109      	bne.n	8007cf8 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cec:	f107 020a 	add.w	r2, r7, #10
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	4798      	blx	r3
 8007cf4:	60f8      	str	r0, [r7, #12]
      break;
 8007cf6:	e020      	b.n	8007d3a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007cf8:	6839      	ldr	r1, [r7, #0]
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f9e7 	bl	80080ce <USBD_CtlError>
      return;
 8007d00:	e037      	b.n	8007d72 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	7c1b      	ldrb	r3, [r3, #16]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10d      	bne.n	8007d26 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d12:	f107 020a 	add.w	r2, r7, #10
 8007d16:	4610      	mov	r0, r2
 8007d18:	4798      	blx	r3
 8007d1a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	2207      	movs	r2, #7
 8007d22:	701a      	strb	r2, [r3, #0]
      break;
 8007d24:	e009      	b.n	8007d3a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007d26:	6839      	ldr	r1, [r7, #0]
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f9d0 	bl	80080ce <USBD_CtlError>
      return;
 8007d2e:	e020      	b.n	8007d72 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f9cb 	bl	80080ce <USBD_CtlError>
    return;
 8007d38:	e01b      	b.n	8007d72 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8007d3a:	897b      	ldrh	r3, [r7, #10]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d011      	beq.n	8007d64 <USBD_GetDescriptor+0x1e0>
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	88db      	ldrh	r3, [r3, #6]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00d      	beq.n	8007d64 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	88da      	ldrh	r2, [r3, #6]
 8007d4c:	897b      	ldrh	r3, [r7, #10]
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	bf28      	it	cs
 8007d52:	4613      	movcs	r3, r2
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8007d58:	897b      	ldrh	r3, [r7, #10]
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	68f9      	ldr	r1, [r7, #12]
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fa1f 	bl	80081a2 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	88db      	ldrh	r3, [r3, #6]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d102      	bne.n	8007d72 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 fa76 	bl	800825e <USBD_CtlSendStatus>
  }
}
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	889b      	ldrh	r3, [r3, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d130      	bne.n	8007dec <USBD_SetAddress+0x74>
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	88db      	ldrh	r3, [r3, #6]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d12c      	bne.n	8007dec <USBD_SetAddress+0x74>
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	885b      	ldrh	r3, [r3, #2]
 8007d96:	2b7f      	cmp	r3, #127	; 0x7f
 8007d98:	d828      	bhi.n	8007dec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	885b      	ldrh	r3, [r3, #2]
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007da4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007dac:	2b03      	cmp	r3, #3
 8007dae:	d104      	bne.n	8007dba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007db0:	6839      	ldr	r1, [r7, #0]
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f98b 	bl	80080ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007db8:	e01d      	b.n	8007df6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	7bfa      	ldrb	r2, [r7, #15]
 8007dbe:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007dc2:	7bfb      	ldrb	r3, [r7, #15]
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f001 fb0c 	bl	80093e4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fa46 	bl	800825e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d004      	beq.n	8007de2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2202      	movs	r2, #2
 8007ddc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007de0:	e009      	b.n	8007df6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dea:	e004      	b.n	8007df6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f96d 	bl	80080ce <USBD_CtlError>
  }
}
 8007df4:	bf00      	nop
 8007df6:	bf00      	nop
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
	...

08007e00 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	885b      	ldrh	r3, [r3, #2]
 8007e0e:	b2da      	uxtb	r2, r3
 8007e10:	4b41      	ldr	r3, [pc, #260]	; (8007f18 <USBD_SetConfig+0x118>)
 8007e12:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e14:	4b40      	ldr	r3, [pc, #256]	; (8007f18 <USBD_SetConfig+0x118>)
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d904      	bls.n	8007e26 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f955 	bl	80080ce <USBD_CtlError>
 8007e24:	e075      	b.n	8007f12 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d002      	beq.n	8007e36 <USBD_SetConfig+0x36>
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	d023      	beq.n	8007e7c <USBD_SetConfig+0x7c>
 8007e34:	e062      	b.n	8007efc <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8007e36:	4b38      	ldr	r3, [pc, #224]	; (8007f18 <USBD_SetConfig+0x118>)
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d01a      	beq.n	8007e74 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8007e3e:	4b36      	ldr	r3, [pc, #216]	; (8007f18 <USBD_SetConfig+0x118>)
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	461a      	mov	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2203      	movs	r2, #3
 8007e4c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007e50:	4b31      	ldr	r3, [pc, #196]	; (8007f18 <USBD_SetConfig+0x118>)
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	4619      	mov	r1, r3
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f7ff fa5d 	bl	8007316 <USBD_SetClassConfig>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d104      	bne.n	8007e6c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8007e62:	6839      	ldr	r1, [r7, #0]
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 f932 	bl	80080ce <USBD_CtlError>
          return;
 8007e6a:	e052      	b.n	8007f12 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 f9f6 	bl	800825e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007e72:	e04e      	b.n	8007f12 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f9f2 	bl	800825e <USBD_CtlSendStatus>
      break;
 8007e7a:	e04a      	b.n	8007f12 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007e7c:	4b26      	ldr	r3, [pc, #152]	; (8007f18 <USBD_SetConfig+0x118>)
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d112      	bne.n	8007eaa <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2202      	movs	r2, #2
 8007e88:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007e8c:	4b22      	ldr	r3, [pc, #136]	; (8007f18 <USBD_SetConfig+0x118>)
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	461a      	mov	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007e96:	4b20      	ldr	r3, [pc, #128]	; (8007f18 <USBD_SetConfig+0x118>)
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f7ff fa59 	bl	8007354 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f9db 	bl	800825e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007ea8:	e033      	b.n	8007f12 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8007eaa:	4b1b      	ldr	r3, [pc, #108]	; (8007f18 <USBD_SetConfig+0x118>)
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	461a      	mov	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d01d      	beq.n	8007ef4 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f7ff fa47 	bl	8007354 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007ec6:	4b14      	ldr	r3, [pc, #80]	; (8007f18 <USBD_SetConfig+0x118>)
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007ed0:	4b11      	ldr	r3, [pc, #68]	; (8007f18 <USBD_SetConfig+0x118>)
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7ff fa1d 	bl	8007316 <USBD_SetClassConfig>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d104      	bne.n	8007eec <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007ee2:	6839      	ldr	r1, [r7, #0]
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f8f2 	bl	80080ce <USBD_CtlError>
          return;
 8007eea:	e012      	b.n	8007f12 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f9b6 	bl	800825e <USBD_CtlSendStatus>
      break;
 8007ef2:	e00e      	b.n	8007f12 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f9b2 	bl	800825e <USBD_CtlSendStatus>
      break;
 8007efa:	e00a      	b.n	8007f12 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007efc:	6839      	ldr	r1, [r7, #0]
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f8e5 	bl	80080ce <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007f04:	4b04      	ldr	r3, [pc, #16]	; (8007f18 <USBD_SetConfig+0x118>)
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	4619      	mov	r1, r3
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7ff fa22 	bl	8007354 <USBD_ClrClassConfig>
      break;
 8007f10:	bf00      	nop
    }
  }
}
 8007f12:	3708      	adds	r7, #8
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	20000418 	.word	0x20000418

08007f1c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	88db      	ldrh	r3, [r3, #6]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d004      	beq.n	8007f38 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8007f2e:	6839      	ldr	r1, [r7, #0]
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 f8cc 	bl	80080ce <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007f36:	e022      	b.n	8007f7e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	dc02      	bgt.n	8007f48 <USBD_GetConfig+0x2c>
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	dc03      	bgt.n	8007f4e <USBD_GetConfig+0x32>
 8007f46:	e015      	b.n	8007f74 <USBD_GetConfig+0x58>
 8007f48:	2b03      	cmp	r3, #3
 8007f4a:	d00b      	beq.n	8007f64 <USBD_GetConfig+0x48>
 8007f4c:	e012      	b.n	8007f74 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	3308      	adds	r3, #8
 8007f58:	2201      	movs	r2, #1
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 f920 	bl	80081a2 <USBD_CtlSendData>
      break;
 8007f62:	e00c      	b.n	8007f7e <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	3304      	adds	r3, #4
 8007f68:	2201      	movs	r2, #1
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f918 	bl	80081a2 <USBD_CtlSendData>
      break;
 8007f72:	e004      	b.n	8007f7e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 f8a9 	bl	80080ce <USBD_CtlError>
      break;
 8007f7c:	bf00      	nop
}
 8007f7e:	bf00      	nop
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b082      	sub	sp, #8
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
 8007f8e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007f96:	3b01      	subs	r3, #1
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d81e      	bhi.n	8007fda <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	88db      	ldrh	r3, [r3, #6]
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	d004      	beq.n	8007fae <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007fa4:	6839      	ldr	r1, [r7, #0]
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f891 	bl	80080ce <USBD_CtlError>
      break;
 8007fac:	e01a      	b.n	8007fe4 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d005      	beq.n	8007fca <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	f043 0202 	orr.w	r2, r3, #2
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	330c      	adds	r3, #12
 8007fce:	2202      	movs	r2, #2
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f8e5 	bl	80081a2 <USBD_CtlSendData>
    break;
 8007fd8:	e004      	b.n	8007fe4 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8007fda:	6839      	ldr	r1, [r7, #0]
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f876 	bl	80080ce <USBD_CtlError>
    break;
 8007fe2:	bf00      	nop
  }
}
 8007fe4:	bf00      	nop
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	885b      	ldrh	r3, [r3, #2]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d106      	bne.n	800800c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2201      	movs	r2, #1
 8008002:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f929 	bl	800825e <USBD_CtlSendStatus>
  }

}
 800800c:	bf00      	nop
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008024:	3b01      	subs	r3, #1
 8008026:	2b02      	cmp	r3, #2
 8008028:	d80b      	bhi.n	8008042 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	885b      	ldrh	r3, [r3, #2]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d10c      	bne.n	800804c <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f90f 	bl	800825e <USBD_CtlSendStatus>
    }
    break;
 8008040:	e004      	b.n	800804c <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f842 	bl	80080ce <USBD_CtlError>
    break;
 800804a:	e000      	b.n	800804e <USBD_ClrFeature+0x3a>
    break;
 800804c:	bf00      	nop
  }
}
 800804e:	bf00      	nop
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008056:	b480      	push	{r7}
 8008058:	b083      	sub	sp, #12
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	781a      	ldrb	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	785a      	ldrb	r2, [r3, #1]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	3302      	adds	r3, #2
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	b29a      	uxth	r2, r3
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	3303      	adds	r3, #3
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	b29b      	uxth	r3, r3
 8008080:	021b      	lsls	r3, r3, #8
 8008082:	b29b      	uxth	r3, r3
 8008084:	4413      	add	r3, r2
 8008086:	b29a      	uxth	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	3304      	adds	r3, #4
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	b29a      	uxth	r2, r3
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	3305      	adds	r3, #5
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	b29b      	uxth	r3, r3
 800809c:	021b      	lsls	r3, r3, #8
 800809e:	b29b      	uxth	r3, r3
 80080a0:	4413      	add	r3, r2
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	3306      	adds	r3, #6
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	3307      	adds	r3, #7
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	021b      	lsls	r3, r3, #8
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	4413      	add	r3, r2
 80080be:	b29a      	uxth	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	80da      	strh	r2, [r3, #6]

}
 80080c4:	bf00      	nop
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bc80      	pop	{r7}
 80080cc:	4770      	bx	lr

080080ce <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b082      	sub	sp, #8
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
 80080d6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 80080d8:	2180      	movs	r1, #128	; 0x80
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f001 f918 	bl	8009310 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80080e0:	2100      	movs	r1, #0
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f001 f914 	bl	8009310 <USBD_LL_StallEP>
}
 80080e8:	bf00      	nop
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80080fc:	2300      	movs	r3, #0
 80080fe:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d032      	beq.n	800816c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f000 f834 	bl	8008174 <USBD_GetLen>
 800810c:	4603      	mov	r3, r0
 800810e:	3301      	adds	r3, #1
 8008110:	b29b      	uxth	r3, r3
 8008112:	005b      	lsls	r3, r3, #1
 8008114:	b29a      	uxth	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800811a:	7dfb      	ldrb	r3, [r7, #23]
 800811c:	1c5a      	adds	r2, r3, #1
 800811e:	75fa      	strb	r2, [r7, #23]
 8008120:	461a      	mov	r2, r3
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	4413      	add	r3, r2
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	7812      	ldrb	r2, [r2, #0]
 800812a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800812c:	7dfb      	ldrb	r3, [r7, #23]
 800812e:	1c5a      	adds	r2, r3, #1
 8008130:	75fa      	strb	r2, [r7, #23]
 8008132:	461a      	mov	r2, r3
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	4413      	add	r3, r2
 8008138:	2203      	movs	r2, #3
 800813a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800813c:	e012      	b.n	8008164 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	1c5a      	adds	r2, r3, #1
 8008142:	60fa      	str	r2, [r7, #12]
 8008144:	7dfa      	ldrb	r2, [r7, #23]
 8008146:	1c51      	adds	r1, r2, #1
 8008148:	75f9      	strb	r1, [r7, #23]
 800814a:	4611      	mov	r1, r2
 800814c:	68ba      	ldr	r2, [r7, #8]
 800814e:	440a      	add	r2, r1
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008154:	7dfb      	ldrb	r3, [r7, #23]
 8008156:	1c5a      	adds	r2, r3, #1
 8008158:	75fa      	strb	r2, [r7, #23]
 800815a:	461a      	mov	r2, r3
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	4413      	add	r3, r2
 8008160:	2200      	movs	r2, #0
 8008162:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1e8      	bne.n	800813e <USBD_GetString+0x4e>
    }
  }
}
 800816c:	bf00      	nop
 800816e:	3718      	adds	r7, #24
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800817c:	2300      	movs	r3, #0
 800817e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8008180:	e005      	b.n	800818e <USBD_GetLen+0x1a>
    {
        len++;
 8008182:	7bfb      	ldrb	r3, [r7, #15]
 8008184:	3301      	adds	r3, #1
 8008186:	73fb      	strb	r3, [r7, #15]
        buf++;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	3301      	adds	r3, #1
 800818c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1f5      	bne.n	8008182 <USBD_GetLen+0xe>
    }

    return len;
 8008196:	7bfb      	ldrb	r3, [r7, #15]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	bc80      	pop	{r7}
 80081a0:	4770      	bx	lr

080081a2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b084      	sub	sp, #16
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	60f8      	str	r0, [r7, #12]
 80081aa:	60b9      	str	r1, [r7, #8]
 80081ac:	4613      	mov	r3, r2
 80081ae:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2202      	movs	r2, #2
 80081b4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80081b8:	88fa      	ldrh	r2, [r7, #6]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80081be:	88fa      	ldrh	r2, [r7, #6]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80081c4:	88fb      	ldrh	r3, [r7, #6]
 80081c6:	68ba      	ldr	r2, [r7, #8]
 80081c8:	2100      	movs	r1, #0
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f001 f929 	bl	8009422 <USBD_LL_Transmit>

  return USBD_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80081da:	b580      	push	{r7, lr}
 80081dc:	b084      	sub	sp, #16
 80081de:	af00      	add	r7, sp, #0
 80081e0:	60f8      	str	r0, [r7, #12]
 80081e2:	60b9      	str	r1, [r7, #8]
 80081e4:	4613      	mov	r3, r2
 80081e6:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80081e8:	88fb      	ldrh	r3, [r7, #6]
 80081ea:	68ba      	ldr	r2, [r7, #8]
 80081ec:	2100      	movs	r1, #0
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f001 f917 	bl	8009422 <USBD_LL_Transmit>

  return USBD_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b084      	sub	sp, #16
 8008202:	af00      	add	r7, sp, #0
 8008204:	60f8      	str	r0, [r7, #12]
 8008206:	60b9      	str	r1, [r7, #8]
 8008208:	4613      	mov	r3, r2
 800820a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2203      	movs	r2, #3
 8008210:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8008214:	88fa      	ldrh	r2, [r7, #6]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800821c:	88fa      	ldrh	r2, [r7, #6]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008224:	88fb      	ldrh	r3, [r7, #6]
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	2100      	movs	r1, #0
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f001 f91c 	bl	8009468 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b084      	sub	sp, #16
 800823e:	af00      	add	r7, sp, #0
 8008240:	60f8      	str	r0, [r7, #12]
 8008242:	60b9      	str	r1, [r7, #8]
 8008244:	4613      	mov	r3, r2
 8008246:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008248:	88fb      	ldrh	r3, [r7, #6]
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	2100      	movs	r1, #0
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f001 f90a 	bl	8009468 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b082      	sub	sp, #8
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2204      	movs	r2, #4
 800826a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800826e:	2300      	movs	r3, #0
 8008270:	2200      	movs	r2, #0
 8008272:	2100      	movs	r1, #0
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f001 f8d4 	bl	8009422 <USBD_LL_Transmit>

  return USBD_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2205      	movs	r2, #5
 8008290:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008294:	2300      	movs	r3, #0
 8008296:	2200      	movs	r2, #0
 8008298:	2100      	movs	r1, #0
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f001 f8e4 	bl	8009468 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
	...

080082ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80082b0:	2200      	movs	r2, #0
 80082b2:	4912      	ldr	r1, [pc, #72]	; (80082fc <MX_USB_DEVICE_Init+0x50>)
 80082b4:	4812      	ldr	r0, [pc, #72]	; (8008300 <MX_USB_DEVICE_Init+0x54>)
 80082b6:	f7fe ffd4 	bl	8007262 <USBD_Init>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d001      	beq.n	80082c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80082c0:	f7f8 fbf0 	bl	8000aa4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80082c4:	490f      	ldr	r1, [pc, #60]	; (8008304 <MX_USB_DEVICE_Init+0x58>)
 80082c6:	480e      	ldr	r0, [pc, #56]	; (8008300 <MX_USB_DEVICE_Init+0x54>)
 80082c8:	f7fe fff6 	bl	80072b8 <USBD_RegisterClass>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d001      	beq.n	80082d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80082d2:	f7f8 fbe7 	bl	8000aa4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80082d6:	490c      	ldr	r1, [pc, #48]	; (8008308 <MX_USB_DEVICE_Init+0x5c>)
 80082d8:	4809      	ldr	r0, [pc, #36]	; (8008300 <MX_USB_DEVICE_Init+0x54>)
 80082da:	f7fe ff27 	bl	800712c <USBD_CDC_RegisterInterface>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d001      	beq.n	80082e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80082e4:	f7f8 fbde 	bl	8000aa4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80082e8:	4805      	ldr	r0, [pc, #20]	; (8008300 <MX_USB_DEVICE_Init+0x54>)
 80082ea:	f7fe fffe 	bl	80072ea <USBD_Start>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d001      	beq.n	80082f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80082f4:	f7f8 fbd6 	bl	8000aa4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80082f8:	bf00      	nop
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	20000290 	.word	0x20000290
 8008300:	2000041c 	.word	0x2000041c
 8008304:	2000017c 	.word	0x2000017c
 8008308:	20000280 	.word	0x20000280

0800830c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008310:	2200      	movs	r2, #0
 8008312:	4905      	ldr	r1, [pc, #20]	; (8008328 <CDC_Init_FS+0x1c>)
 8008314:	4805      	ldr	r0, [pc, #20]	; (800832c <CDC_Init_FS+0x20>)
 8008316:	f7fe ff1f 	bl	8007158 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800831a:	4905      	ldr	r1, [pc, #20]	; (8008330 <CDC_Init_FS+0x24>)
 800831c:	4803      	ldr	r0, [pc, #12]	; (800832c <CDC_Init_FS+0x20>)
 800831e:	f7fe ff34 	bl	800718a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008322:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008324:	4618      	mov	r0, r3
 8008326:	bd80      	pop	{r7, pc}
 8008328:	20000f88 	.word	0x20000f88
 800832c:	2000041c 	.word	0x2000041c
 8008330:	20000788 	.word	0x20000788

08008334 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008334:	b480      	push	{r7}
 8008336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008338:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800833a:	4618      	mov	r0, r3
 800833c:	46bd      	mov	sp, r7
 800833e:	bc80      	pop	{r7}
 8008340:	4770      	bx	lr
	...

08008344 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	4603      	mov	r3, r0
 800834c:	6039      	str	r1, [r7, #0]
 800834e:	71fb      	strb	r3, [r7, #7]
 8008350:	4613      	mov	r3, r2
 8008352:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008354:	79fb      	ldrb	r3, [r7, #7]
 8008356:	2b23      	cmp	r3, #35	; 0x23
 8008358:	d84a      	bhi.n	80083f0 <CDC_Control_FS+0xac>
 800835a:	a201      	add	r2, pc, #4	; (adr r2, 8008360 <CDC_Control_FS+0x1c>)
 800835c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008360:	080083f1 	.word	0x080083f1
 8008364:	080083f1 	.word	0x080083f1
 8008368:	080083f1 	.word	0x080083f1
 800836c:	080083f1 	.word	0x080083f1
 8008370:	080083f1 	.word	0x080083f1
 8008374:	080083f1 	.word	0x080083f1
 8008378:	080083f1 	.word	0x080083f1
 800837c:	080083f1 	.word	0x080083f1
 8008380:	080083f1 	.word	0x080083f1
 8008384:	080083f1 	.word	0x080083f1
 8008388:	080083f1 	.word	0x080083f1
 800838c:	080083f1 	.word	0x080083f1
 8008390:	080083f1 	.word	0x080083f1
 8008394:	080083f1 	.word	0x080083f1
 8008398:	080083f1 	.word	0x080083f1
 800839c:	080083f1 	.word	0x080083f1
 80083a0:	080083f1 	.word	0x080083f1
 80083a4:	080083f1 	.word	0x080083f1
 80083a8:	080083f1 	.word	0x080083f1
 80083ac:	080083f1 	.word	0x080083f1
 80083b0:	080083f1 	.word	0x080083f1
 80083b4:	080083f1 	.word	0x080083f1
 80083b8:	080083f1 	.word	0x080083f1
 80083bc:	080083f1 	.word	0x080083f1
 80083c0:	080083f1 	.word	0x080083f1
 80083c4:	080083f1 	.word	0x080083f1
 80083c8:	080083f1 	.word	0x080083f1
 80083cc:	080083f1 	.word	0x080083f1
 80083d0:	080083f1 	.word	0x080083f1
 80083d4:	080083f1 	.word	0x080083f1
 80083d8:	080083f1 	.word	0x080083f1
 80083dc:	080083f1 	.word	0x080083f1
 80083e0:	080083f1 	.word	0x080083f1
 80083e4:	080083f1 	.word	0x080083f1
 80083e8:	080083f1 	.word	0x080083f1
 80083ec:	080083f1 	.word	0x080083f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80083f0:	bf00      	nop
  }

  return (USBD_OK);
 80083f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bc80      	pop	{r7}
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop

08008400 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	// Copy the received data to the buffer
	for (int i = 0; i < *Len; i++)
 800840a:	2300      	movs	r3, #0
 800840c:	60fb      	str	r3, [r7, #12]
 800840e:	e013      	b.n	8008438 <CDC_Receive_FS+0x38>
	{
	if (rx_buffer_len < MAX_RX_BUFFER_SIZE)
 8008410:	4b22      	ldr	r3, [pc, #136]	; (800849c <CDC_Receive_FS+0x9c>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2b63      	cmp	r3, #99	; 0x63
 8008416:	d80c      	bhi.n	8008432 <CDC_Receive_FS+0x32>
	{
	  rx_buffer[rx_buffer_len] = Buf[i];
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	441a      	add	r2, r3
 800841e:	4b1f      	ldr	r3, [pc, #124]	; (800849c <CDC_Receive_FS+0x9c>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	7811      	ldrb	r1, [r2, #0]
 8008424:	4a1e      	ldr	r2, [pc, #120]	; (80084a0 <CDC_Receive_FS+0xa0>)
 8008426:	54d1      	strb	r1, [r2, r3]
	  rx_buffer_len = rx_buffer_len + 1;
 8008428:	4b1c      	ldr	r3, [pc, #112]	; (800849c <CDC_Receive_FS+0x9c>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	3301      	adds	r3, #1
 800842e:	4a1b      	ldr	r2, [pc, #108]	; (800849c <CDC_Receive_FS+0x9c>)
 8008430:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < *Len; i++)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	3301      	adds	r3, #1
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	429a      	cmp	r2, r3
 8008440:	d8e6      	bhi.n	8008410 <CDC_Receive_FS+0x10>
	  // The receive buffer is full, discard the received data
	}
	}

	// Check if a complete message has been received
	if (rx_buffer_len > 0 && rx_buffer[rx_buffer_len - 1] == '\n')
 8008442:	4b16      	ldr	r3, [pc, #88]	; (800849c <CDC_Receive_FS+0x9c>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d01b      	beq.n	8008482 <CDC_Receive_FS+0x82>
 800844a:	4b14      	ldr	r3, [pc, #80]	; (800849c <CDC_Receive_FS+0x9c>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	3b01      	subs	r3, #1
 8008450:	4a13      	ldr	r2, [pc, #76]	; (80084a0 <CDC_Receive_FS+0xa0>)
 8008452:	5cd3      	ldrb	r3, [r2, r3]
 8008454:	2b0a      	cmp	r3, #10
 8008456:	d114      	bne.n	8008482 <CDC_Receive_FS+0x82>
	{
		// Process the received message
		memcpy(User_Input_Buffer, rx_buffer, rx_buffer_len);
 8008458:	4b10      	ldr	r3, [pc, #64]	; (800849c <CDC_Receive_FS+0x9c>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	461a      	mov	r2, r3
 800845e:	4910      	ldr	r1, [pc, #64]	; (80084a0 <CDC_Receive_FS+0xa0>)
 8008460:	4810      	ldr	r0, [pc, #64]	; (80084a4 <CDC_Receive_FS+0xa4>)
 8008462:	f001 f8a3 	bl	80095ac <memcpy>
		User_Input_Buffer_Len = rx_buffer_len;
 8008466:	4b0d      	ldr	r3, [pc, #52]	; (800849c <CDC_Receive_FS+0x9c>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	b2da      	uxtb	r2, r3
 800846c:	4b0e      	ldr	r3, [pc, #56]	; (80084a8 <CDC_Receive_FS+0xa8>)
 800846e:	701a      	strb	r2, [r3, #0]
		Process_Received_Message(rx_buffer, rx_buffer_len);
 8008470:	4b0a      	ldr	r3, [pc, #40]	; (800849c <CDC_Receive_FS+0x9c>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4619      	mov	r1, r3
 8008476:	480a      	ldr	r0, [pc, #40]	; (80084a0 <CDC_Receive_FS+0xa0>)
 8008478:	f000 f840 	bl	80084fc <Process_Received_Message>
		// Clear the receive buffer
		rx_buffer_len = 0;
 800847c:	4b07      	ldr	r3, [pc, #28]	; (800849c <CDC_Receive_FS+0x9c>)
 800847e:	2200      	movs	r2, #0
 8008480:	601a      	str	r2, [r3, #0]
	}

	// Set up the USB device to receive a new packet
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008482:	6879      	ldr	r1, [r7, #4]
 8008484:	4809      	ldr	r0, [pc, #36]	; (80084ac <CDC_Receive_FS+0xac>)
 8008486:	f7fe fe80 	bl	800718a <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800848a:	4808      	ldr	r0, [pc, #32]	; (80084ac <CDC_Receive_FS+0xac>)
 800848c:	f7fe febf 	bl	800720e <USBD_CDC_ReceivePacket>

	return (USBD_OK);
 8008490:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	2000071c 	.word	0x2000071c
 80084a0:	200006b8 	.word	0x200006b8
 80084a4:	20000720 	.word	0x20000720
 80084a8:	20000784 	.word	0x20000784
 80084ac:	2000041c 	.word	0x2000041c

080084b0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	460b      	mov	r3, r1
 80084ba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80084bc:	2300      	movs	r3, #0
 80084be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80084c0:	4b0d      	ldr	r3, [pc, #52]	; (80084f8 <CDC_Transmit_FS+0x48>)
 80084c2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80084c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d001      	beq.n	80084d6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e00b      	b.n	80084ee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80084d6:	887b      	ldrh	r3, [r7, #2]
 80084d8:	461a      	mov	r2, r3
 80084da:	6879      	ldr	r1, [r7, #4]
 80084dc:	4806      	ldr	r0, [pc, #24]	; (80084f8 <CDC_Transmit_FS+0x48>)
 80084de:	f7fe fe3b 	bl	8007158 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80084e2:	4805      	ldr	r0, [pc, #20]	; (80084f8 <CDC_Transmit_FS+0x48>)
 80084e4:	f7fe fe64 	bl	80071b0 <USBD_CDC_TransmitPacket>
 80084e8:	4603      	mov	r3, r0
 80084ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	2000041c 	.word	0x2000041c

080084fc <Process_Received_Message>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t Process_Received_Message(uint8_t* rx_buffer, uint32_t rx_buffer_len)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	f5ad 6dc0 	sub.w	sp, sp, #1536	; 0x600
 8008502:	af04      	add	r7, sp, #16
 8008504:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8008508:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 800850c:	6018      	str	r0, [r3, #0]
 800850e:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8008512:	f5a3 63be 	sub.w	r3, r3, #1520	; 0x5f0
 8008516:	6019      	str	r1, [r3, #0]
	char str5[100];
	char* Token;
	uint8_t Register_Address;
	uint8_t Register_Value;

	if(strncmp((char*) rx_buffer, "Start", strlen("Start")) == 0)
 8008518:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800851c:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8008520:	2205      	movs	r2, #5
 8008522:	49d0      	ldr	r1, [pc, #832]	; (8008864 <Process_Received_Message+0x368>)
 8008524:	6818      	ldr	r0, [r3, #0]
 8008526:	f001 f877 	bl	8009618 <strncmp>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d129      	bne.n	8008584 <Process_Received_Message+0x88>
	{
		sprintf(str1, "User Input: Start\r\n");
 8008530:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8008534:	49cc      	ldr	r1, [pc, #816]	; (8008868 <Process_Received_Message+0x36c>)
 8008536:	4618      	mov	r0, r3
 8008538:	f001 f84e 	bl	80095d8 <siprintf>
		sprintf(str2, "Initialized the CC1200 for Operation\r\n");
 800853c:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8008540:	49ca      	ldr	r1, [pc, #808]	; (800886c <Process_Received_Message+0x370>)
 8008542:	4618      	mov	r0, r3
 8008544:	f001 f848 	bl	80095d8 <siprintf>
		CC1200_Init(&SPI_Info, MISO_Data, GPIOB, GPIO_PIN_6, &hspi1);
 8008548:	4bc9      	ldr	r3, [pc, #804]	; (8008870 <Process_Received_Message+0x374>)
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	2340      	movs	r3, #64	; 0x40
 800854e:	4ac9      	ldr	r2, [pc, #804]	; (8008874 <Process_Received_Message+0x378>)
 8008550:	49c9      	ldr	r1, [pc, #804]	; (8008878 <Process_Received_Message+0x37c>)
 8008552:	48ca      	ldr	r0, [pc, #808]	; (800887c <Process_Received_Message+0x380>)
 8008554:	f7f7 ff96 	bl	8000484 <CC1200_Init>
		Message_Length = sprintf(Message, "%s%s", str1, str2);
 8008558:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800855c:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8008560:	f507 70fe 	add.w	r0, r7, #508	; 0x1fc
 8008564:	49c6      	ldr	r1, [pc, #792]	; (8008880 <Process_Received_Message+0x384>)
 8008566:	f001 f837 	bl	80095d8 <siprintf>
 800856a:	4603      	mov	r3, r0
 800856c:	f8a7 35e8 	strh.w	r3, [r7, #1512]	; 0x5e8
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008570:	f8b7 25e8 	ldrh.w	r2, [r7, #1512]	; 0x5e8
 8008574:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8008578:	4611      	mov	r1, r2
 800857a:	4618      	mov	r0, r3
 800857c:	f7ff ff98 	bl	80084b0 <CDC_Transmit_FS>
 8008580:	f000 bc05 	b.w	8008d8e <Process_Received_Message+0x892>
	}
	else if (strncmp((char*) rx_buffer, "Configure:", strlen("Configure:")) == 0)
 8008584:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8008588:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 800858c:	220a      	movs	r2, #10
 800858e:	49bd      	ldr	r1, [pc, #756]	; (8008884 <Process_Received_Message+0x388>)
 8008590:	6818      	ldr	r0, [r3, #0]
 8008592:	f001 f841 	bl	8009618 <strncmp>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d147      	bne.n	800862c <Process_Received_Message+0x130>
	{
		sprintf(str1, "User Input: Configure\r\n");
 800859c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80085a0:	49b9      	ldr	r1, [pc, #740]	; (8008888 <Process_Received_Message+0x38c>)
 80085a2:	4618      	mov	r0, r3
 80085a4:	f001 f818 	bl	80095d8 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Configure:"
 80085a8:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 80085ac:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 80085b0:	49b6      	ldr	r1, [pc, #728]	; (800888c <Process_Received_Message+0x390>)
 80085b2:	6818      	ldr	r0, [r3, #0]
 80085b4:	f001 f844 	bl	8009640 <strtok>
 80085b8:	f8c7 05ec 	str.w	r0, [r7, #1516]	; 0x5ec
		Token = strtok(NULL, "\r\n"); // second token "[mode]"
 80085bc:	49b4      	ldr	r1, [pc, #720]	; (8008890 <Process_Received_Message+0x394>)
 80085be:	2000      	movs	r0, #0
 80085c0:	f001 f83e 	bl	8009640 <strtok>
 80085c4:	f8c7 05ec 	str.w	r0, [r7, #1516]	; 0x5ec
		if (strncmp(Token, "Default", strlen("Default")) == 0)
 80085c8:	2207      	movs	r2, #7
 80085ca:	49b2      	ldr	r1, [pc, #712]	; (8008894 <Process_Received_Message+0x398>)
 80085cc:	f8d7 05ec 	ldr.w	r0, [r7, #1516]	; 0x5ec
 80085d0:	f001 f822 	bl	8009618 <strncmp>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d10b      	bne.n	80085f2 <Process_Received_Message+0xf6>
		{
			sprintf(str2, "Configured the CC1200 with Default Register Settings\r\n");
 80085da:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80085de:	49ae      	ldr	r1, [pc, #696]	; (8008898 <Process_Received_Message+0x39c>)
 80085e0:	4618      	mov	r0, r3
 80085e2:	f000 fff9 	bl	80095d8 <siprintf>
			CC1200_Configure(&SPI_Info, Preferred_Register_Settings, Preferred_Extended_Register_Settings);
 80085e6:	4aad      	ldr	r2, [pc, #692]	; (800889c <Process_Received_Message+0x3a0>)
 80085e8:	49ad      	ldr	r1, [pc, #692]	; (80088a0 <Process_Received_Message+0x3a4>)
 80085ea:	48a4      	ldr	r0, [pc, #656]	; (800887c <Process_Received_Message+0x380>)
 80085ec:	f7f7 ff69 	bl	80004c2 <CC1200_Configure>
 80085f0:	e007      	b.n	8008602 <Process_Received_Message+0x106>
		}
		else
		{
			sprintf(str2, "Invalid Mode: %s\r\n", Token);
 80085f2:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80085f6:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 80085fa:	49aa      	ldr	r1, [pc, #680]	; (80088a4 <Process_Received_Message+0x3a8>)
 80085fc:	4618      	mov	r0, r3
 80085fe:	f000 ffeb 	bl	80095d8 <siprintf>
		}
		Message_Length = sprintf(Message, "%s%s", str1, str2);
 8008602:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8008606:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 800860a:	f507 70fe 	add.w	r0, r7, #508	; 0x1fc
 800860e:	499c      	ldr	r1, [pc, #624]	; (8008880 <Process_Received_Message+0x384>)
 8008610:	f000 ffe2 	bl	80095d8 <siprintf>
 8008614:	4603      	mov	r3, r0
 8008616:	f8a7 35e8 	strh.w	r3, [r7, #1512]	; 0x5e8
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 800861a:	f8b7 25e8 	ldrh.w	r2, [r7, #1512]	; 0x5e8
 800861e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8008622:	4611      	mov	r1, r2
 8008624:	4618      	mov	r0, r3
 8008626:	f7ff ff43 	bl	80084b0 <CDC_Transmit_FS>
 800862a:	e3b0      	b.n	8008d8e <Process_Received_Message+0x892>
	}
	else if (strncmp((char*) rx_buffer, "Transmit:", strlen("Transmit:")) == 0)
 800862c:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8008630:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8008634:	2209      	movs	r2, #9
 8008636:	499c      	ldr	r1, [pc, #624]	; (80088a8 <Process_Received_Message+0x3ac>)
 8008638:	6818      	ldr	r0, [r3, #0]
 800863a:	f000 ffed 	bl	8009618 <strncmp>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d145      	bne.n	80086d0 <Process_Received_Message+0x1d4>
	{
		sprintf(str1, "User Input: Transmit\r\n");
 8008644:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8008648:	4998      	ldr	r1, [pc, #608]	; (80088ac <Process_Received_Message+0x3b0>)
 800864a:	4618      	mov	r0, r3
 800864c:	f000 ffc4 	bl	80095d8 <siprintf>
		sprintf(str2, "Set the CC1200 into Transmit Mode\r\n");
 8008650:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8008654:	4996      	ldr	r1, [pc, #600]	; (80088b0 <Process_Received_Message+0x3b4>)
 8008656:	4618      	mov	r0, r3
 8008658:	f000 ffbe 	bl	80095d8 <siprintf>
		sprintf(str3, "Transmitted the Following Message: ");
 800865c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8008660:	4994      	ldr	r1, [pc, #592]	; (80088b4 <Process_Received_Message+0x3b8>)
 8008662:	4618      	mov	r0, r3
 8008664:	f000 ffb8 	bl	80095d8 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Transmit:"
 8008668:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800866c:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8008670:	4986      	ldr	r1, [pc, #536]	; (800888c <Process_Received_Message+0x390>)
 8008672:	6818      	ldr	r0, [r3, #0]
 8008674:	f000 ffe4 	bl	8009640 <strtok>
 8008678:	f8c7 05ec 	str.w	r0, [r7, #1516]	; 0x5ec
		Token = strtok(NULL, "\r\n"); // second token "[message to send]"
 800867c:	4984      	ldr	r1, [pc, #528]	; (8008890 <Process_Received_Message+0x394>)
 800867e:	2000      	movs	r0, #0
 8008680:	f000 ffde 	bl	8009640 <strtok>
 8008684:	f8c7 05ec 	str.w	r0, [r7, #1516]	; 0x5ec
		sprintf(str4, "%s\r\n", Token);
 8008688:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800868c:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 8008690:	4989      	ldr	r1, [pc, #548]	; (80088b8 <Process_Received_Message+0x3bc>)
 8008692:	4618      	mov	r0, r3
 8008694:	f000 ffa0 	bl	80095d8 <siprintf>
		Message_Length = sprintf(Message, "%s%s%s%s", str1, str2, str3, str4);
 8008698:	f507 719a 	add.w	r1, r7, #308	; 0x134
 800869c:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80086a0:	f507 70fe 	add.w	r0, r7, #508	; 0x1fc
 80086a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80086a8:	9301      	str	r3, [sp, #4]
 80086aa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	460b      	mov	r3, r1
 80086b2:	4982      	ldr	r1, [pc, #520]	; (80088bc <Process_Received_Message+0x3c0>)
 80086b4:	f000 ff90 	bl	80095d8 <siprintf>
 80086b8:	4603      	mov	r3, r0
 80086ba:	f8a7 35e8 	strh.w	r3, [r7, #1512]	; 0x5e8
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 80086be:	f8b7 25e8 	ldrh.w	r2, [r7, #1512]	; 0x5e8
 80086c2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80086c6:	4611      	mov	r1, r2
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7ff fef1 	bl	80084b0 <CDC_Transmit_FS>
 80086ce:	e35e      	b.n	8008d8e <Process_Received_Message+0x892>
	}
	else if (strncmp((char*) rx_buffer, "Receive", strlen("Receive")) == 0)
 80086d0:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 80086d4:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 80086d8:	2207      	movs	r2, #7
 80086da:	4979      	ldr	r1, [pc, #484]	; (80088c0 <Process_Received_Message+0x3c4>)
 80086dc:	6818      	ldr	r0, [r3, #0]
 80086de:	f000 ff9b 	bl	8009618 <strncmp>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d12a      	bne.n	800873e <Process_Received_Message+0x242>
	{
		sprintf(str1, "User Input: Receive\r\n");
 80086e8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80086ec:	4975      	ldr	r1, [pc, #468]	; (80088c4 <Process_Received_Message+0x3c8>)
 80086ee:	4618      	mov	r0, r3
 80086f0:	f000 ff72 	bl	80095d8 <siprintf>
		sprintf(str2, "Set the CC1200 into Receive Mode\r\n");
 80086f4:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80086f8:	4973      	ldr	r1, [pc, #460]	; (80088c8 <Process_Received_Message+0x3cc>)
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 ff6c 	bl	80095d8 <siprintf>
		sprintf(str3, "Received the Following Message: \r\n");
 8008700:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8008704:	4971      	ldr	r1, [pc, #452]	; (80088cc <Process_Received_Message+0x3d0>)
 8008706:	4618      	mov	r0, r3
 8008708:	f000 ff66 	bl	80095d8 <siprintf>
		Message_Length = sprintf(Message, "%s%s%s", str1, str2, str3);
 800870c:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8008710:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8008714:	f507 70fe 	add.w	r0, r7, #508	; 0x1fc
 8008718:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	460b      	mov	r3, r1
 8008720:	496b      	ldr	r1, [pc, #428]	; (80088d0 <Process_Received_Message+0x3d4>)
 8008722:	f000 ff59 	bl	80095d8 <siprintf>
 8008726:	4603      	mov	r3, r0
 8008728:	f8a7 35e8 	strh.w	r3, [r7, #1512]	; 0x5e8
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 800872c:	f8b7 25e8 	ldrh.w	r2, [r7, #1512]	; 0x5e8
 8008730:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8008734:	4611      	mov	r1, r2
 8008736:	4618      	mov	r0, r3
 8008738:	f7ff feba 	bl	80084b0 <CDC_Transmit_FS>
 800873c:	e327      	b.n	8008d8e <Process_Received_Message+0x892>
	}
	else if (strncmp((char*) rx_buffer, "Command:", strlen("Command:")) == 0)
 800873e:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8008742:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8008746:	2208      	movs	r2, #8
 8008748:	4962      	ldr	r1, [pc, #392]	; (80088d4 <Process_Received_Message+0x3d8>)
 800874a:	6818      	ldr	r0, [r3, #0]
 800874c:	f000 ff64 	bl	8009618 <strncmp>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d14e      	bne.n	80087f4 <Process_Received_Message+0x2f8>
	{
		sprintf(str1, "User Input: Command\r\n");
 8008756:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800875a:	495f      	ldr	r1, [pc, #380]	; (80088d8 <Process_Received_Message+0x3dc>)
 800875c:	4618      	mov	r0, r3
 800875e:	f000 ff3b 	bl	80095d8 <siprintf>
		sprintf(str2, "Issued the Following Command: ");
 8008762:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8008766:	495d      	ldr	r1, [pc, #372]	; (80088dc <Process_Received_Message+0x3e0>)
 8008768:	4618      	mov	r0, r3
 800876a:	f000 ff35 	bl	80095d8 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Command:"
 800876e:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8008772:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8008776:	4945      	ldr	r1, [pc, #276]	; (800888c <Process_Received_Message+0x390>)
 8008778:	6818      	ldr	r0, [r3, #0]
 800877a:	f000 ff61 	bl	8009640 <strtok>
 800877e:	f8c7 05ec 	str.w	r0, [r7, #1516]	; 0x5ec
		Token = strtok(NULL, "\r\n"); // second token "[command strobe]"
 8008782:	4943      	ldr	r1, [pc, #268]	; (8008890 <Process_Received_Message+0x394>)
 8008784:	2000      	movs	r0, #0
 8008786:	f000 ff5b 	bl	8009640 <strtok>
 800878a:	f8c7 05ec 	str.w	r0, [r7, #1516]	; 0x5ec
		sprintf(str3, "%s\r\n", Token);
 800878e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8008792:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 8008796:	4948      	ldr	r1, [pc, #288]	; (80088b8 <Process_Received_Message+0x3bc>)
 8008798:	4618      	mov	r0, r3
 800879a:	f000 ff1d 	bl	80095d8 <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 800879e:	2210      	movs	r2, #16
 80087a0:	2100      	movs	r1, #0
 80087a2:	f8d7 05ec 	ldr.w	r0, [r7, #1516]	; 0x5ec
 80087a6:	f001 f823 	bl	80097f0 <strtol>
 80087aa:	4603      	mov	r3, r0
 80087ac:	f887 35eb 	strb.w	r3, [r7, #1515]	; 0x5eb
		CC1200_Command_Strobe(&SPI_Info, Register_Address);
 80087b0:	f897 35eb 	ldrb.w	r3, [r7, #1515]	; 0x5eb
 80087b4:	4619      	mov	r1, r3
 80087b6:	4831      	ldr	r0, [pc, #196]	; (800887c <Process_Received_Message+0x380>)
 80087b8:	f7f8 f80d 	bl	80007d6 <CC1200_Command_Strobe>
		Message_Length = sprintf(Message, "%s%s%s%s", str1, str2, str3, str4);
 80087bc:	f507 719a 	add.w	r1, r7, #308	; 0x134
 80087c0:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80087c4:	f507 70fe 	add.w	r0, r7, #508	; 0x1fc
 80087c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80087cc:	9301      	str	r3, [sp, #4]
 80087ce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	460b      	mov	r3, r1
 80087d6:	4939      	ldr	r1, [pc, #228]	; (80088bc <Process_Received_Message+0x3c0>)
 80087d8:	f000 fefe 	bl	80095d8 <siprintf>
 80087dc:	4603      	mov	r3, r0
 80087de:	f8a7 35e8 	strh.w	r3, [r7, #1512]	; 0x5e8
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 80087e2:	f8b7 25e8 	ldrh.w	r2, [r7, #1512]	; 0x5e8
 80087e6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80087ea:	4611      	mov	r1, r2
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7ff fe5f 	bl	80084b0 <CDC_Transmit_FS>
 80087f2:	e2cc      	b.n	8008d8e <Process_Received_Message+0x892>
	}
	else if (strncmp((char*) rx_buffer, "Exit", strlen("Exit")) == 0)
 80087f4:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 80087f8:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 80087fc:	2204      	movs	r2, #4
 80087fe:	4938      	ldr	r1, [pc, #224]	; (80088e0 <Process_Received_Message+0x3e4>)
 8008800:	6818      	ldr	r0, [r3, #0]
 8008802:	f000 ff09 	bl	8009618 <strncmp>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d171      	bne.n	80088f0 <Process_Received_Message+0x3f4>
	{
		sprintf(str1, "User Input: Exit\r\n");
 800880c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8008810:	4934      	ldr	r1, [pc, #208]	; (80088e4 <Process_Received_Message+0x3e8>)
 8008812:	4618      	mov	r0, r3
 8008814:	f000 fee0 	bl	80095d8 <siprintf>
		sprintf(str2, "Set the CC1200 into IDLE Mode\r\n");
 8008818:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800881c:	4932      	ldr	r1, [pc, #200]	; (80088e8 <Process_Received_Message+0x3ec>)
 800881e:	4618      	mov	r0, r3
 8008820:	f000 feda 	bl	80095d8 <siprintf>
		sprintf(str3, "Register Values Can Be Changed\r\n");
 8008824:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8008828:	4930      	ldr	r1, [pc, #192]	; (80088ec <Process_Received_Message+0x3f0>)
 800882a:	4618      	mov	r0, r3
 800882c:	f000 fed4 	bl	80095d8 <siprintf>
		Message_Length = sprintf(Message, "%s%s%s", str1, str2, str3);
 8008830:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8008834:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8008838:	f507 70fe 	add.w	r0, r7, #508	; 0x1fc
 800883c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8008840:	9300      	str	r3, [sp, #0]
 8008842:	460b      	mov	r3, r1
 8008844:	4922      	ldr	r1, [pc, #136]	; (80088d0 <Process_Received_Message+0x3d4>)
 8008846:	f000 fec7 	bl	80095d8 <siprintf>
 800884a:	4603      	mov	r3, r0
 800884c:	f8a7 35e8 	strh.w	r3, [r7, #1512]	; 0x5e8
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008850:	f8b7 25e8 	ldrh.w	r2, [r7, #1512]	; 0x5e8
 8008854:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8008858:	4611      	mov	r1, r2
 800885a:	4618      	mov	r0, r3
 800885c:	f7ff fe28 	bl	80084b0 <CDC_Transmit_FS>
 8008860:	e295      	b.n	8008d8e <Process_Received_Message+0x892>
 8008862:	bf00      	nop
 8008864:	0800ab78 	.word	0x0800ab78
 8008868:	0800ab80 	.word	0x0800ab80
 800886c:	0800ab94 	.word	0x0800ab94
 8008870:	20000360 	.word	0x20000360
 8008874:	40020400 	.word	0x40020400
 8008878:	2000040c 	.word	0x2000040c
 800887c:	200003fc 	.word	0x200003fc
 8008880:	0800abbc 	.word	0x0800abbc
 8008884:	0800abc4 	.word	0x0800abc4
 8008888:	0800abd0 	.word	0x0800abd0
 800888c:	0800abe8 	.word	0x0800abe8
 8008890:	0800abec 	.word	0x0800abec
 8008894:	0800abf0 	.word	0x0800abf0
 8008898:	0800abf8 	.word	0x0800abf8
 800889c:	20000060 	.word	0x20000060
 80088a0:	20000000 	.word	0x20000000
 80088a4:	0800ac30 	.word	0x0800ac30
 80088a8:	0800ac44 	.word	0x0800ac44
 80088ac:	0800ac50 	.word	0x0800ac50
 80088b0:	0800ac68 	.word	0x0800ac68
 80088b4:	0800ac8c 	.word	0x0800ac8c
 80088b8:	0800acb0 	.word	0x0800acb0
 80088bc:	0800acb8 	.word	0x0800acb8
 80088c0:	0800acc4 	.word	0x0800acc4
 80088c4:	0800accc 	.word	0x0800accc
 80088c8:	0800ace4 	.word	0x0800ace4
 80088cc:	0800ad08 	.word	0x0800ad08
 80088d0:	0800ad2c 	.word	0x0800ad2c
 80088d4:	0800ad34 	.word	0x0800ad34
 80088d8:	0800ad40 	.word	0x0800ad40
 80088dc:	0800ad58 	.word	0x0800ad58
 80088e0:	0800ad78 	.word	0x0800ad78
 80088e4:	0800ad80 	.word	0x0800ad80
 80088e8:	0800ad94 	.word	0x0800ad94
 80088ec:	0800adb4 	.word	0x0800adb4
	}
	else if (strncmp((char*) rx_buffer, "Reset", strlen("Reset")) == 0)
 80088f0:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 80088f4:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 80088f8:	2205      	movs	r2, #5
 80088fa:	49d3      	ldr	r1, [pc, #844]	; (8008c48 <Process_Received_Message+0x74c>)
 80088fc:	6818      	ldr	r0, [r3, #0]
 80088fe:	f000 fe8b 	bl	8009618 <strncmp>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d12a      	bne.n	800895e <Process_Received_Message+0x462>
	{
		sprintf(str1, "User Input: Reset\r\n");
 8008908:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800890c:	49cf      	ldr	r1, [pc, #828]	; (8008c4c <Process_Received_Message+0x750>)
 800890e:	4618      	mov	r0, r3
 8008910:	f000 fe62 	bl	80095d8 <siprintf>
		sprintf(str2, "Set the CC1200 into IDLE Mode\r\n");
 8008914:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8008918:	49cd      	ldr	r1, [pc, #820]	; (8008c50 <Process_Received_Message+0x754>)
 800891a:	4618      	mov	r0, r3
 800891c:	f000 fe5c 	bl	80095d8 <siprintf>
		sprintf(str3, "Register Values Reset to Default Values\r\n");
 8008920:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8008924:	49cb      	ldr	r1, [pc, #812]	; (8008c54 <Process_Received_Message+0x758>)
 8008926:	4618      	mov	r0, r3
 8008928:	f000 fe56 	bl	80095d8 <siprintf>
		Message_Length = sprintf(Message, "%s%s%s", str1, str2, str3);
 800892c:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8008930:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8008934:	f507 70fe 	add.w	r0, r7, #508	; 0x1fc
 8008938:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	460b      	mov	r3, r1
 8008940:	49c5      	ldr	r1, [pc, #788]	; (8008c58 <Process_Received_Message+0x75c>)
 8008942:	f000 fe49 	bl	80095d8 <siprintf>
 8008946:	4603      	mov	r3, r0
 8008948:	f8a7 35e8 	strh.w	r3, [r7, #1512]	; 0x5e8
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 800894c:	f8b7 25e8 	ldrh.w	r2, [r7, #1512]	; 0x5e8
 8008950:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8008954:	4611      	mov	r1, r2
 8008956:	4618      	mov	r0, r3
 8008958:	f7ff fdaa 	bl	80084b0 <CDC_Transmit_FS>
 800895c:	e217      	b.n	8008d8e <Process_Received_Message+0x892>
	}
	else if (strncmp((char*) rx_buffer, "Write Register:", strlen("Write Register:")) == 0)
 800895e:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8008962:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8008966:	220f      	movs	r2, #15
 8008968:	49bc      	ldr	r1, [pc, #752]	; (8008c5c <Process_Received_Message+0x760>)
 800896a:	6818      	ldr	r0, [r3, #0]
 800896c:	f000 fe54 	bl	8009618 <strncmp>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d176      	bne.n	8008a64 <Process_Received_Message+0x568>
	{
		sprintf(str1, "User Input: Write Register\r\n");
 8008976:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800897a:	49b9      	ldr	r1, [pc, #740]	; (8008c60 <Process_Received_Message+0x764>)
 800897c:	4618      	mov	r0, r3
 800897e:	f000 fe2b 	bl	80095d8 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Write"
 8008982:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8008986:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 800898a:	49b6      	ldr	r1, [pc, #728]	; (8008c64 <Process_Received_Message+0x768>)
 800898c:	6818      	ldr	r0, [r3, #0]
 800898e:	f000 fe57 	bl	8009640 <strtok>
 8008992:	f8c7 05ec 	str.w	r0, [r7, #1516]	; 0x5ec
		Token = strtok(NULL, " "); // second token "Register:"
 8008996:	49b3      	ldr	r1, [pc, #716]	; (8008c64 <Process_Received_Message+0x768>)
 8008998:	2000      	movs	r0, #0
 800899a:	f000 fe51 	bl	8009640 <strtok>
 800899e:	f8c7 05ec 	str.w	r0, [r7, #1516]	; 0x5ec
		sprintf(str2, "Address to Access: ");
 80089a2:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80089a6:	49b0      	ldr	r1, [pc, #704]	; (8008c68 <Process_Received_Message+0x76c>)
 80089a8:	4618      	mov	r0, r3
 80089aa:	f000 fe15 	bl	80095d8 <siprintf>
		Token = strtok(NULL, " "); // third token "[register address]"
 80089ae:	49ad      	ldr	r1, [pc, #692]	; (8008c64 <Process_Received_Message+0x768>)
 80089b0:	2000      	movs	r0, #0
 80089b2:	f000 fe45 	bl	8009640 <strtok>
 80089b6:	f8c7 05ec 	str.w	r0, [r7, #1516]	; 0x5ec
		sprintf(str3, "%s\r\n", Token);
 80089ba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80089be:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 80089c2:	49aa      	ldr	r1, [pc, #680]	; (8008c6c <Process_Received_Message+0x770>)
 80089c4:	4618      	mov	r0, r3
 80089c6:	f000 fe07 	bl	80095d8 <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 80089ca:	2210      	movs	r2, #16
 80089cc:	2100      	movs	r1, #0
 80089ce:	f8d7 05ec 	ldr.w	r0, [r7, #1516]	; 0x5ec
 80089d2:	f000 ff0d 	bl	80097f0 <strtol>
 80089d6:	4603      	mov	r3, r0
 80089d8:	f887 35eb 	strb.w	r3, [r7, #1515]	; 0x5eb
		sprintf(str4, "Value Sent: ");
 80089dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80089e0:	49a3      	ldr	r1, [pc, #652]	; (8008c70 <Process_Received_Message+0x774>)
 80089e2:	4618      	mov	r0, r3
 80089e4:	f000 fdf8 	bl	80095d8 <siprintf>
		Token = strtok(NULL, "\r\n"); // fourth token "[register value]"
 80089e8:	49a2      	ldr	r1, [pc, #648]	; (8008c74 <Process_Received_Message+0x778>)
 80089ea:	2000      	movs	r0, #0
 80089ec:	f000 fe28 	bl	8009640 <strtok>
 80089f0:	f8c7 05ec 	str.w	r0, [r7, #1516]	; 0x5ec
		sprintf(str5, "%s\r\n", Token);
 80089f4:	f107 0308 	add.w	r3, r7, #8
 80089f8:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 80089fc:	499b      	ldr	r1, [pc, #620]	; (8008c6c <Process_Received_Message+0x770>)
 80089fe:	4618      	mov	r0, r3
 8008a00:	f000 fdea 	bl	80095d8 <siprintf>
		Register_Value = strtol(Token, NULL, 16); // convert register value to a number
 8008a04:	2210      	movs	r2, #16
 8008a06:	2100      	movs	r1, #0
 8008a08:	f8d7 05ec 	ldr.w	r0, [r7, #1516]	; 0x5ec
 8008a0c:	f000 fef0 	bl	80097f0 <strtol>
 8008a10:	4603      	mov	r3, r0
 8008a12:	f887 35e7 	strb.w	r3, [r7, #1511]	; 0x5e7
		CC1200_Write_Single_Register(&SPI_Info, Register_Address, Register_Value);
 8008a16:	f897 25e7 	ldrb.w	r2, [r7, #1511]	; 0x5e7
 8008a1a:	f897 35eb 	ldrb.w	r3, [r7, #1515]	; 0x5eb
 8008a1e:	4619      	mov	r1, r3
 8008a20:	4895      	ldr	r0, [pc, #596]	; (8008c78 <Process_Received_Message+0x77c>)
 8008a22:	f7f7 fdc1 	bl	80005a8 <CC1200_Write_Single_Register>
		Message_Length = sprintf(Message, "%s%s%s%s%s", str1, str2, str3, str4, str5);
 8008a26:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8008a2a:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8008a2e:	f507 70fe 	add.w	r0, r7, #508	; 0x1fc
 8008a32:	f107 0308 	add.w	r3, r7, #8
 8008a36:	9302      	str	r3, [sp, #8]
 8008a38:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008a3c:	9301      	str	r3, [sp, #4]
 8008a3e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8008a42:	9300      	str	r3, [sp, #0]
 8008a44:	460b      	mov	r3, r1
 8008a46:	498d      	ldr	r1, [pc, #564]	; (8008c7c <Process_Received_Message+0x780>)
 8008a48:	f000 fdc6 	bl	80095d8 <siprintf>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	f8a7 35e8 	strh.w	r3, [r7, #1512]	; 0x5e8
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008a52:	f8b7 25e8 	ldrh.w	r2, [r7, #1512]	; 0x5e8
 8008a56:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8008a5a:	4611      	mov	r1, r2
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7ff fd27 	bl	80084b0 <CDC_Transmit_FS>
 8008a62:	e194      	b.n	8008d8e <Process_Received_Message+0x892>
	}
	else if (strncmp((char*) rx_buffer, "Read Register:", strlen("Read Register:")) == 0)
 8008a64:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8008a68:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8008a6c:	220e      	movs	r2, #14
 8008a6e:	4984      	ldr	r1, [pc, #528]	; (8008c80 <Process_Received_Message+0x784>)
 8008a70:	6818      	ldr	r0, [r3, #0]
 8008a72:	f000 fdd1 	bl	8009618 <strncmp>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d15a      	bne.n	8008b32 <Process_Received_Message+0x636>
	{
		sprintf(str1, "User Input: Read Register\r\n");
 8008a7c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8008a80:	4980      	ldr	r1, [pc, #512]	; (8008c84 <Process_Received_Message+0x788>)
 8008a82:	4618      	mov	r0, r3
 8008a84:	f000 fda8 	bl	80095d8 <siprintf>
		sprintf(str2, "Address to Access: ");
 8008a88:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8008a8c:	4976      	ldr	r1, [pc, #472]	; (8008c68 <Process_Received_Message+0x76c>)
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 fda2 	bl	80095d8 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Read"
 8008a94:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8008a98:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8008a9c:	4971      	ldr	r1, [pc, #452]	; (8008c64 <Process_Received_Message+0x768>)
 8008a9e:	6818      	ldr	r0, [r3, #0]
 8008aa0:	f000 fdce 	bl	8009640 <strtok>
 8008aa4:	f8c7 05ec 	str.w	r0, [r7, #1516]	; 0x5ec
		Token = strtok(NULL, " "); // second token "Register:"
 8008aa8:	496e      	ldr	r1, [pc, #440]	; (8008c64 <Process_Received_Message+0x768>)
 8008aaa:	2000      	movs	r0, #0
 8008aac:	f000 fdc8 	bl	8009640 <strtok>
 8008ab0:	f8c7 05ec 	str.w	r0, [r7, #1516]	; 0x5ec
		Token = strtok(NULL, "\r\n"); // third token "[register address]"
 8008ab4:	496f      	ldr	r1, [pc, #444]	; (8008c74 <Process_Received_Message+0x778>)
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	f000 fdc2 	bl	8009640 <strtok>
 8008abc:	f8c7 05ec 	str.w	r0, [r7, #1516]	; 0x5ec
		sprintf(str3, "%s\r\n", Token);
 8008ac0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8008ac4:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 8008ac8:	4968      	ldr	r1, [pc, #416]	; (8008c6c <Process_Received_Message+0x770>)
 8008aca:	4618      	mov	r0, r3
 8008acc:	f000 fd84 	bl	80095d8 <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 8008ad0:	2210      	movs	r2, #16
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	f8d7 05ec 	ldr.w	r0, [r7, #1516]	; 0x5ec
 8008ad8:	f000 fe8a 	bl	80097f0 <strtol>
 8008adc:	4603      	mov	r3, r0
 8008ade:	f887 35eb 	strb.w	r3, [r7, #1515]	; 0x5eb
		CC1200_Read_Single_Register(&SPI_Info, Register_Address);
 8008ae2:	f897 35eb 	ldrb.w	r3, [r7, #1515]	; 0x5eb
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	4863      	ldr	r0, [pc, #396]	; (8008c78 <Process_Received_Message+0x77c>)
 8008aea:	f7f7 fd8f 	bl	800060c <CC1200_Read_Single_Register>
		sprintf(str4, "Value Received: \r\n");
 8008aee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008af2:	4965      	ldr	r1, [pc, #404]	; (8008c88 <Process_Received_Message+0x78c>)
 8008af4:	4618      	mov	r0, r3
 8008af6:	f000 fd6f 	bl	80095d8 <siprintf>
		Message_Length = sprintf(Message, "%s%s%s%s", str1, str2, str3, str4);
 8008afa:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8008afe:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8008b02:	f507 70fe 	add.w	r0, r7, #508	; 0x1fc
 8008b06:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008b0a:	9301      	str	r3, [sp, #4]
 8008b0c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8008b10:	9300      	str	r3, [sp, #0]
 8008b12:	460b      	mov	r3, r1
 8008b14:	495d      	ldr	r1, [pc, #372]	; (8008c8c <Process_Received_Message+0x790>)
 8008b16:	f000 fd5f 	bl	80095d8 <siprintf>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	f8a7 35e8 	strh.w	r3, [r7, #1512]	; 0x5e8
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008b20:	f8b7 25e8 	ldrh.w	r2, [r7, #1512]	; 0x5e8
 8008b24:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8008b28:	4611      	mov	r1, r2
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7ff fcc0 	bl	80084b0 <CDC_Transmit_FS>
 8008b30:	e12d      	b.n	8008d8e <Process_Received_Message+0x892>
	}
	else if (strncmp((char*) rx_buffer, "Write Extended Register:", strlen("Write Extended Register:")) == 0)
 8008b32:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8008b36:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8008b3a:	2218      	movs	r2, #24
 8008b3c:	4954      	ldr	r1, [pc, #336]	; (8008c90 <Process_Received_Message+0x794>)
 8008b3e:	6818      	ldr	r0, [r3, #0]
 8008b40:	f000 fd6a 	bl	8009618 <strncmp>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	f040 80a6 	bne.w	8008c98 <Process_Received_Message+0x79c>
	{
		sprintf(str1, "User Input: Write Extended Register\r\n");
 8008b4c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8008b50:	4950      	ldr	r1, [pc, #320]	; (8008c94 <Process_Received_Message+0x798>)
 8008b52:	4618      	mov	r0, r3
 8008b54:	f000 fd40 	bl	80095d8 <siprintf>
		sprintf(str2, "Address to Access: ");
 8008b58:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8008b5c:	4942      	ldr	r1, [pc, #264]	; (8008c68 <Process_Received_Message+0x76c>)
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f000 fd3a 	bl	80095d8 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Write"
 8008b64:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8008b68:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8008b6c:	493d      	ldr	r1, [pc, #244]	; (8008c64 <Process_Received_Message+0x768>)
 8008b6e:	6818      	ldr	r0, [r3, #0]
 8008b70:	f000 fd66 	bl	8009640 <strtok>
 8008b74:	f8c7 05ec 	str.w	r0, [r7, #1516]	; 0x5ec
		Token = strtok(NULL, " "); // second token "Extended"
 8008b78:	493a      	ldr	r1, [pc, #232]	; (8008c64 <Process_Received_Message+0x768>)
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	f000 fd60 	bl	8009640 <strtok>
 8008b80:	f8c7 05ec 	str.w	r0, [r7, #1516]	; 0x5ec
		Token = strtok(NULL, " "); // third token "Register:"
 8008b84:	4937      	ldr	r1, [pc, #220]	; (8008c64 <Process_Received_Message+0x768>)
 8008b86:	2000      	movs	r0, #0
 8008b88:	f000 fd5a 	bl	8009640 <strtok>
 8008b8c:	f8c7 05ec 	str.w	r0, [r7, #1516]	; 0x5ec
		Token = strtok(NULL, " "); // fourth token "[register address]"
 8008b90:	4934      	ldr	r1, [pc, #208]	; (8008c64 <Process_Received_Message+0x768>)
 8008b92:	2000      	movs	r0, #0
 8008b94:	f000 fd54 	bl	8009640 <strtok>
 8008b98:	f8c7 05ec 	str.w	r0, [r7, #1516]	; 0x5ec
		sprintf(str3, "%s\r\n", Token);
 8008b9c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8008ba0:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 8008ba4:	4931      	ldr	r1, [pc, #196]	; (8008c6c <Process_Received_Message+0x770>)
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f000 fd16 	bl	80095d8 <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 8008bac:	2210      	movs	r2, #16
 8008bae:	2100      	movs	r1, #0
 8008bb0:	f8d7 05ec 	ldr.w	r0, [r7, #1516]	; 0x5ec
 8008bb4:	f000 fe1c 	bl	80097f0 <strtol>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	f887 35eb 	strb.w	r3, [r7, #1515]	; 0x5eb
		sprintf(str4, "Value Sent: ");
 8008bbe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008bc2:	492b      	ldr	r1, [pc, #172]	; (8008c70 <Process_Received_Message+0x774>)
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f000 fd07 	bl	80095d8 <siprintf>
		Token = strtok(NULL, "\r\n"); // fifth token "[register value]"
 8008bca:	492a      	ldr	r1, [pc, #168]	; (8008c74 <Process_Received_Message+0x778>)
 8008bcc:	2000      	movs	r0, #0
 8008bce:	f000 fd37 	bl	8009640 <strtok>
 8008bd2:	f8c7 05ec 	str.w	r0, [r7, #1516]	; 0x5ec
		sprintf(str5, "%s\r\n", Token);
 8008bd6:	f107 0308 	add.w	r3, r7, #8
 8008bda:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 8008bde:	4923      	ldr	r1, [pc, #140]	; (8008c6c <Process_Received_Message+0x770>)
 8008be0:	4618      	mov	r0, r3
 8008be2:	f000 fcf9 	bl	80095d8 <siprintf>
		Register_Value = strtol(Token, NULL, 16); // convert register value to a number
 8008be6:	2210      	movs	r2, #16
 8008be8:	2100      	movs	r1, #0
 8008bea:	f8d7 05ec 	ldr.w	r0, [r7, #1516]	; 0x5ec
 8008bee:	f000 fdff 	bl	80097f0 <strtol>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	f887 35e7 	strb.w	r3, [r7, #1511]	; 0x5e7
		CC1200_Write_Single_Extended_Register(&SPI_Info, Register_Address, Register_Value);
 8008bf8:	f897 25e7 	ldrb.w	r2, [r7, #1511]	; 0x5e7
 8008bfc:	f897 35eb 	ldrb.w	r3, [r7, #1515]	; 0x5eb
 8008c00:	4619      	mov	r1, r3
 8008c02:	481d      	ldr	r0, [pc, #116]	; (8008c78 <Process_Received_Message+0x77c>)
 8008c04:	f7f7 fd42 	bl	800068c <CC1200_Write_Single_Extended_Register>
		Message_Length = sprintf(Message, "%s%s%s%s%s", str1, str2, str3, str4, str5);
 8008c08:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8008c0c:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8008c10:	f507 70fe 	add.w	r0, r7, #508	; 0x1fc
 8008c14:	f107 0308 	add.w	r3, r7, #8
 8008c18:	9302      	str	r3, [sp, #8]
 8008c1a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008c1e:	9301      	str	r3, [sp, #4]
 8008c20:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8008c24:	9300      	str	r3, [sp, #0]
 8008c26:	460b      	mov	r3, r1
 8008c28:	4914      	ldr	r1, [pc, #80]	; (8008c7c <Process_Received_Message+0x780>)
 8008c2a:	f000 fcd5 	bl	80095d8 <siprintf>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	f8a7 35e8 	strh.w	r3, [r7, #1512]	; 0x5e8
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008c34:	f8b7 25e8 	ldrh.w	r2, [r7, #1512]	; 0x5e8
 8008c38:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8008c3c:	4611      	mov	r1, r2
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7ff fc36 	bl	80084b0 <CDC_Transmit_FS>
 8008c44:	e0a3      	b.n	8008d8e <Process_Received_Message+0x892>
 8008c46:	bf00      	nop
 8008c48:	0800add8 	.word	0x0800add8
 8008c4c:	0800ade0 	.word	0x0800ade0
 8008c50:	0800ad94 	.word	0x0800ad94
 8008c54:	0800adf4 	.word	0x0800adf4
 8008c58:	0800ad2c 	.word	0x0800ad2c
 8008c5c:	0800ae20 	.word	0x0800ae20
 8008c60:	0800ae30 	.word	0x0800ae30
 8008c64:	0800abe8 	.word	0x0800abe8
 8008c68:	0800ae50 	.word	0x0800ae50
 8008c6c:	0800acb0 	.word	0x0800acb0
 8008c70:	0800ae64 	.word	0x0800ae64
 8008c74:	0800abec 	.word	0x0800abec
 8008c78:	200003fc 	.word	0x200003fc
 8008c7c:	0800ae74 	.word	0x0800ae74
 8008c80:	0800ae80 	.word	0x0800ae80
 8008c84:	0800ae90 	.word	0x0800ae90
 8008c88:	0800aeac 	.word	0x0800aeac
 8008c8c:	0800acb8 	.word	0x0800acb8
 8008c90:	0800aec0 	.word	0x0800aec0
 8008c94:	0800aedc 	.word	0x0800aedc
	}
	else if (strncmp((char*) rx_buffer, "Read Extended Register:", strlen("Read Extended Register:")) == 0)
 8008c98:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8008c9c:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8008ca0:	2217      	movs	r2, #23
 8008ca2:	493e      	ldr	r1, [pc, #248]	; (8008d9c <Process_Received_Message+0x8a0>)
 8008ca4:	6818      	ldr	r0, [r3, #0]
 8008ca6:	f000 fcb7 	bl	8009618 <strncmp>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d160      	bne.n	8008d72 <Process_Received_Message+0x876>
	{
		sprintf(str1, "User Input: Read Extended Register\r\n");
 8008cb0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8008cb4:	493a      	ldr	r1, [pc, #232]	; (8008da0 <Process_Received_Message+0x8a4>)
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f000 fc8e 	bl	80095d8 <siprintf>
		sprintf(str2, "Address to Access: ");
 8008cbc:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8008cc0:	4938      	ldr	r1, [pc, #224]	; (8008da4 <Process_Received_Message+0x8a8>)
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f000 fc88 	bl	80095d8 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Read"
 8008cc8:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8008ccc:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8008cd0:	4935      	ldr	r1, [pc, #212]	; (8008da8 <Process_Received_Message+0x8ac>)
 8008cd2:	6818      	ldr	r0, [r3, #0]
 8008cd4:	f000 fcb4 	bl	8009640 <strtok>
 8008cd8:	f8c7 05ec 	str.w	r0, [r7, #1516]	; 0x5ec
		Token = strtok(NULL, " "); // second token "Extended"
 8008cdc:	4932      	ldr	r1, [pc, #200]	; (8008da8 <Process_Received_Message+0x8ac>)
 8008cde:	2000      	movs	r0, #0
 8008ce0:	f000 fcae 	bl	8009640 <strtok>
 8008ce4:	f8c7 05ec 	str.w	r0, [r7, #1516]	; 0x5ec
		Token = strtok(NULL, " "); // third token "Register:"
 8008ce8:	492f      	ldr	r1, [pc, #188]	; (8008da8 <Process_Received_Message+0x8ac>)
 8008cea:	2000      	movs	r0, #0
 8008cec:	f000 fca8 	bl	8009640 <strtok>
 8008cf0:	f8c7 05ec 	str.w	r0, [r7, #1516]	; 0x5ec
		Token = strtok(NULL, "\r\n"); // fourth token "[register address]"
 8008cf4:	492d      	ldr	r1, [pc, #180]	; (8008dac <Process_Received_Message+0x8b0>)
 8008cf6:	2000      	movs	r0, #0
 8008cf8:	f000 fca2 	bl	8009640 <strtok>
 8008cfc:	f8c7 05ec 	str.w	r0, [r7, #1516]	; 0x5ec
		sprintf(str3, "%s\r\n", Token);
 8008d00:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8008d04:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 8008d08:	4929      	ldr	r1, [pc, #164]	; (8008db0 <Process_Received_Message+0x8b4>)
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f000 fc64 	bl	80095d8 <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 8008d10:	2210      	movs	r2, #16
 8008d12:	2100      	movs	r1, #0
 8008d14:	f8d7 05ec 	ldr.w	r0, [r7, #1516]	; 0x5ec
 8008d18:	f000 fd6a 	bl	80097f0 <strtol>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	f887 35eb 	strb.w	r3, [r7, #1515]	; 0x5eb
		CC1200_Read_Single_Extended_Register(&SPI_Info, Register_Address);
 8008d22:	f897 35eb 	ldrb.w	r3, [r7, #1515]	; 0x5eb
 8008d26:	4619      	mov	r1, r3
 8008d28:	4822      	ldr	r0, [pc, #136]	; (8008db4 <Process_Received_Message+0x8b8>)
 8008d2a:	f7f7 fd01 	bl	8000730 <CC1200_Read_Single_Extended_Register>
		sprintf(str4, "Value Received: \r\n");
 8008d2e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008d32:	4921      	ldr	r1, [pc, #132]	; (8008db8 <Process_Received_Message+0x8bc>)
 8008d34:	4618      	mov	r0, r3
 8008d36:	f000 fc4f 	bl	80095d8 <siprintf>
		Message_Length = sprintf(Message, "%s%s%s%s", str1, str2, str3, str4);
 8008d3a:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8008d3e:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8008d42:	f507 70fe 	add.w	r0, r7, #508	; 0x1fc
 8008d46:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008d4a:	9301      	str	r3, [sp, #4]
 8008d4c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8008d50:	9300      	str	r3, [sp, #0]
 8008d52:	460b      	mov	r3, r1
 8008d54:	4919      	ldr	r1, [pc, #100]	; (8008dbc <Process_Received_Message+0x8c0>)
 8008d56:	f000 fc3f 	bl	80095d8 <siprintf>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	f8a7 35e8 	strh.w	r3, [r7, #1512]	; 0x5e8
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008d60:	f8b7 25e8 	ldrh.w	r2, [r7, #1512]	; 0x5e8
 8008d64:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8008d68:	4611      	mov	r1, r2
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7ff fba0 	bl	80084b0 <CDC_Transmit_FS>
 8008d70:	e00d      	b.n	8008d8e <Process_Received_Message+0x892>
	}
	else
	{
		CDC_Transmit_FS(rx_buffer, rx_buffer_len);
 8008d72:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8008d76:	f5a3 63be 	sub.w	r3, r3, #1520	; 0x5f0
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8008d82:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8008d86:	4611      	mov	r1, r2
 8008d88:	6818      	ldr	r0, [r3, #0]
 8008d8a:	f7ff fb91 	bl	80084b0 <CDC_Transmit_FS>
	}

	return 0;
 8008d8e:	2300      	movs	r3, #0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	f507 67be 	add.w	r7, r7, #1520	; 0x5f0
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	0800af04 	.word	0x0800af04
 8008da0:	0800af1c 	.word	0x0800af1c
 8008da4:	0800ae50 	.word	0x0800ae50
 8008da8:	0800abe8 	.word	0x0800abe8
 8008dac:	0800abec 	.word	0x0800abec
 8008db0:	0800acb0 	.word	0x0800acb0
 8008db4:	200003fc 	.word	0x200003fc
 8008db8:	0800aeac 	.word	0x0800aeac
 8008dbc:	0800acb8 	.word	0x0800acb8

08008dc0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	6039      	str	r1, [r7, #0]
 8008dca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	2212      	movs	r2, #18
 8008dd0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008dd2:	4b03      	ldr	r3, [pc, #12]	; (8008de0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	370c      	adds	r7, #12
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bc80      	pop	{r7}
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	200002ac 	.word	0x200002ac

08008de4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	4603      	mov	r3, r0
 8008dec:	6039      	str	r1, [r7, #0]
 8008dee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	2204      	movs	r2, #4
 8008df4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008df6:	4b03      	ldr	r3, [pc, #12]	; (8008e04 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bc80      	pop	{r7}
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	200002c0 	.word	0x200002c0

08008e08 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	4603      	mov	r3, r0
 8008e10:	6039      	str	r1, [r7, #0]
 8008e12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e14:	79fb      	ldrb	r3, [r7, #7]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d105      	bne.n	8008e26 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e1a:	683a      	ldr	r2, [r7, #0]
 8008e1c:	4907      	ldr	r1, [pc, #28]	; (8008e3c <USBD_FS_ProductStrDescriptor+0x34>)
 8008e1e:	4808      	ldr	r0, [pc, #32]	; (8008e40 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e20:	f7ff f966 	bl	80080f0 <USBD_GetString>
 8008e24:	e004      	b.n	8008e30 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e26:	683a      	ldr	r2, [r7, #0]
 8008e28:	4904      	ldr	r1, [pc, #16]	; (8008e3c <USBD_FS_ProductStrDescriptor+0x34>)
 8008e2a:	4805      	ldr	r0, [pc, #20]	; (8008e40 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e2c:	f7ff f960 	bl	80080f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e30:	4b02      	ldr	r3, [pc, #8]	; (8008e3c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3708      	adds	r7, #8
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	20001788 	.word	0x20001788
 8008e40:	0800af44 	.word	0x0800af44

08008e44 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	6039      	str	r1, [r7, #0]
 8008e4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008e50:	683a      	ldr	r2, [r7, #0]
 8008e52:	4904      	ldr	r1, [pc, #16]	; (8008e64 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008e54:	4804      	ldr	r0, [pc, #16]	; (8008e68 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008e56:	f7ff f94b 	bl	80080f0 <USBD_GetString>
  return USBD_StrDesc;
 8008e5a:	4b02      	ldr	r3, [pc, #8]	; (8008e64 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3708      	adds	r7, #8
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	20001788 	.word	0x20001788
 8008e68:	0800af5c 	.word	0x0800af5c

08008e6c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	4603      	mov	r3, r0
 8008e74:	6039      	str	r1, [r7, #0]
 8008e76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	221a      	movs	r2, #26
 8008e7c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e7e:	f000 f843 	bl	8008f08 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008e82:	4b02      	ldr	r3, [pc, #8]	; (8008e8c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3708      	adds	r7, #8
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	200002c4 	.word	0x200002c4

08008e90 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	4603      	mov	r3, r0
 8008e98:	6039      	str	r1, [r7, #0]
 8008e9a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e9c:	79fb      	ldrb	r3, [r7, #7]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d105      	bne.n	8008eae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ea2:	683a      	ldr	r2, [r7, #0]
 8008ea4:	4907      	ldr	r1, [pc, #28]	; (8008ec4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ea6:	4808      	ldr	r0, [pc, #32]	; (8008ec8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ea8:	f7ff f922 	bl	80080f0 <USBD_GetString>
 8008eac:	e004      	b.n	8008eb8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008eae:	683a      	ldr	r2, [r7, #0]
 8008eb0:	4904      	ldr	r1, [pc, #16]	; (8008ec4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008eb2:	4805      	ldr	r0, [pc, #20]	; (8008ec8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008eb4:	f7ff f91c 	bl	80080f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008eb8:	4b02      	ldr	r3, [pc, #8]	; (8008ec4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3708      	adds	r7, #8
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	20001788 	.word	0x20001788
 8008ec8:	0800af70 	.word	0x0800af70

08008ecc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	6039      	str	r1, [r7, #0]
 8008ed6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ed8:	79fb      	ldrb	r3, [r7, #7]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d105      	bne.n	8008eea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ede:	683a      	ldr	r2, [r7, #0]
 8008ee0:	4907      	ldr	r1, [pc, #28]	; (8008f00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ee2:	4808      	ldr	r0, [pc, #32]	; (8008f04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ee4:	f7ff f904 	bl	80080f0 <USBD_GetString>
 8008ee8:	e004      	b.n	8008ef4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008eea:	683a      	ldr	r2, [r7, #0]
 8008eec:	4904      	ldr	r1, [pc, #16]	; (8008f00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008eee:	4805      	ldr	r0, [pc, #20]	; (8008f04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ef0:	f7ff f8fe 	bl	80080f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ef4:	4b02      	ldr	r3, [pc, #8]	; (8008f00 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3708      	adds	r7, #8
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	20001788 	.word	0x20001788
 8008f04:	0800af7c 	.word	0x0800af7c

08008f08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008f0e:	4b0f      	ldr	r3, [pc, #60]	; (8008f4c <Get_SerialNum+0x44>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008f14:	4b0e      	ldr	r3, [pc, #56]	; (8008f50 <Get_SerialNum+0x48>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008f1a:	4b0e      	ldr	r3, [pc, #56]	; (8008f54 <Get_SerialNum+0x4c>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4413      	add	r3, r2
 8008f26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d009      	beq.n	8008f42 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008f2e:	2208      	movs	r2, #8
 8008f30:	4909      	ldr	r1, [pc, #36]	; (8008f58 <Get_SerialNum+0x50>)
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	f000 f814 	bl	8008f60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008f38:	2204      	movs	r2, #4
 8008f3a:	4908      	ldr	r1, [pc, #32]	; (8008f5c <Get_SerialNum+0x54>)
 8008f3c:	68b8      	ldr	r0, [r7, #8]
 8008f3e:	f000 f80f 	bl	8008f60 <IntToUnicode>
  }
}
 8008f42:	bf00      	nop
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	1ff800d0 	.word	0x1ff800d0
 8008f50:	1ff800d4 	.word	0x1ff800d4
 8008f54:	1ff800d8 	.word	0x1ff800d8
 8008f58:	200002c6 	.word	0x200002c6
 8008f5c:	200002d6 	.word	0x200002d6

08008f60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b087      	sub	sp, #28
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f72:	2300      	movs	r3, #0
 8008f74:	75fb      	strb	r3, [r7, #23]
 8008f76:	e027      	b.n	8008fc8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	0f1b      	lsrs	r3, r3, #28
 8008f7c:	2b09      	cmp	r3, #9
 8008f7e:	d80b      	bhi.n	8008f98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	0f1b      	lsrs	r3, r3, #28
 8008f84:	b2da      	uxtb	r2, r3
 8008f86:	7dfb      	ldrb	r3, [r7, #23]
 8008f88:	005b      	lsls	r3, r3, #1
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	440b      	add	r3, r1
 8008f90:	3230      	adds	r2, #48	; 0x30
 8008f92:	b2d2      	uxtb	r2, r2
 8008f94:	701a      	strb	r2, [r3, #0]
 8008f96:	e00a      	b.n	8008fae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	0f1b      	lsrs	r3, r3, #28
 8008f9c:	b2da      	uxtb	r2, r3
 8008f9e:	7dfb      	ldrb	r3, [r7, #23]
 8008fa0:	005b      	lsls	r3, r3, #1
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	440b      	add	r3, r1
 8008fa8:	3237      	adds	r2, #55	; 0x37
 8008faa:	b2d2      	uxtb	r2, r2
 8008fac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	011b      	lsls	r3, r3, #4
 8008fb2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008fb4:	7dfb      	ldrb	r3, [r7, #23]
 8008fb6:	005b      	lsls	r3, r3, #1
 8008fb8:	3301      	adds	r3, #1
 8008fba:	68ba      	ldr	r2, [r7, #8]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008fc2:	7dfb      	ldrb	r3, [r7, #23]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	75fb      	strb	r3, [r7, #23]
 8008fc8:	7dfa      	ldrb	r2, [r7, #23]
 8008fca:	79fb      	ldrb	r3, [r7, #7]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d3d3      	bcc.n	8008f78 <IntToUnicode+0x18>
  }
}
 8008fd0:	bf00      	nop
 8008fd2:	bf00      	nop
 8008fd4:	371c      	adds	r7, #28
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bc80      	pop	{r7}
 8008fda:	4770      	bx	lr

08008fdc <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8008fe8:	78fb      	ldrb	r3, [r7, #3]
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d106      	bne.n	8008ffc <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8008fee:	4b09      	ldr	r3, [pc, #36]	; (8009014 <HAL_PCDEx_SetConnectionState+0x38>)
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	4a08      	ldr	r2, [pc, #32]	; (8009014 <HAL_PCDEx_SetConnectionState+0x38>)
 8008ff4:	f043 0301 	orr.w	r3, r3, #1
 8008ff8:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8008ffa:	e005      	b.n	8009008 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8008ffc:	4b05      	ldr	r3, [pc, #20]	; (8009014 <HAL_PCDEx_SetConnectionState+0x38>)
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	4a04      	ldr	r2, [pc, #16]	; (8009014 <HAL_PCDEx_SetConnectionState+0x38>)
 8009002:	f023 0301 	bic.w	r3, r3, #1
 8009006:	6053      	str	r3, [r2, #4]
}
 8009008:	bf00      	nop
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	bc80      	pop	{r7}
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	40010000 	.word	0x40010000

08009018 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a0d      	ldr	r2, [pc, #52]	; (800905c <HAL_PCD_MspInit+0x44>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d113      	bne.n	8009052 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800902a:	4b0d      	ldr	r3, [pc, #52]	; (8009060 <HAL_PCD_MspInit+0x48>)
 800902c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902e:	4a0c      	ldr	r2, [pc, #48]	; (8009060 <HAL_PCD_MspInit+0x48>)
 8009030:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009034:	6253      	str	r3, [r2, #36]	; 0x24
 8009036:	4b0a      	ldr	r3, [pc, #40]	; (8009060 <HAL_PCD_MspInit+0x48>)
 8009038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800903e:	60fb      	str	r3, [r7, #12]
 8009040:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009042:	2200      	movs	r2, #0
 8009044:	2100      	movs	r1, #0
 8009046:	2014      	movs	r0, #20
 8009048:	f7f8 f859 	bl	80010fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800904c:	2014      	movs	r0, #20
 800904e:	f7f8 f872 	bl	8001136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009052:	bf00      	nop
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	40005c00 	.word	0x40005c00
 8009060:	40023800 	.word	0x40023800

08009064 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009078:	4619      	mov	r1, r3
 800907a:	4610      	mov	r0, r2
 800907c:	f7fe f97d 	bl	800737a <USBD_LL_SetupStage>
}
 8009080:	bf00      	nop
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	460b      	mov	r3, r1
 8009092:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800909a:	78fa      	ldrb	r2, [r7, #3]
 800909c:	6879      	ldr	r1, [r7, #4]
 800909e:	4613      	mov	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	4413      	add	r3, r2
 80090a4:	00db      	lsls	r3, r3, #3
 80090a6:	440b      	add	r3, r1
 80090a8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	78fb      	ldrb	r3, [r7, #3]
 80090b0:	4619      	mov	r1, r3
 80090b2:	f7fe f9af 	bl	8007414 <USBD_LL_DataOutStage>
}
 80090b6:	bf00      	nop
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b082      	sub	sp, #8
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
 80090c6:	460b      	mov	r3, r1
 80090c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80090d0:	78fa      	ldrb	r2, [r7, #3]
 80090d2:	6879      	ldr	r1, [r7, #4]
 80090d4:	4613      	mov	r3, r2
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	4413      	add	r3, r2
 80090da:	00db      	lsls	r3, r3, #3
 80090dc:	440b      	add	r3, r1
 80090de:	333c      	adds	r3, #60	; 0x3c
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	78fb      	ldrb	r3, [r7, #3]
 80090e4:	4619      	mov	r1, r3
 80090e6:	f7fe fa06 	bl	80074f6 <USBD_LL_DataInStage>
}
 80090ea:	bf00      	nop
 80090ec:	3708      	adds	r7, #8
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b082      	sub	sp, #8
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009100:	4618      	mov	r0, r3
 8009102:	f7fe fb11 	bl	8007728 <USBD_LL_SOF>
}
 8009106:	bf00      	nop
 8009108:	3708      	adds	r7, #8
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b084      	sub	sp, #16
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009116:	2301      	movs	r3, #1
 8009118:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	2b02      	cmp	r3, #2
 8009120:	d001      	beq.n	8009126 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009122:	f7f7 fcbf 	bl	8000aa4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800912c:	7bfa      	ldrb	r2, [r7, #15]
 800912e:	4611      	mov	r1, r2
 8009130:	4618      	mov	r0, r3
 8009132:	f7fe fac6 	bl	80076c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800913c:	4618      	mov	r0, r3
 800913e:	f7fe fa7f 	bl	8007640 <USBD_LL_Reset>
}
 8009142:	bf00      	nop
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
	...

0800914c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800915a:	4618      	mov	r0, r3
 800915c:	f7fe fac0 	bl	80076e0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	699b      	ldr	r3, [r3, #24]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d005      	beq.n	8009174 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009168:	4b04      	ldr	r3, [pc, #16]	; (800917c <HAL_PCD_SuspendCallback+0x30>)
 800916a:	691b      	ldr	r3, [r3, #16]
 800916c:	4a03      	ldr	r2, [pc, #12]	; (800917c <HAL_PCD_SuspendCallback+0x30>)
 800916e:	f043 0306 	orr.w	r3, r3, #6
 8009172:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009174:	bf00      	nop
 8009176:	3708      	adds	r7, #8
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	e000ed00 	.word	0xe000ed00

08009180 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800918e:	4618      	mov	r0, r3
 8009190:	f7fe faba 	bl	8007708 <USBD_LL_Resume>
}
 8009194:	bf00      	nop
 8009196:	3708      	adds	r7, #8
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80091a4:	4a28      	ldr	r2, [pc, #160]	; (8009248 <USBD_LL_Init+0xac>)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4a26      	ldr	r2, [pc, #152]	; (8009248 <USBD_LL_Init+0xac>)
 80091b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 80091b4:	4b24      	ldr	r3, [pc, #144]	; (8009248 <USBD_LL_Init+0xac>)
 80091b6:	4a25      	ldr	r2, [pc, #148]	; (800924c <USBD_LL_Init+0xb0>)
 80091b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80091ba:	4b23      	ldr	r3, [pc, #140]	; (8009248 <USBD_LL_Init+0xac>)
 80091bc:	2208      	movs	r2, #8
 80091be:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80091c0:	4b21      	ldr	r3, [pc, #132]	; (8009248 <USBD_LL_Init+0xac>)
 80091c2:	2202      	movs	r2, #2
 80091c4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80091c6:	4b20      	ldr	r3, [pc, #128]	; (8009248 <USBD_LL_Init+0xac>)
 80091c8:	2202      	movs	r2, #2
 80091ca:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80091cc:	4b1e      	ldr	r3, [pc, #120]	; (8009248 <USBD_LL_Init+0xac>)
 80091ce:	2200      	movs	r2, #0
 80091d0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80091d2:	4b1d      	ldr	r3, [pc, #116]	; (8009248 <USBD_LL_Init+0xac>)
 80091d4:	2200      	movs	r2, #0
 80091d6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80091d8:	481b      	ldr	r0, [pc, #108]	; (8009248 <USBD_LL_Init+0xac>)
 80091da:	f7f8 f987 	bl	80014ec <HAL_PCD_Init>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d001      	beq.n	80091e8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80091e4:	f7f7 fc5e 	bl	8000aa4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80091ee:	2318      	movs	r3, #24
 80091f0:	2200      	movs	r2, #0
 80091f2:	2100      	movs	r1, #0
 80091f4:	f7f9 fd64 	bl	8002cc0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80091fe:	2358      	movs	r3, #88	; 0x58
 8009200:	2200      	movs	r2, #0
 8009202:	2180      	movs	r1, #128	; 0x80
 8009204:	f7f9 fd5c 	bl	8002cc0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800920e:	23c0      	movs	r3, #192	; 0xc0
 8009210:	2200      	movs	r2, #0
 8009212:	2181      	movs	r1, #129	; 0x81
 8009214:	f7f9 fd54 	bl	8002cc0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800921e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009222:	2200      	movs	r2, #0
 8009224:	2101      	movs	r1, #1
 8009226:	f7f9 fd4b 	bl	8002cc0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009230:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009234:	2200      	movs	r2, #0
 8009236:	2182      	movs	r1, #130	; 0x82
 8009238:	f7f9 fd42 	bl	8002cc0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	3708      	adds	r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	20001988 	.word	0x20001988
 800924c:	40005c00 	.word	0x40005c00

08009250 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009258:	2300      	movs	r3, #0
 800925a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800925c:	2300      	movs	r3, #0
 800925e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009266:	4618      	mov	r0, r3
 8009268:	f7f8 fa1e 	bl	80016a8 <HAL_PCD_Start>
 800926c:	4603      	mov	r3, r0
 800926e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009270:	7bfb      	ldrb	r3, [r7, #15]
 8009272:	4618      	mov	r0, r3
 8009274:	f000 f944 	bl	8009500 <USBD_Get_USB_Status>
 8009278:	4603      	mov	r3, r0
 800927a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800927c:	7bbb      	ldrb	r3, [r7, #14]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b084      	sub	sp, #16
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
 800928e:	4608      	mov	r0, r1
 8009290:	4611      	mov	r1, r2
 8009292:	461a      	mov	r2, r3
 8009294:	4603      	mov	r3, r0
 8009296:	70fb      	strb	r3, [r7, #3]
 8009298:	460b      	mov	r3, r1
 800929a:	70bb      	strb	r3, [r7, #2]
 800929c:	4613      	mov	r3, r2
 800929e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092a0:	2300      	movs	r3, #0
 80092a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092a4:	2300      	movs	r3, #0
 80092a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80092ae:	78bb      	ldrb	r3, [r7, #2]
 80092b0:	883a      	ldrh	r2, [r7, #0]
 80092b2:	78f9      	ldrb	r1, [r7, #3]
 80092b4:	f7f8 fb3a 	bl	800192c <HAL_PCD_EP_Open>
 80092b8:	4603      	mov	r3, r0
 80092ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
 80092be:	4618      	mov	r0, r3
 80092c0:	f000 f91e 	bl	8009500 <USBD_Get_USB_Status>
 80092c4:	4603      	mov	r3, r0
 80092c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b084      	sub	sp, #16
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
 80092da:	460b      	mov	r3, r1
 80092dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092e2:	2300      	movs	r3, #0
 80092e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80092ec:	78fa      	ldrb	r2, [r7, #3]
 80092ee:	4611      	mov	r1, r2
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7f8 fb81 	bl	80019f8 <HAL_PCD_EP_Close>
 80092f6:	4603      	mov	r3, r0
 80092f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092fa:	7bfb      	ldrb	r3, [r7, #15]
 80092fc:	4618      	mov	r0, r3
 80092fe:	f000 f8ff 	bl	8009500 <USBD_Get_USB_Status>
 8009302:	4603      	mov	r3, r0
 8009304:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009306:	7bbb      	ldrb	r3, [r7, #14]
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	460b      	mov	r3, r1
 800931a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800931c:	2300      	movs	r3, #0
 800931e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009320:	2300      	movs	r3, #0
 8009322:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800932a:	78fa      	ldrb	r2, [r7, #3]
 800932c:	4611      	mov	r1, r2
 800932e:	4618      	mov	r0, r3
 8009330:	f7f8 fc41 	bl	8001bb6 <HAL_PCD_EP_SetStall>
 8009334:	4603      	mov	r3, r0
 8009336:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009338:	7bfb      	ldrb	r3, [r7, #15]
 800933a:	4618      	mov	r0, r3
 800933c:	f000 f8e0 	bl	8009500 <USBD_Get_USB_Status>
 8009340:	4603      	mov	r3, r0
 8009342:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009344:	7bbb      	ldrb	r3, [r7, #14]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b084      	sub	sp, #16
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
 8009356:	460b      	mov	r3, r1
 8009358:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800935a:	2300      	movs	r3, #0
 800935c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800935e:	2300      	movs	r3, #0
 8009360:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009368:	78fa      	ldrb	r2, [r7, #3]
 800936a:	4611      	mov	r1, r2
 800936c:	4618      	mov	r0, r3
 800936e:	f7f8 fc74 	bl	8001c5a <HAL_PCD_EP_ClrStall>
 8009372:	4603      	mov	r3, r0
 8009374:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009376:	7bfb      	ldrb	r3, [r7, #15]
 8009378:	4618      	mov	r0, r3
 800937a:	f000 f8c1 	bl	8009500 <USBD_Get_USB_Status>
 800937e:	4603      	mov	r3, r0
 8009380:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009382:	7bbb      	ldrb	r3, [r7, #14]
}
 8009384:	4618      	mov	r0, r3
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800938c:	b480      	push	{r7}
 800938e:	b085      	sub	sp, #20
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	460b      	mov	r3, r1
 8009396:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800939e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80093a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	da0c      	bge.n	80093c2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80093a8:	78fb      	ldrb	r3, [r7, #3]
 80093aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093ae:	68f9      	ldr	r1, [r7, #12]
 80093b0:	1c5a      	adds	r2, r3, #1
 80093b2:	4613      	mov	r3, r2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	4413      	add	r3, r2
 80093b8:	00db      	lsls	r3, r3, #3
 80093ba:	440b      	add	r3, r1
 80093bc:	3302      	adds	r3, #2
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	e00b      	b.n	80093da <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80093c2:	78fb      	ldrb	r3, [r7, #3]
 80093c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093c8:	68f9      	ldr	r1, [r7, #12]
 80093ca:	4613      	mov	r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	4413      	add	r3, r2
 80093d0:	00db      	lsls	r3, r3, #3
 80093d2:	440b      	add	r3, r1
 80093d4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80093d8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3714      	adds	r7, #20
 80093de:	46bd      	mov	sp, r7
 80093e0:	bc80      	pop	{r7}
 80093e2:	4770      	bx	lr

080093e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	460b      	mov	r3, r1
 80093ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093f0:	2300      	movs	r3, #0
 80093f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093f4:	2300      	movs	r3, #0
 80093f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80093fe:	78fa      	ldrb	r2, [r7, #3]
 8009400:	4611      	mov	r1, r2
 8009402:	4618      	mov	r0, r3
 8009404:	f7f8 fa6d 	bl	80018e2 <HAL_PCD_SetAddress>
 8009408:	4603      	mov	r3, r0
 800940a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800940c:	7bfb      	ldrb	r3, [r7, #15]
 800940e:	4618      	mov	r0, r3
 8009410:	f000 f876 	bl	8009500 <USBD_Get_USB_Status>
 8009414:	4603      	mov	r3, r0
 8009416:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009418:	7bbb      	ldrb	r3, [r7, #14]
}
 800941a:	4618      	mov	r0, r3
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b086      	sub	sp, #24
 8009426:	af00      	add	r7, sp, #0
 8009428:	60f8      	str	r0, [r7, #12]
 800942a:	607a      	str	r2, [r7, #4]
 800942c:	461a      	mov	r2, r3
 800942e:	460b      	mov	r3, r1
 8009430:	72fb      	strb	r3, [r7, #11]
 8009432:	4613      	mov	r3, r2
 8009434:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009436:	2300      	movs	r3, #0
 8009438:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800943a:	2300      	movs	r3, #0
 800943c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009444:	893b      	ldrh	r3, [r7, #8]
 8009446:	7af9      	ldrb	r1, [r7, #11]
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	f7f8 fb71 	bl	8001b30 <HAL_PCD_EP_Transmit>
 800944e:	4603      	mov	r3, r0
 8009450:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009452:	7dfb      	ldrb	r3, [r7, #23]
 8009454:	4618      	mov	r0, r3
 8009456:	f000 f853 	bl	8009500 <USBD_Get_USB_Status>
 800945a:	4603      	mov	r3, r0
 800945c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800945e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009460:	4618      	mov	r0, r3
 8009462:	3718      	adds	r7, #24
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b086      	sub	sp, #24
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	607a      	str	r2, [r7, #4]
 8009472:	461a      	mov	r2, r3
 8009474:	460b      	mov	r3, r1
 8009476:	72fb      	strb	r3, [r7, #11]
 8009478:	4613      	mov	r3, r2
 800947a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800947c:	2300      	movs	r3, #0
 800947e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009480:	2300      	movs	r3, #0
 8009482:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800948a:	893b      	ldrh	r3, [r7, #8]
 800948c:	7af9      	ldrb	r1, [r7, #11]
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	f7f8 fafa 	bl	8001a88 <HAL_PCD_EP_Receive>
 8009494:	4603      	mov	r3, r0
 8009496:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009498:	7dfb      	ldrb	r3, [r7, #23]
 800949a:	4618      	mov	r0, r3
 800949c:	f000 f830 	bl	8009500 <USBD_Get_USB_Status>
 80094a0:	4603      	mov	r3, r0
 80094a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80094a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3718      	adds	r7, #24
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b082      	sub	sp, #8
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
 80094b6:	460b      	mov	r3, r1
 80094b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80094c0:	78fa      	ldrb	r2, [r7, #3]
 80094c2:	4611      	mov	r1, r2
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7f8 fb1c 	bl	8001b02 <HAL_PCD_EP_GetRxCount>
 80094ca:	4603      	mov	r3, r0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80094dc:	4b02      	ldr	r3, [pc, #8]	; (80094e8 <USBD_static_malloc+0x14>)
}
 80094de:	4618      	mov	r0, r3
 80094e0:	370c      	adds	r7, #12
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bc80      	pop	{r7}
 80094e6:	4770      	bx	lr
 80094e8:	20001c74 	.word	0x20001c74

080094ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]

}
 80094f4:	bf00      	nop
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bc80      	pop	{r7}
 80094fc:	4770      	bx	lr
	...

08009500 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	4603      	mov	r3, r0
 8009508:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800950e:	79fb      	ldrb	r3, [r7, #7]
 8009510:	2b03      	cmp	r3, #3
 8009512:	d817      	bhi.n	8009544 <USBD_Get_USB_Status+0x44>
 8009514:	a201      	add	r2, pc, #4	; (adr r2, 800951c <USBD_Get_USB_Status+0x1c>)
 8009516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800951a:	bf00      	nop
 800951c:	0800952d 	.word	0x0800952d
 8009520:	08009533 	.word	0x08009533
 8009524:	08009539 	.word	0x08009539
 8009528:	0800953f 	.word	0x0800953f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800952c:	2300      	movs	r3, #0
 800952e:	73fb      	strb	r3, [r7, #15]
    break;
 8009530:	e00b      	b.n	800954a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009532:	2302      	movs	r3, #2
 8009534:	73fb      	strb	r3, [r7, #15]
    break;
 8009536:	e008      	b.n	800954a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009538:	2301      	movs	r3, #1
 800953a:	73fb      	strb	r3, [r7, #15]
    break;
 800953c:	e005      	b.n	800954a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800953e:	2302      	movs	r3, #2
 8009540:	73fb      	strb	r3, [r7, #15]
    break;
 8009542:	e002      	b.n	800954a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009544:	2302      	movs	r3, #2
 8009546:	73fb      	strb	r3, [r7, #15]
    break;
 8009548:	bf00      	nop
  }
  return usb_status;
 800954a:	7bfb      	ldrb	r3, [r7, #15]
}
 800954c:	4618      	mov	r0, r3
 800954e:	3714      	adds	r7, #20
 8009550:	46bd      	mov	sp, r7
 8009552:	bc80      	pop	{r7}
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop

08009558 <__errno>:
 8009558:	4b01      	ldr	r3, [pc, #4]	; (8009560 <__errno+0x8>)
 800955a:	6818      	ldr	r0, [r3, #0]
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	200002e0 	.word	0x200002e0

08009564 <__libc_init_array>:
 8009564:	b570      	push	{r4, r5, r6, lr}
 8009566:	2600      	movs	r6, #0
 8009568:	4d0c      	ldr	r5, [pc, #48]	; (800959c <__libc_init_array+0x38>)
 800956a:	4c0d      	ldr	r4, [pc, #52]	; (80095a0 <__libc_init_array+0x3c>)
 800956c:	1b64      	subs	r4, r4, r5
 800956e:	10a4      	asrs	r4, r4, #2
 8009570:	42a6      	cmp	r6, r4
 8009572:	d109      	bne.n	8009588 <__libc_init_array+0x24>
 8009574:	f001 faf4 	bl	800ab60 <_init>
 8009578:	2600      	movs	r6, #0
 800957a:	4d0a      	ldr	r5, [pc, #40]	; (80095a4 <__libc_init_array+0x40>)
 800957c:	4c0a      	ldr	r4, [pc, #40]	; (80095a8 <__libc_init_array+0x44>)
 800957e:	1b64      	subs	r4, r4, r5
 8009580:	10a4      	asrs	r4, r4, #2
 8009582:	42a6      	cmp	r6, r4
 8009584:	d105      	bne.n	8009592 <__libc_init_array+0x2e>
 8009586:	bd70      	pop	{r4, r5, r6, pc}
 8009588:	f855 3b04 	ldr.w	r3, [r5], #4
 800958c:	4798      	blx	r3
 800958e:	3601      	adds	r6, #1
 8009590:	e7ee      	b.n	8009570 <__libc_init_array+0xc>
 8009592:	f855 3b04 	ldr.w	r3, [r5], #4
 8009596:	4798      	blx	r3
 8009598:	3601      	adds	r6, #1
 800959a:	e7f2      	b.n	8009582 <__libc_init_array+0x1e>
 800959c:	0800b200 	.word	0x0800b200
 80095a0:	0800b200 	.word	0x0800b200
 80095a4:	0800b200 	.word	0x0800b200
 80095a8:	0800b204 	.word	0x0800b204

080095ac <memcpy>:
 80095ac:	440a      	add	r2, r1
 80095ae:	4291      	cmp	r1, r2
 80095b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80095b4:	d100      	bne.n	80095b8 <memcpy+0xc>
 80095b6:	4770      	bx	lr
 80095b8:	b510      	push	{r4, lr}
 80095ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095be:	4291      	cmp	r1, r2
 80095c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095c4:	d1f9      	bne.n	80095ba <memcpy+0xe>
 80095c6:	bd10      	pop	{r4, pc}

080095c8 <memset>:
 80095c8:	4603      	mov	r3, r0
 80095ca:	4402      	add	r2, r0
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d100      	bne.n	80095d2 <memset+0xa>
 80095d0:	4770      	bx	lr
 80095d2:	f803 1b01 	strb.w	r1, [r3], #1
 80095d6:	e7f9      	b.n	80095cc <memset+0x4>

080095d8 <siprintf>:
 80095d8:	b40e      	push	{r1, r2, r3}
 80095da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80095de:	b500      	push	{lr}
 80095e0:	b09c      	sub	sp, #112	; 0x70
 80095e2:	ab1d      	add	r3, sp, #116	; 0x74
 80095e4:	9002      	str	r0, [sp, #8]
 80095e6:	9006      	str	r0, [sp, #24]
 80095e8:	9107      	str	r1, [sp, #28]
 80095ea:	9104      	str	r1, [sp, #16]
 80095ec:	4808      	ldr	r0, [pc, #32]	; (8009610 <siprintf+0x38>)
 80095ee:	4909      	ldr	r1, [pc, #36]	; (8009614 <siprintf+0x3c>)
 80095f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80095f4:	9105      	str	r1, [sp, #20]
 80095f6:	6800      	ldr	r0, [r0, #0]
 80095f8:	a902      	add	r1, sp, #8
 80095fa:	9301      	str	r3, [sp, #4]
 80095fc:	f000 fa72 	bl	8009ae4 <_svfiprintf_r>
 8009600:	2200      	movs	r2, #0
 8009602:	9b02      	ldr	r3, [sp, #8]
 8009604:	701a      	strb	r2, [r3, #0]
 8009606:	b01c      	add	sp, #112	; 0x70
 8009608:	f85d eb04 	ldr.w	lr, [sp], #4
 800960c:	b003      	add	sp, #12
 800960e:	4770      	bx	lr
 8009610:	200002e0 	.word	0x200002e0
 8009614:	ffff0208 	.word	0xffff0208

08009618 <strncmp>:
 8009618:	4603      	mov	r3, r0
 800961a:	b510      	push	{r4, lr}
 800961c:	b172      	cbz	r2, 800963c <strncmp+0x24>
 800961e:	3901      	subs	r1, #1
 8009620:	1884      	adds	r4, r0, r2
 8009622:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009626:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800962a:	4290      	cmp	r0, r2
 800962c:	d101      	bne.n	8009632 <strncmp+0x1a>
 800962e:	42a3      	cmp	r3, r4
 8009630:	d101      	bne.n	8009636 <strncmp+0x1e>
 8009632:	1a80      	subs	r0, r0, r2
 8009634:	bd10      	pop	{r4, pc}
 8009636:	2800      	cmp	r0, #0
 8009638:	d1f3      	bne.n	8009622 <strncmp+0xa>
 800963a:	e7fa      	b.n	8009632 <strncmp+0x1a>
 800963c:	4610      	mov	r0, r2
 800963e:	e7f9      	b.n	8009634 <strncmp+0x1c>

08009640 <strtok>:
 8009640:	4b16      	ldr	r3, [pc, #88]	; (800969c <strtok+0x5c>)
 8009642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009646:	681f      	ldr	r7, [r3, #0]
 8009648:	4605      	mov	r5, r0
 800964a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800964c:	460e      	mov	r6, r1
 800964e:	b9ec      	cbnz	r4, 800968c <strtok+0x4c>
 8009650:	2050      	movs	r0, #80	; 0x50
 8009652:	f000 f907 	bl	8009864 <malloc>
 8009656:	4602      	mov	r2, r0
 8009658:	65b8      	str	r0, [r7, #88]	; 0x58
 800965a:	b920      	cbnz	r0, 8009666 <strtok+0x26>
 800965c:	2157      	movs	r1, #87	; 0x57
 800965e:	4b10      	ldr	r3, [pc, #64]	; (80096a0 <strtok+0x60>)
 8009660:	4810      	ldr	r0, [pc, #64]	; (80096a4 <strtok+0x64>)
 8009662:	f000 f8cf 	bl	8009804 <__assert_func>
 8009666:	e9c0 4400 	strd	r4, r4, [r0]
 800966a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800966e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009672:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009676:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800967a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800967e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009682:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009686:	6184      	str	r4, [r0, #24]
 8009688:	7704      	strb	r4, [r0, #28]
 800968a:	6244      	str	r4, [r0, #36]	; 0x24
 800968c:	4631      	mov	r1, r6
 800968e:	4628      	mov	r0, r5
 8009690:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009692:	2301      	movs	r3, #1
 8009694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009698:	f000 b806 	b.w	80096a8 <__strtok_r>
 800969c:	200002e0 	.word	0x200002e0
 80096a0:	0800afb4 	.word	0x0800afb4
 80096a4:	0800afcb 	.word	0x0800afcb

080096a8 <__strtok_r>:
 80096a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096aa:	b908      	cbnz	r0, 80096b0 <__strtok_r+0x8>
 80096ac:	6810      	ldr	r0, [r2, #0]
 80096ae:	b188      	cbz	r0, 80096d4 <__strtok_r+0x2c>
 80096b0:	4604      	mov	r4, r0
 80096b2:	460f      	mov	r7, r1
 80096b4:	4620      	mov	r0, r4
 80096b6:	f814 5b01 	ldrb.w	r5, [r4], #1
 80096ba:	f817 6b01 	ldrb.w	r6, [r7], #1
 80096be:	b91e      	cbnz	r6, 80096c8 <__strtok_r+0x20>
 80096c0:	b965      	cbnz	r5, 80096dc <__strtok_r+0x34>
 80096c2:	4628      	mov	r0, r5
 80096c4:	6015      	str	r5, [r2, #0]
 80096c6:	e005      	b.n	80096d4 <__strtok_r+0x2c>
 80096c8:	42b5      	cmp	r5, r6
 80096ca:	d1f6      	bne.n	80096ba <__strtok_r+0x12>
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d1f0      	bne.n	80096b2 <__strtok_r+0xa>
 80096d0:	6014      	str	r4, [r2, #0]
 80096d2:	7003      	strb	r3, [r0, #0]
 80096d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096d6:	461c      	mov	r4, r3
 80096d8:	e00c      	b.n	80096f4 <__strtok_r+0x4c>
 80096da:	b915      	cbnz	r5, 80096e2 <__strtok_r+0x3a>
 80096dc:	460e      	mov	r6, r1
 80096de:	f814 3b01 	ldrb.w	r3, [r4], #1
 80096e2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80096e6:	42ab      	cmp	r3, r5
 80096e8:	d1f7      	bne.n	80096da <__strtok_r+0x32>
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d0f3      	beq.n	80096d6 <__strtok_r+0x2e>
 80096ee:	2300      	movs	r3, #0
 80096f0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80096f4:	6014      	str	r4, [r2, #0]
 80096f6:	e7ed      	b.n	80096d4 <__strtok_r+0x2c>

080096f8 <_strtol_l.constprop.0>:
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096fe:	4680      	mov	r8, r0
 8009700:	d001      	beq.n	8009706 <_strtol_l.constprop.0+0xe>
 8009702:	2b24      	cmp	r3, #36	; 0x24
 8009704:	d906      	bls.n	8009714 <_strtol_l.constprop.0+0x1c>
 8009706:	f7ff ff27 	bl	8009558 <__errno>
 800970a:	2316      	movs	r3, #22
 800970c:	6003      	str	r3, [r0, #0]
 800970e:	2000      	movs	r0, #0
 8009710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009714:	460d      	mov	r5, r1
 8009716:	4f35      	ldr	r7, [pc, #212]	; (80097ec <_strtol_l.constprop.0+0xf4>)
 8009718:	4628      	mov	r0, r5
 800971a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800971e:	5de6      	ldrb	r6, [r4, r7]
 8009720:	f016 0608 	ands.w	r6, r6, #8
 8009724:	d1f8      	bne.n	8009718 <_strtol_l.constprop.0+0x20>
 8009726:	2c2d      	cmp	r4, #45	; 0x2d
 8009728:	d12f      	bne.n	800978a <_strtol_l.constprop.0+0x92>
 800972a:	2601      	movs	r6, #1
 800972c:	782c      	ldrb	r4, [r5, #0]
 800972e:	1c85      	adds	r5, r0, #2
 8009730:	2b00      	cmp	r3, #0
 8009732:	d057      	beq.n	80097e4 <_strtol_l.constprop.0+0xec>
 8009734:	2b10      	cmp	r3, #16
 8009736:	d109      	bne.n	800974c <_strtol_l.constprop.0+0x54>
 8009738:	2c30      	cmp	r4, #48	; 0x30
 800973a:	d107      	bne.n	800974c <_strtol_l.constprop.0+0x54>
 800973c:	7828      	ldrb	r0, [r5, #0]
 800973e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009742:	2858      	cmp	r0, #88	; 0x58
 8009744:	d149      	bne.n	80097da <_strtol_l.constprop.0+0xe2>
 8009746:	2310      	movs	r3, #16
 8009748:	786c      	ldrb	r4, [r5, #1]
 800974a:	3502      	adds	r5, #2
 800974c:	2700      	movs	r7, #0
 800974e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8009752:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009756:	fbbe f9f3 	udiv	r9, lr, r3
 800975a:	4638      	mov	r0, r7
 800975c:	fb03 ea19 	mls	sl, r3, r9, lr
 8009760:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009764:	f1bc 0f09 	cmp.w	ip, #9
 8009768:	d814      	bhi.n	8009794 <_strtol_l.constprop.0+0x9c>
 800976a:	4664      	mov	r4, ip
 800976c:	42a3      	cmp	r3, r4
 800976e:	dd22      	ble.n	80097b6 <_strtol_l.constprop.0+0xbe>
 8009770:	2f00      	cmp	r7, #0
 8009772:	db1d      	blt.n	80097b0 <_strtol_l.constprop.0+0xb8>
 8009774:	4581      	cmp	r9, r0
 8009776:	d31b      	bcc.n	80097b0 <_strtol_l.constprop.0+0xb8>
 8009778:	d101      	bne.n	800977e <_strtol_l.constprop.0+0x86>
 800977a:	45a2      	cmp	sl, r4
 800977c:	db18      	blt.n	80097b0 <_strtol_l.constprop.0+0xb8>
 800977e:	2701      	movs	r7, #1
 8009780:	fb00 4003 	mla	r0, r0, r3, r4
 8009784:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009788:	e7ea      	b.n	8009760 <_strtol_l.constprop.0+0x68>
 800978a:	2c2b      	cmp	r4, #43	; 0x2b
 800978c:	bf04      	itt	eq
 800978e:	782c      	ldrbeq	r4, [r5, #0]
 8009790:	1c85      	addeq	r5, r0, #2
 8009792:	e7cd      	b.n	8009730 <_strtol_l.constprop.0+0x38>
 8009794:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009798:	f1bc 0f19 	cmp.w	ip, #25
 800979c:	d801      	bhi.n	80097a2 <_strtol_l.constprop.0+0xaa>
 800979e:	3c37      	subs	r4, #55	; 0x37
 80097a0:	e7e4      	b.n	800976c <_strtol_l.constprop.0+0x74>
 80097a2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80097a6:	f1bc 0f19 	cmp.w	ip, #25
 80097aa:	d804      	bhi.n	80097b6 <_strtol_l.constprop.0+0xbe>
 80097ac:	3c57      	subs	r4, #87	; 0x57
 80097ae:	e7dd      	b.n	800976c <_strtol_l.constprop.0+0x74>
 80097b0:	f04f 37ff 	mov.w	r7, #4294967295
 80097b4:	e7e6      	b.n	8009784 <_strtol_l.constprop.0+0x8c>
 80097b6:	2f00      	cmp	r7, #0
 80097b8:	da07      	bge.n	80097ca <_strtol_l.constprop.0+0xd2>
 80097ba:	2322      	movs	r3, #34	; 0x22
 80097bc:	4670      	mov	r0, lr
 80097be:	f8c8 3000 	str.w	r3, [r8]
 80097c2:	2a00      	cmp	r2, #0
 80097c4:	d0a4      	beq.n	8009710 <_strtol_l.constprop.0+0x18>
 80097c6:	1e69      	subs	r1, r5, #1
 80097c8:	e005      	b.n	80097d6 <_strtol_l.constprop.0+0xde>
 80097ca:	b106      	cbz	r6, 80097ce <_strtol_l.constprop.0+0xd6>
 80097cc:	4240      	negs	r0, r0
 80097ce:	2a00      	cmp	r2, #0
 80097d0:	d09e      	beq.n	8009710 <_strtol_l.constprop.0+0x18>
 80097d2:	2f00      	cmp	r7, #0
 80097d4:	d1f7      	bne.n	80097c6 <_strtol_l.constprop.0+0xce>
 80097d6:	6011      	str	r1, [r2, #0]
 80097d8:	e79a      	b.n	8009710 <_strtol_l.constprop.0+0x18>
 80097da:	2430      	movs	r4, #48	; 0x30
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d1b5      	bne.n	800974c <_strtol_l.constprop.0+0x54>
 80097e0:	2308      	movs	r3, #8
 80097e2:	e7b3      	b.n	800974c <_strtol_l.constprop.0+0x54>
 80097e4:	2c30      	cmp	r4, #48	; 0x30
 80097e6:	d0a9      	beq.n	800973c <_strtol_l.constprop.0+0x44>
 80097e8:	230a      	movs	r3, #10
 80097ea:	e7af      	b.n	800974c <_strtol_l.constprop.0+0x54>
 80097ec:	0800b065 	.word	0x0800b065

080097f0 <strtol>:
 80097f0:	4613      	mov	r3, r2
 80097f2:	460a      	mov	r2, r1
 80097f4:	4601      	mov	r1, r0
 80097f6:	4802      	ldr	r0, [pc, #8]	; (8009800 <strtol+0x10>)
 80097f8:	6800      	ldr	r0, [r0, #0]
 80097fa:	f7ff bf7d 	b.w	80096f8 <_strtol_l.constprop.0>
 80097fe:	bf00      	nop
 8009800:	200002e0 	.word	0x200002e0

08009804 <__assert_func>:
 8009804:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009806:	4614      	mov	r4, r2
 8009808:	461a      	mov	r2, r3
 800980a:	4b09      	ldr	r3, [pc, #36]	; (8009830 <__assert_func+0x2c>)
 800980c:	4605      	mov	r5, r0
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	68d8      	ldr	r0, [r3, #12]
 8009812:	b14c      	cbz	r4, 8009828 <__assert_func+0x24>
 8009814:	4b07      	ldr	r3, [pc, #28]	; (8009834 <__assert_func+0x30>)
 8009816:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800981a:	9100      	str	r1, [sp, #0]
 800981c:	462b      	mov	r3, r5
 800981e:	4906      	ldr	r1, [pc, #24]	; (8009838 <__assert_func+0x34>)
 8009820:	f000 f80e 	bl	8009840 <fiprintf>
 8009824:	f000 fe1c 	bl	800a460 <abort>
 8009828:	4b04      	ldr	r3, [pc, #16]	; (800983c <__assert_func+0x38>)
 800982a:	461c      	mov	r4, r3
 800982c:	e7f3      	b.n	8009816 <__assert_func+0x12>
 800982e:	bf00      	nop
 8009830:	200002e0 	.word	0x200002e0
 8009834:	0800b028 	.word	0x0800b028
 8009838:	0800b035 	.word	0x0800b035
 800983c:	0800b063 	.word	0x0800b063

08009840 <fiprintf>:
 8009840:	b40e      	push	{r1, r2, r3}
 8009842:	b503      	push	{r0, r1, lr}
 8009844:	4601      	mov	r1, r0
 8009846:	ab03      	add	r3, sp, #12
 8009848:	4805      	ldr	r0, [pc, #20]	; (8009860 <fiprintf+0x20>)
 800984a:	f853 2b04 	ldr.w	r2, [r3], #4
 800984e:	6800      	ldr	r0, [r0, #0]
 8009850:	9301      	str	r3, [sp, #4]
 8009852:	f000 fa6f 	bl	8009d34 <_vfiprintf_r>
 8009856:	b002      	add	sp, #8
 8009858:	f85d eb04 	ldr.w	lr, [sp], #4
 800985c:	b003      	add	sp, #12
 800985e:	4770      	bx	lr
 8009860:	200002e0 	.word	0x200002e0

08009864 <malloc>:
 8009864:	4b02      	ldr	r3, [pc, #8]	; (8009870 <malloc+0xc>)
 8009866:	4601      	mov	r1, r0
 8009868:	6818      	ldr	r0, [r3, #0]
 800986a:	f000 b86b 	b.w	8009944 <_malloc_r>
 800986e:	bf00      	nop
 8009870:	200002e0 	.word	0x200002e0

08009874 <_free_r>:
 8009874:	b538      	push	{r3, r4, r5, lr}
 8009876:	4605      	mov	r5, r0
 8009878:	2900      	cmp	r1, #0
 800987a:	d040      	beq.n	80098fe <_free_r+0x8a>
 800987c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009880:	1f0c      	subs	r4, r1, #4
 8009882:	2b00      	cmp	r3, #0
 8009884:	bfb8      	it	lt
 8009886:	18e4      	addlt	r4, r4, r3
 8009888:	f001 f836 	bl	800a8f8 <__malloc_lock>
 800988c:	4a1c      	ldr	r2, [pc, #112]	; (8009900 <_free_r+0x8c>)
 800988e:	6813      	ldr	r3, [r2, #0]
 8009890:	b933      	cbnz	r3, 80098a0 <_free_r+0x2c>
 8009892:	6063      	str	r3, [r4, #4]
 8009894:	6014      	str	r4, [r2, #0]
 8009896:	4628      	mov	r0, r5
 8009898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800989c:	f001 b832 	b.w	800a904 <__malloc_unlock>
 80098a0:	42a3      	cmp	r3, r4
 80098a2:	d908      	bls.n	80098b6 <_free_r+0x42>
 80098a4:	6820      	ldr	r0, [r4, #0]
 80098a6:	1821      	adds	r1, r4, r0
 80098a8:	428b      	cmp	r3, r1
 80098aa:	bf01      	itttt	eq
 80098ac:	6819      	ldreq	r1, [r3, #0]
 80098ae:	685b      	ldreq	r3, [r3, #4]
 80098b0:	1809      	addeq	r1, r1, r0
 80098b2:	6021      	streq	r1, [r4, #0]
 80098b4:	e7ed      	b.n	8009892 <_free_r+0x1e>
 80098b6:	461a      	mov	r2, r3
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	b10b      	cbz	r3, 80098c0 <_free_r+0x4c>
 80098bc:	42a3      	cmp	r3, r4
 80098be:	d9fa      	bls.n	80098b6 <_free_r+0x42>
 80098c0:	6811      	ldr	r1, [r2, #0]
 80098c2:	1850      	adds	r0, r2, r1
 80098c4:	42a0      	cmp	r0, r4
 80098c6:	d10b      	bne.n	80098e0 <_free_r+0x6c>
 80098c8:	6820      	ldr	r0, [r4, #0]
 80098ca:	4401      	add	r1, r0
 80098cc:	1850      	adds	r0, r2, r1
 80098ce:	4283      	cmp	r3, r0
 80098d0:	6011      	str	r1, [r2, #0]
 80098d2:	d1e0      	bne.n	8009896 <_free_r+0x22>
 80098d4:	6818      	ldr	r0, [r3, #0]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	4401      	add	r1, r0
 80098da:	6011      	str	r1, [r2, #0]
 80098dc:	6053      	str	r3, [r2, #4]
 80098de:	e7da      	b.n	8009896 <_free_r+0x22>
 80098e0:	d902      	bls.n	80098e8 <_free_r+0x74>
 80098e2:	230c      	movs	r3, #12
 80098e4:	602b      	str	r3, [r5, #0]
 80098e6:	e7d6      	b.n	8009896 <_free_r+0x22>
 80098e8:	6820      	ldr	r0, [r4, #0]
 80098ea:	1821      	adds	r1, r4, r0
 80098ec:	428b      	cmp	r3, r1
 80098ee:	bf01      	itttt	eq
 80098f0:	6819      	ldreq	r1, [r3, #0]
 80098f2:	685b      	ldreq	r3, [r3, #4]
 80098f4:	1809      	addeq	r1, r1, r0
 80098f6:	6021      	streq	r1, [r4, #0]
 80098f8:	6063      	str	r3, [r4, #4]
 80098fa:	6054      	str	r4, [r2, #4]
 80098fc:	e7cb      	b.n	8009896 <_free_r+0x22>
 80098fe:	bd38      	pop	{r3, r4, r5, pc}
 8009900:	20001e94 	.word	0x20001e94

08009904 <sbrk_aligned>:
 8009904:	b570      	push	{r4, r5, r6, lr}
 8009906:	4e0e      	ldr	r6, [pc, #56]	; (8009940 <sbrk_aligned+0x3c>)
 8009908:	460c      	mov	r4, r1
 800990a:	6831      	ldr	r1, [r6, #0]
 800990c:	4605      	mov	r5, r0
 800990e:	b911      	cbnz	r1, 8009916 <sbrk_aligned+0x12>
 8009910:	f000 fcd6 	bl	800a2c0 <_sbrk_r>
 8009914:	6030      	str	r0, [r6, #0]
 8009916:	4621      	mov	r1, r4
 8009918:	4628      	mov	r0, r5
 800991a:	f000 fcd1 	bl	800a2c0 <_sbrk_r>
 800991e:	1c43      	adds	r3, r0, #1
 8009920:	d00a      	beq.n	8009938 <sbrk_aligned+0x34>
 8009922:	1cc4      	adds	r4, r0, #3
 8009924:	f024 0403 	bic.w	r4, r4, #3
 8009928:	42a0      	cmp	r0, r4
 800992a:	d007      	beq.n	800993c <sbrk_aligned+0x38>
 800992c:	1a21      	subs	r1, r4, r0
 800992e:	4628      	mov	r0, r5
 8009930:	f000 fcc6 	bl	800a2c0 <_sbrk_r>
 8009934:	3001      	adds	r0, #1
 8009936:	d101      	bne.n	800993c <sbrk_aligned+0x38>
 8009938:	f04f 34ff 	mov.w	r4, #4294967295
 800993c:	4620      	mov	r0, r4
 800993e:	bd70      	pop	{r4, r5, r6, pc}
 8009940:	20001e98 	.word	0x20001e98

08009944 <_malloc_r>:
 8009944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009948:	1ccd      	adds	r5, r1, #3
 800994a:	f025 0503 	bic.w	r5, r5, #3
 800994e:	3508      	adds	r5, #8
 8009950:	2d0c      	cmp	r5, #12
 8009952:	bf38      	it	cc
 8009954:	250c      	movcc	r5, #12
 8009956:	2d00      	cmp	r5, #0
 8009958:	4607      	mov	r7, r0
 800995a:	db01      	blt.n	8009960 <_malloc_r+0x1c>
 800995c:	42a9      	cmp	r1, r5
 800995e:	d905      	bls.n	800996c <_malloc_r+0x28>
 8009960:	230c      	movs	r3, #12
 8009962:	2600      	movs	r6, #0
 8009964:	603b      	str	r3, [r7, #0]
 8009966:	4630      	mov	r0, r6
 8009968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800996c:	4e2e      	ldr	r6, [pc, #184]	; (8009a28 <_malloc_r+0xe4>)
 800996e:	f000 ffc3 	bl	800a8f8 <__malloc_lock>
 8009972:	6833      	ldr	r3, [r6, #0]
 8009974:	461c      	mov	r4, r3
 8009976:	bb34      	cbnz	r4, 80099c6 <_malloc_r+0x82>
 8009978:	4629      	mov	r1, r5
 800997a:	4638      	mov	r0, r7
 800997c:	f7ff ffc2 	bl	8009904 <sbrk_aligned>
 8009980:	1c43      	adds	r3, r0, #1
 8009982:	4604      	mov	r4, r0
 8009984:	d14d      	bne.n	8009a22 <_malloc_r+0xde>
 8009986:	6834      	ldr	r4, [r6, #0]
 8009988:	4626      	mov	r6, r4
 800998a:	2e00      	cmp	r6, #0
 800998c:	d140      	bne.n	8009a10 <_malloc_r+0xcc>
 800998e:	6823      	ldr	r3, [r4, #0]
 8009990:	4631      	mov	r1, r6
 8009992:	4638      	mov	r0, r7
 8009994:	eb04 0803 	add.w	r8, r4, r3
 8009998:	f000 fc92 	bl	800a2c0 <_sbrk_r>
 800999c:	4580      	cmp	r8, r0
 800999e:	d13a      	bne.n	8009a16 <_malloc_r+0xd2>
 80099a0:	6821      	ldr	r1, [r4, #0]
 80099a2:	3503      	adds	r5, #3
 80099a4:	1a6d      	subs	r5, r5, r1
 80099a6:	f025 0503 	bic.w	r5, r5, #3
 80099aa:	3508      	adds	r5, #8
 80099ac:	2d0c      	cmp	r5, #12
 80099ae:	bf38      	it	cc
 80099b0:	250c      	movcc	r5, #12
 80099b2:	4638      	mov	r0, r7
 80099b4:	4629      	mov	r1, r5
 80099b6:	f7ff ffa5 	bl	8009904 <sbrk_aligned>
 80099ba:	3001      	adds	r0, #1
 80099bc:	d02b      	beq.n	8009a16 <_malloc_r+0xd2>
 80099be:	6823      	ldr	r3, [r4, #0]
 80099c0:	442b      	add	r3, r5
 80099c2:	6023      	str	r3, [r4, #0]
 80099c4:	e00e      	b.n	80099e4 <_malloc_r+0xa0>
 80099c6:	6822      	ldr	r2, [r4, #0]
 80099c8:	1b52      	subs	r2, r2, r5
 80099ca:	d41e      	bmi.n	8009a0a <_malloc_r+0xc6>
 80099cc:	2a0b      	cmp	r2, #11
 80099ce:	d916      	bls.n	80099fe <_malloc_r+0xba>
 80099d0:	1961      	adds	r1, r4, r5
 80099d2:	42a3      	cmp	r3, r4
 80099d4:	6025      	str	r5, [r4, #0]
 80099d6:	bf18      	it	ne
 80099d8:	6059      	strne	r1, [r3, #4]
 80099da:	6863      	ldr	r3, [r4, #4]
 80099dc:	bf08      	it	eq
 80099de:	6031      	streq	r1, [r6, #0]
 80099e0:	5162      	str	r2, [r4, r5]
 80099e2:	604b      	str	r3, [r1, #4]
 80099e4:	4638      	mov	r0, r7
 80099e6:	f104 060b 	add.w	r6, r4, #11
 80099ea:	f000 ff8b 	bl	800a904 <__malloc_unlock>
 80099ee:	f026 0607 	bic.w	r6, r6, #7
 80099f2:	1d23      	adds	r3, r4, #4
 80099f4:	1af2      	subs	r2, r6, r3
 80099f6:	d0b6      	beq.n	8009966 <_malloc_r+0x22>
 80099f8:	1b9b      	subs	r3, r3, r6
 80099fa:	50a3      	str	r3, [r4, r2]
 80099fc:	e7b3      	b.n	8009966 <_malloc_r+0x22>
 80099fe:	6862      	ldr	r2, [r4, #4]
 8009a00:	42a3      	cmp	r3, r4
 8009a02:	bf0c      	ite	eq
 8009a04:	6032      	streq	r2, [r6, #0]
 8009a06:	605a      	strne	r2, [r3, #4]
 8009a08:	e7ec      	b.n	80099e4 <_malloc_r+0xa0>
 8009a0a:	4623      	mov	r3, r4
 8009a0c:	6864      	ldr	r4, [r4, #4]
 8009a0e:	e7b2      	b.n	8009976 <_malloc_r+0x32>
 8009a10:	4634      	mov	r4, r6
 8009a12:	6876      	ldr	r6, [r6, #4]
 8009a14:	e7b9      	b.n	800998a <_malloc_r+0x46>
 8009a16:	230c      	movs	r3, #12
 8009a18:	4638      	mov	r0, r7
 8009a1a:	603b      	str	r3, [r7, #0]
 8009a1c:	f000 ff72 	bl	800a904 <__malloc_unlock>
 8009a20:	e7a1      	b.n	8009966 <_malloc_r+0x22>
 8009a22:	6025      	str	r5, [r4, #0]
 8009a24:	e7de      	b.n	80099e4 <_malloc_r+0xa0>
 8009a26:	bf00      	nop
 8009a28:	20001e94 	.word	0x20001e94

08009a2c <__ssputs_r>:
 8009a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a30:	688e      	ldr	r6, [r1, #8]
 8009a32:	4682      	mov	sl, r0
 8009a34:	429e      	cmp	r6, r3
 8009a36:	460c      	mov	r4, r1
 8009a38:	4690      	mov	r8, r2
 8009a3a:	461f      	mov	r7, r3
 8009a3c:	d838      	bhi.n	8009ab0 <__ssputs_r+0x84>
 8009a3e:	898a      	ldrh	r2, [r1, #12]
 8009a40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a44:	d032      	beq.n	8009aac <__ssputs_r+0x80>
 8009a46:	6825      	ldr	r5, [r4, #0]
 8009a48:	6909      	ldr	r1, [r1, #16]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	eba5 0901 	sub.w	r9, r5, r1
 8009a50:	6965      	ldr	r5, [r4, #20]
 8009a52:	444b      	add	r3, r9
 8009a54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a5c:	106d      	asrs	r5, r5, #1
 8009a5e:	429d      	cmp	r5, r3
 8009a60:	bf38      	it	cc
 8009a62:	461d      	movcc	r5, r3
 8009a64:	0553      	lsls	r3, r2, #21
 8009a66:	d531      	bpl.n	8009acc <__ssputs_r+0xa0>
 8009a68:	4629      	mov	r1, r5
 8009a6a:	f7ff ff6b 	bl	8009944 <_malloc_r>
 8009a6e:	4606      	mov	r6, r0
 8009a70:	b950      	cbnz	r0, 8009a88 <__ssputs_r+0x5c>
 8009a72:	230c      	movs	r3, #12
 8009a74:	f04f 30ff 	mov.w	r0, #4294967295
 8009a78:	f8ca 3000 	str.w	r3, [sl]
 8009a7c:	89a3      	ldrh	r3, [r4, #12]
 8009a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a82:	81a3      	strh	r3, [r4, #12]
 8009a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a88:	464a      	mov	r2, r9
 8009a8a:	6921      	ldr	r1, [r4, #16]
 8009a8c:	f7ff fd8e 	bl	80095ac <memcpy>
 8009a90:	89a3      	ldrh	r3, [r4, #12]
 8009a92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a9a:	81a3      	strh	r3, [r4, #12]
 8009a9c:	6126      	str	r6, [r4, #16]
 8009a9e:	444e      	add	r6, r9
 8009aa0:	6026      	str	r6, [r4, #0]
 8009aa2:	463e      	mov	r6, r7
 8009aa4:	6165      	str	r5, [r4, #20]
 8009aa6:	eba5 0509 	sub.w	r5, r5, r9
 8009aaa:	60a5      	str	r5, [r4, #8]
 8009aac:	42be      	cmp	r6, r7
 8009aae:	d900      	bls.n	8009ab2 <__ssputs_r+0x86>
 8009ab0:	463e      	mov	r6, r7
 8009ab2:	4632      	mov	r2, r6
 8009ab4:	4641      	mov	r1, r8
 8009ab6:	6820      	ldr	r0, [r4, #0]
 8009ab8:	f000 ff04 	bl	800a8c4 <memmove>
 8009abc:	68a3      	ldr	r3, [r4, #8]
 8009abe:	2000      	movs	r0, #0
 8009ac0:	1b9b      	subs	r3, r3, r6
 8009ac2:	60a3      	str	r3, [r4, #8]
 8009ac4:	6823      	ldr	r3, [r4, #0]
 8009ac6:	4433      	add	r3, r6
 8009ac8:	6023      	str	r3, [r4, #0]
 8009aca:	e7db      	b.n	8009a84 <__ssputs_r+0x58>
 8009acc:	462a      	mov	r2, r5
 8009ace:	f000 ff1f 	bl	800a910 <_realloc_r>
 8009ad2:	4606      	mov	r6, r0
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	d1e1      	bne.n	8009a9c <__ssputs_r+0x70>
 8009ad8:	4650      	mov	r0, sl
 8009ada:	6921      	ldr	r1, [r4, #16]
 8009adc:	f7ff feca 	bl	8009874 <_free_r>
 8009ae0:	e7c7      	b.n	8009a72 <__ssputs_r+0x46>
	...

08009ae4 <_svfiprintf_r>:
 8009ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae8:	4698      	mov	r8, r3
 8009aea:	898b      	ldrh	r3, [r1, #12]
 8009aec:	4607      	mov	r7, r0
 8009aee:	061b      	lsls	r3, r3, #24
 8009af0:	460d      	mov	r5, r1
 8009af2:	4614      	mov	r4, r2
 8009af4:	b09d      	sub	sp, #116	; 0x74
 8009af6:	d50e      	bpl.n	8009b16 <_svfiprintf_r+0x32>
 8009af8:	690b      	ldr	r3, [r1, #16]
 8009afa:	b963      	cbnz	r3, 8009b16 <_svfiprintf_r+0x32>
 8009afc:	2140      	movs	r1, #64	; 0x40
 8009afe:	f7ff ff21 	bl	8009944 <_malloc_r>
 8009b02:	6028      	str	r0, [r5, #0]
 8009b04:	6128      	str	r0, [r5, #16]
 8009b06:	b920      	cbnz	r0, 8009b12 <_svfiprintf_r+0x2e>
 8009b08:	230c      	movs	r3, #12
 8009b0a:	603b      	str	r3, [r7, #0]
 8009b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b10:	e0d1      	b.n	8009cb6 <_svfiprintf_r+0x1d2>
 8009b12:	2340      	movs	r3, #64	; 0x40
 8009b14:	616b      	str	r3, [r5, #20]
 8009b16:	2300      	movs	r3, #0
 8009b18:	9309      	str	r3, [sp, #36]	; 0x24
 8009b1a:	2320      	movs	r3, #32
 8009b1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b20:	2330      	movs	r3, #48	; 0x30
 8009b22:	f04f 0901 	mov.w	r9, #1
 8009b26:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b2a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009cd0 <_svfiprintf_r+0x1ec>
 8009b2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b32:	4623      	mov	r3, r4
 8009b34:	469a      	mov	sl, r3
 8009b36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b3a:	b10a      	cbz	r2, 8009b40 <_svfiprintf_r+0x5c>
 8009b3c:	2a25      	cmp	r2, #37	; 0x25
 8009b3e:	d1f9      	bne.n	8009b34 <_svfiprintf_r+0x50>
 8009b40:	ebba 0b04 	subs.w	fp, sl, r4
 8009b44:	d00b      	beq.n	8009b5e <_svfiprintf_r+0x7a>
 8009b46:	465b      	mov	r3, fp
 8009b48:	4622      	mov	r2, r4
 8009b4a:	4629      	mov	r1, r5
 8009b4c:	4638      	mov	r0, r7
 8009b4e:	f7ff ff6d 	bl	8009a2c <__ssputs_r>
 8009b52:	3001      	adds	r0, #1
 8009b54:	f000 80aa 	beq.w	8009cac <_svfiprintf_r+0x1c8>
 8009b58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b5a:	445a      	add	r2, fp
 8009b5c:	9209      	str	r2, [sp, #36]	; 0x24
 8009b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f000 80a2 	beq.w	8009cac <_svfiprintf_r+0x1c8>
 8009b68:	2300      	movs	r3, #0
 8009b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b72:	f10a 0a01 	add.w	sl, sl, #1
 8009b76:	9304      	str	r3, [sp, #16]
 8009b78:	9307      	str	r3, [sp, #28]
 8009b7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b7e:	931a      	str	r3, [sp, #104]	; 0x68
 8009b80:	4654      	mov	r4, sl
 8009b82:	2205      	movs	r2, #5
 8009b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b88:	4851      	ldr	r0, [pc, #324]	; (8009cd0 <_svfiprintf_r+0x1ec>)
 8009b8a:	f000 fe8d 	bl	800a8a8 <memchr>
 8009b8e:	9a04      	ldr	r2, [sp, #16]
 8009b90:	b9d8      	cbnz	r0, 8009bca <_svfiprintf_r+0xe6>
 8009b92:	06d0      	lsls	r0, r2, #27
 8009b94:	bf44      	itt	mi
 8009b96:	2320      	movmi	r3, #32
 8009b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b9c:	0711      	lsls	r1, r2, #28
 8009b9e:	bf44      	itt	mi
 8009ba0:	232b      	movmi	r3, #43	; 0x2b
 8009ba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8009baa:	2b2a      	cmp	r3, #42	; 0x2a
 8009bac:	d015      	beq.n	8009bda <_svfiprintf_r+0xf6>
 8009bae:	4654      	mov	r4, sl
 8009bb0:	2000      	movs	r0, #0
 8009bb2:	f04f 0c0a 	mov.w	ip, #10
 8009bb6:	9a07      	ldr	r2, [sp, #28]
 8009bb8:	4621      	mov	r1, r4
 8009bba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bbe:	3b30      	subs	r3, #48	; 0x30
 8009bc0:	2b09      	cmp	r3, #9
 8009bc2:	d94e      	bls.n	8009c62 <_svfiprintf_r+0x17e>
 8009bc4:	b1b0      	cbz	r0, 8009bf4 <_svfiprintf_r+0x110>
 8009bc6:	9207      	str	r2, [sp, #28]
 8009bc8:	e014      	b.n	8009bf4 <_svfiprintf_r+0x110>
 8009bca:	eba0 0308 	sub.w	r3, r0, r8
 8009bce:	fa09 f303 	lsl.w	r3, r9, r3
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	46a2      	mov	sl, r4
 8009bd6:	9304      	str	r3, [sp, #16]
 8009bd8:	e7d2      	b.n	8009b80 <_svfiprintf_r+0x9c>
 8009bda:	9b03      	ldr	r3, [sp, #12]
 8009bdc:	1d19      	adds	r1, r3, #4
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	9103      	str	r1, [sp, #12]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	bfbb      	ittet	lt
 8009be6:	425b      	neglt	r3, r3
 8009be8:	f042 0202 	orrlt.w	r2, r2, #2
 8009bec:	9307      	strge	r3, [sp, #28]
 8009bee:	9307      	strlt	r3, [sp, #28]
 8009bf0:	bfb8      	it	lt
 8009bf2:	9204      	strlt	r2, [sp, #16]
 8009bf4:	7823      	ldrb	r3, [r4, #0]
 8009bf6:	2b2e      	cmp	r3, #46	; 0x2e
 8009bf8:	d10c      	bne.n	8009c14 <_svfiprintf_r+0x130>
 8009bfa:	7863      	ldrb	r3, [r4, #1]
 8009bfc:	2b2a      	cmp	r3, #42	; 0x2a
 8009bfe:	d135      	bne.n	8009c6c <_svfiprintf_r+0x188>
 8009c00:	9b03      	ldr	r3, [sp, #12]
 8009c02:	3402      	adds	r4, #2
 8009c04:	1d1a      	adds	r2, r3, #4
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	9203      	str	r2, [sp, #12]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	bfb8      	it	lt
 8009c0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c12:	9305      	str	r3, [sp, #20]
 8009c14:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009cd4 <_svfiprintf_r+0x1f0>
 8009c18:	2203      	movs	r2, #3
 8009c1a:	4650      	mov	r0, sl
 8009c1c:	7821      	ldrb	r1, [r4, #0]
 8009c1e:	f000 fe43 	bl	800a8a8 <memchr>
 8009c22:	b140      	cbz	r0, 8009c36 <_svfiprintf_r+0x152>
 8009c24:	2340      	movs	r3, #64	; 0x40
 8009c26:	eba0 000a 	sub.w	r0, r0, sl
 8009c2a:	fa03 f000 	lsl.w	r0, r3, r0
 8009c2e:	9b04      	ldr	r3, [sp, #16]
 8009c30:	3401      	adds	r4, #1
 8009c32:	4303      	orrs	r3, r0
 8009c34:	9304      	str	r3, [sp, #16]
 8009c36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c3a:	2206      	movs	r2, #6
 8009c3c:	4826      	ldr	r0, [pc, #152]	; (8009cd8 <_svfiprintf_r+0x1f4>)
 8009c3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c42:	f000 fe31 	bl	800a8a8 <memchr>
 8009c46:	2800      	cmp	r0, #0
 8009c48:	d038      	beq.n	8009cbc <_svfiprintf_r+0x1d8>
 8009c4a:	4b24      	ldr	r3, [pc, #144]	; (8009cdc <_svfiprintf_r+0x1f8>)
 8009c4c:	bb1b      	cbnz	r3, 8009c96 <_svfiprintf_r+0x1b2>
 8009c4e:	9b03      	ldr	r3, [sp, #12]
 8009c50:	3307      	adds	r3, #7
 8009c52:	f023 0307 	bic.w	r3, r3, #7
 8009c56:	3308      	adds	r3, #8
 8009c58:	9303      	str	r3, [sp, #12]
 8009c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c5c:	4433      	add	r3, r6
 8009c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c60:	e767      	b.n	8009b32 <_svfiprintf_r+0x4e>
 8009c62:	460c      	mov	r4, r1
 8009c64:	2001      	movs	r0, #1
 8009c66:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c6a:	e7a5      	b.n	8009bb8 <_svfiprintf_r+0xd4>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	f04f 0c0a 	mov.w	ip, #10
 8009c72:	4619      	mov	r1, r3
 8009c74:	3401      	adds	r4, #1
 8009c76:	9305      	str	r3, [sp, #20]
 8009c78:	4620      	mov	r0, r4
 8009c7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c7e:	3a30      	subs	r2, #48	; 0x30
 8009c80:	2a09      	cmp	r2, #9
 8009c82:	d903      	bls.n	8009c8c <_svfiprintf_r+0x1a8>
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d0c5      	beq.n	8009c14 <_svfiprintf_r+0x130>
 8009c88:	9105      	str	r1, [sp, #20]
 8009c8a:	e7c3      	b.n	8009c14 <_svfiprintf_r+0x130>
 8009c8c:	4604      	mov	r4, r0
 8009c8e:	2301      	movs	r3, #1
 8009c90:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c94:	e7f0      	b.n	8009c78 <_svfiprintf_r+0x194>
 8009c96:	ab03      	add	r3, sp, #12
 8009c98:	9300      	str	r3, [sp, #0]
 8009c9a:	462a      	mov	r2, r5
 8009c9c:	4638      	mov	r0, r7
 8009c9e:	4b10      	ldr	r3, [pc, #64]	; (8009ce0 <_svfiprintf_r+0x1fc>)
 8009ca0:	a904      	add	r1, sp, #16
 8009ca2:	f3af 8000 	nop.w
 8009ca6:	1c42      	adds	r2, r0, #1
 8009ca8:	4606      	mov	r6, r0
 8009caa:	d1d6      	bne.n	8009c5a <_svfiprintf_r+0x176>
 8009cac:	89ab      	ldrh	r3, [r5, #12]
 8009cae:	065b      	lsls	r3, r3, #25
 8009cb0:	f53f af2c 	bmi.w	8009b0c <_svfiprintf_r+0x28>
 8009cb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cb6:	b01d      	add	sp, #116	; 0x74
 8009cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cbc:	ab03      	add	r3, sp, #12
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	462a      	mov	r2, r5
 8009cc2:	4638      	mov	r0, r7
 8009cc4:	4b06      	ldr	r3, [pc, #24]	; (8009ce0 <_svfiprintf_r+0x1fc>)
 8009cc6:	a904      	add	r1, sp, #16
 8009cc8:	f000 f9d4 	bl	800a074 <_printf_i>
 8009ccc:	e7eb      	b.n	8009ca6 <_svfiprintf_r+0x1c2>
 8009cce:	bf00      	nop
 8009cd0:	0800b165 	.word	0x0800b165
 8009cd4:	0800b16b 	.word	0x0800b16b
 8009cd8:	0800b16f 	.word	0x0800b16f
 8009cdc:	00000000 	.word	0x00000000
 8009ce0:	08009a2d 	.word	0x08009a2d

08009ce4 <__sfputc_r>:
 8009ce4:	6893      	ldr	r3, [r2, #8]
 8009ce6:	b410      	push	{r4}
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	6093      	str	r3, [r2, #8]
 8009cee:	da07      	bge.n	8009d00 <__sfputc_r+0x1c>
 8009cf0:	6994      	ldr	r4, [r2, #24]
 8009cf2:	42a3      	cmp	r3, r4
 8009cf4:	db01      	blt.n	8009cfa <__sfputc_r+0x16>
 8009cf6:	290a      	cmp	r1, #10
 8009cf8:	d102      	bne.n	8009d00 <__sfputc_r+0x1c>
 8009cfa:	bc10      	pop	{r4}
 8009cfc:	f000 baf0 	b.w	800a2e0 <__swbuf_r>
 8009d00:	6813      	ldr	r3, [r2, #0]
 8009d02:	1c58      	adds	r0, r3, #1
 8009d04:	6010      	str	r0, [r2, #0]
 8009d06:	7019      	strb	r1, [r3, #0]
 8009d08:	4608      	mov	r0, r1
 8009d0a:	bc10      	pop	{r4}
 8009d0c:	4770      	bx	lr

08009d0e <__sfputs_r>:
 8009d0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d10:	4606      	mov	r6, r0
 8009d12:	460f      	mov	r7, r1
 8009d14:	4614      	mov	r4, r2
 8009d16:	18d5      	adds	r5, r2, r3
 8009d18:	42ac      	cmp	r4, r5
 8009d1a:	d101      	bne.n	8009d20 <__sfputs_r+0x12>
 8009d1c:	2000      	movs	r0, #0
 8009d1e:	e007      	b.n	8009d30 <__sfputs_r+0x22>
 8009d20:	463a      	mov	r2, r7
 8009d22:	4630      	mov	r0, r6
 8009d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d28:	f7ff ffdc 	bl	8009ce4 <__sfputc_r>
 8009d2c:	1c43      	adds	r3, r0, #1
 8009d2e:	d1f3      	bne.n	8009d18 <__sfputs_r+0xa>
 8009d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d34 <_vfiprintf_r>:
 8009d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d38:	460d      	mov	r5, r1
 8009d3a:	4614      	mov	r4, r2
 8009d3c:	4698      	mov	r8, r3
 8009d3e:	4606      	mov	r6, r0
 8009d40:	b09d      	sub	sp, #116	; 0x74
 8009d42:	b118      	cbz	r0, 8009d4c <_vfiprintf_r+0x18>
 8009d44:	6983      	ldr	r3, [r0, #24]
 8009d46:	b90b      	cbnz	r3, 8009d4c <_vfiprintf_r+0x18>
 8009d48:	f000 fca8 	bl	800a69c <__sinit>
 8009d4c:	4b89      	ldr	r3, [pc, #548]	; (8009f74 <_vfiprintf_r+0x240>)
 8009d4e:	429d      	cmp	r5, r3
 8009d50:	d11b      	bne.n	8009d8a <_vfiprintf_r+0x56>
 8009d52:	6875      	ldr	r5, [r6, #4]
 8009d54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d56:	07d9      	lsls	r1, r3, #31
 8009d58:	d405      	bmi.n	8009d66 <_vfiprintf_r+0x32>
 8009d5a:	89ab      	ldrh	r3, [r5, #12]
 8009d5c:	059a      	lsls	r2, r3, #22
 8009d5e:	d402      	bmi.n	8009d66 <_vfiprintf_r+0x32>
 8009d60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d62:	f000 fd39 	bl	800a7d8 <__retarget_lock_acquire_recursive>
 8009d66:	89ab      	ldrh	r3, [r5, #12]
 8009d68:	071b      	lsls	r3, r3, #28
 8009d6a:	d501      	bpl.n	8009d70 <_vfiprintf_r+0x3c>
 8009d6c:	692b      	ldr	r3, [r5, #16]
 8009d6e:	b9eb      	cbnz	r3, 8009dac <_vfiprintf_r+0x78>
 8009d70:	4629      	mov	r1, r5
 8009d72:	4630      	mov	r0, r6
 8009d74:	f000 fb06 	bl	800a384 <__swsetup_r>
 8009d78:	b1c0      	cbz	r0, 8009dac <_vfiprintf_r+0x78>
 8009d7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d7c:	07dc      	lsls	r4, r3, #31
 8009d7e:	d50e      	bpl.n	8009d9e <_vfiprintf_r+0x6a>
 8009d80:	f04f 30ff 	mov.w	r0, #4294967295
 8009d84:	b01d      	add	sp, #116	; 0x74
 8009d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8a:	4b7b      	ldr	r3, [pc, #492]	; (8009f78 <_vfiprintf_r+0x244>)
 8009d8c:	429d      	cmp	r5, r3
 8009d8e:	d101      	bne.n	8009d94 <_vfiprintf_r+0x60>
 8009d90:	68b5      	ldr	r5, [r6, #8]
 8009d92:	e7df      	b.n	8009d54 <_vfiprintf_r+0x20>
 8009d94:	4b79      	ldr	r3, [pc, #484]	; (8009f7c <_vfiprintf_r+0x248>)
 8009d96:	429d      	cmp	r5, r3
 8009d98:	bf08      	it	eq
 8009d9a:	68f5      	ldreq	r5, [r6, #12]
 8009d9c:	e7da      	b.n	8009d54 <_vfiprintf_r+0x20>
 8009d9e:	89ab      	ldrh	r3, [r5, #12]
 8009da0:	0598      	lsls	r0, r3, #22
 8009da2:	d4ed      	bmi.n	8009d80 <_vfiprintf_r+0x4c>
 8009da4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009da6:	f000 fd18 	bl	800a7da <__retarget_lock_release_recursive>
 8009daa:	e7e9      	b.n	8009d80 <_vfiprintf_r+0x4c>
 8009dac:	2300      	movs	r3, #0
 8009dae:	9309      	str	r3, [sp, #36]	; 0x24
 8009db0:	2320      	movs	r3, #32
 8009db2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009db6:	2330      	movs	r3, #48	; 0x30
 8009db8:	f04f 0901 	mov.w	r9, #1
 8009dbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dc0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009f80 <_vfiprintf_r+0x24c>
 8009dc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dc8:	4623      	mov	r3, r4
 8009dca:	469a      	mov	sl, r3
 8009dcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dd0:	b10a      	cbz	r2, 8009dd6 <_vfiprintf_r+0xa2>
 8009dd2:	2a25      	cmp	r2, #37	; 0x25
 8009dd4:	d1f9      	bne.n	8009dca <_vfiprintf_r+0x96>
 8009dd6:	ebba 0b04 	subs.w	fp, sl, r4
 8009dda:	d00b      	beq.n	8009df4 <_vfiprintf_r+0xc0>
 8009ddc:	465b      	mov	r3, fp
 8009dde:	4622      	mov	r2, r4
 8009de0:	4629      	mov	r1, r5
 8009de2:	4630      	mov	r0, r6
 8009de4:	f7ff ff93 	bl	8009d0e <__sfputs_r>
 8009de8:	3001      	adds	r0, #1
 8009dea:	f000 80aa 	beq.w	8009f42 <_vfiprintf_r+0x20e>
 8009dee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009df0:	445a      	add	r2, fp
 8009df2:	9209      	str	r2, [sp, #36]	; 0x24
 8009df4:	f89a 3000 	ldrb.w	r3, [sl]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f000 80a2 	beq.w	8009f42 <_vfiprintf_r+0x20e>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	f04f 32ff 	mov.w	r2, #4294967295
 8009e04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e08:	f10a 0a01 	add.w	sl, sl, #1
 8009e0c:	9304      	str	r3, [sp, #16]
 8009e0e:	9307      	str	r3, [sp, #28]
 8009e10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e14:	931a      	str	r3, [sp, #104]	; 0x68
 8009e16:	4654      	mov	r4, sl
 8009e18:	2205      	movs	r2, #5
 8009e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e1e:	4858      	ldr	r0, [pc, #352]	; (8009f80 <_vfiprintf_r+0x24c>)
 8009e20:	f000 fd42 	bl	800a8a8 <memchr>
 8009e24:	9a04      	ldr	r2, [sp, #16]
 8009e26:	b9d8      	cbnz	r0, 8009e60 <_vfiprintf_r+0x12c>
 8009e28:	06d1      	lsls	r1, r2, #27
 8009e2a:	bf44      	itt	mi
 8009e2c:	2320      	movmi	r3, #32
 8009e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e32:	0713      	lsls	r3, r2, #28
 8009e34:	bf44      	itt	mi
 8009e36:	232b      	movmi	r3, #43	; 0x2b
 8009e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e40:	2b2a      	cmp	r3, #42	; 0x2a
 8009e42:	d015      	beq.n	8009e70 <_vfiprintf_r+0x13c>
 8009e44:	4654      	mov	r4, sl
 8009e46:	2000      	movs	r0, #0
 8009e48:	f04f 0c0a 	mov.w	ip, #10
 8009e4c:	9a07      	ldr	r2, [sp, #28]
 8009e4e:	4621      	mov	r1, r4
 8009e50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e54:	3b30      	subs	r3, #48	; 0x30
 8009e56:	2b09      	cmp	r3, #9
 8009e58:	d94e      	bls.n	8009ef8 <_vfiprintf_r+0x1c4>
 8009e5a:	b1b0      	cbz	r0, 8009e8a <_vfiprintf_r+0x156>
 8009e5c:	9207      	str	r2, [sp, #28]
 8009e5e:	e014      	b.n	8009e8a <_vfiprintf_r+0x156>
 8009e60:	eba0 0308 	sub.w	r3, r0, r8
 8009e64:	fa09 f303 	lsl.w	r3, r9, r3
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	46a2      	mov	sl, r4
 8009e6c:	9304      	str	r3, [sp, #16]
 8009e6e:	e7d2      	b.n	8009e16 <_vfiprintf_r+0xe2>
 8009e70:	9b03      	ldr	r3, [sp, #12]
 8009e72:	1d19      	adds	r1, r3, #4
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	9103      	str	r1, [sp, #12]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	bfbb      	ittet	lt
 8009e7c:	425b      	neglt	r3, r3
 8009e7e:	f042 0202 	orrlt.w	r2, r2, #2
 8009e82:	9307      	strge	r3, [sp, #28]
 8009e84:	9307      	strlt	r3, [sp, #28]
 8009e86:	bfb8      	it	lt
 8009e88:	9204      	strlt	r2, [sp, #16]
 8009e8a:	7823      	ldrb	r3, [r4, #0]
 8009e8c:	2b2e      	cmp	r3, #46	; 0x2e
 8009e8e:	d10c      	bne.n	8009eaa <_vfiprintf_r+0x176>
 8009e90:	7863      	ldrb	r3, [r4, #1]
 8009e92:	2b2a      	cmp	r3, #42	; 0x2a
 8009e94:	d135      	bne.n	8009f02 <_vfiprintf_r+0x1ce>
 8009e96:	9b03      	ldr	r3, [sp, #12]
 8009e98:	3402      	adds	r4, #2
 8009e9a:	1d1a      	adds	r2, r3, #4
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	9203      	str	r2, [sp, #12]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	bfb8      	it	lt
 8009ea4:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ea8:	9305      	str	r3, [sp, #20]
 8009eaa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009f84 <_vfiprintf_r+0x250>
 8009eae:	2203      	movs	r2, #3
 8009eb0:	4650      	mov	r0, sl
 8009eb2:	7821      	ldrb	r1, [r4, #0]
 8009eb4:	f000 fcf8 	bl	800a8a8 <memchr>
 8009eb8:	b140      	cbz	r0, 8009ecc <_vfiprintf_r+0x198>
 8009eba:	2340      	movs	r3, #64	; 0x40
 8009ebc:	eba0 000a 	sub.w	r0, r0, sl
 8009ec0:	fa03 f000 	lsl.w	r0, r3, r0
 8009ec4:	9b04      	ldr	r3, [sp, #16]
 8009ec6:	3401      	adds	r4, #1
 8009ec8:	4303      	orrs	r3, r0
 8009eca:	9304      	str	r3, [sp, #16]
 8009ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ed0:	2206      	movs	r2, #6
 8009ed2:	482d      	ldr	r0, [pc, #180]	; (8009f88 <_vfiprintf_r+0x254>)
 8009ed4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ed8:	f000 fce6 	bl	800a8a8 <memchr>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d03f      	beq.n	8009f60 <_vfiprintf_r+0x22c>
 8009ee0:	4b2a      	ldr	r3, [pc, #168]	; (8009f8c <_vfiprintf_r+0x258>)
 8009ee2:	bb1b      	cbnz	r3, 8009f2c <_vfiprintf_r+0x1f8>
 8009ee4:	9b03      	ldr	r3, [sp, #12]
 8009ee6:	3307      	adds	r3, #7
 8009ee8:	f023 0307 	bic.w	r3, r3, #7
 8009eec:	3308      	adds	r3, #8
 8009eee:	9303      	str	r3, [sp, #12]
 8009ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ef2:	443b      	add	r3, r7
 8009ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ef6:	e767      	b.n	8009dc8 <_vfiprintf_r+0x94>
 8009ef8:	460c      	mov	r4, r1
 8009efa:	2001      	movs	r0, #1
 8009efc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f00:	e7a5      	b.n	8009e4e <_vfiprintf_r+0x11a>
 8009f02:	2300      	movs	r3, #0
 8009f04:	f04f 0c0a 	mov.w	ip, #10
 8009f08:	4619      	mov	r1, r3
 8009f0a:	3401      	adds	r4, #1
 8009f0c:	9305      	str	r3, [sp, #20]
 8009f0e:	4620      	mov	r0, r4
 8009f10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f14:	3a30      	subs	r2, #48	; 0x30
 8009f16:	2a09      	cmp	r2, #9
 8009f18:	d903      	bls.n	8009f22 <_vfiprintf_r+0x1ee>
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d0c5      	beq.n	8009eaa <_vfiprintf_r+0x176>
 8009f1e:	9105      	str	r1, [sp, #20]
 8009f20:	e7c3      	b.n	8009eaa <_vfiprintf_r+0x176>
 8009f22:	4604      	mov	r4, r0
 8009f24:	2301      	movs	r3, #1
 8009f26:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f2a:	e7f0      	b.n	8009f0e <_vfiprintf_r+0x1da>
 8009f2c:	ab03      	add	r3, sp, #12
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	462a      	mov	r2, r5
 8009f32:	4630      	mov	r0, r6
 8009f34:	4b16      	ldr	r3, [pc, #88]	; (8009f90 <_vfiprintf_r+0x25c>)
 8009f36:	a904      	add	r1, sp, #16
 8009f38:	f3af 8000 	nop.w
 8009f3c:	4607      	mov	r7, r0
 8009f3e:	1c78      	adds	r0, r7, #1
 8009f40:	d1d6      	bne.n	8009ef0 <_vfiprintf_r+0x1bc>
 8009f42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f44:	07d9      	lsls	r1, r3, #31
 8009f46:	d405      	bmi.n	8009f54 <_vfiprintf_r+0x220>
 8009f48:	89ab      	ldrh	r3, [r5, #12]
 8009f4a:	059a      	lsls	r2, r3, #22
 8009f4c:	d402      	bmi.n	8009f54 <_vfiprintf_r+0x220>
 8009f4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f50:	f000 fc43 	bl	800a7da <__retarget_lock_release_recursive>
 8009f54:	89ab      	ldrh	r3, [r5, #12]
 8009f56:	065b      	lsls	r3, r3, #25
 8009f58:	f53f af12 	bmi.w	8009d80 <_vfiprintf_r+0x4c>
 8009f5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f5e:	e711      	b.n	8009d84 <_vfiprintf_r+0x50>
 8009f60:	ab03      	add	r3, sp, #12
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	462a      	mov	r2, r5
 8009f66:	4630      	mov	r0, r6
 8009f68:	4b09      	ldr	r3, [pc, #36]	; (8009f90 <_vfiprintf_r+0x25c>)
 8009f6a:	a904      	add	r1, sp, #16
 8009f6c:	f000 f882 	bl	800a074 <_printf_i>
 8009f70:	e7e4      	b.n	8009f3c <_vfiprintf_r+0x208>
 8009f72:	bf00      	nop
 8009f74:	0800b1b8 	.word	0x0800b1b8
 8009f78:	0800b1d8 	.word	0x0800b1d8
 8009f7c:	0800b198 	.word	0x0800b198
 8009f80:	0800b165 	.word	0x0800b165
 8009f84:	0800b16b 	.word	0x0800b16b
 8009f88:	0800b16f 	.word	0x0800b16f
 8009f8c:	00000000 	.word	0x00000000
 8009f90:	08009d0f 	.word	0x08009d0f

08009f94 <_printf_common>:
 8009f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f98:	4616      	mov	r6, r2
 8009f9a:	4699      	mov	r9, r3
 8009f9c:	688a      	ldr	r2, [r1, #8]
 8009f9e:	690b      	ldr	r3, [r1, #16]
 8009fa0:	4607      	mov	r7, r0
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	bfb8      	it	lt
 8009fa6:	4613      	movlt	r3, r2
 8009fa8:	6033      	str	r3, [r6, #0]
 8009faa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009fae:	460c      	mov	r4, r1
 8009fb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009fb4:	b10a      	cbz	r2, 8009fba <_printf_common+0x26>
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	6033      	str	r3, [r6, #0]
 8009fba:	6823      	ldr	r3, [r4, #0]
 8009fbc:	0699      	lsls	r1, r3, #26
 8009fbe:	bf42      	ittt	mi
 8009fc0:	6833      	ldrmi	r3, [r6, #0]
 8009fc2:	3302      	addmi	r3, #2
 8009fc4:	6033      	strmi	r3, [r6, #0]
 8009fc6:	6825      	ldr	r5, [r4, #0]
 8009fc8:	f015 0506 	ands.w	r5, r5, #6
 8009fcc:	d106      	bne.n	8009fdc <_printf_common+0x48>
 8009fce:	f104 0a19 	add.w	sl, r4, #25
 8009fd2:	68e3      	ldr	r3, [r4, #12]
 8009fd4:	6832      	ldr	r2, [r6, #0]
 8009fd6:	1a9b      	subs	r3, r3, r2
 8009fd8:	42ab      	cmp	r3, r5
 8009fda:	dc28      	bgt.n	800a02e <_printf_common+0x9a>
 8009fdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009fe0:	1e13      	subs	r3, r2, #0
 8009fe2:	6822      	ldr	r2, [r4, #0]
 8009fe4:	bf18      	it	ne
 8009fe6:	2301      	movne	r3, #1
 8009fe8:	0692      	lsls	r2, r2, #26
 8009fea:	d42d      	bmi.n	800a048 <_printf_common+0xb4>
 8009fec:	4649      	mov	r1, r9
 8009fee:	4638      	mov	r0, r7
 8009ff0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ff4:	47c0      	blx	r8
 8009ff6:	3001      	adds	r0, #1
 8009ff8:	d020      	beq.n	800a03c <_printf_common+0xa8>
 8009ffa:	6823      	ldr	r3, [r4, #0]
 8009ffc:	68e5      	ldr	r5, [r4, #12]
 8009ffe:	f003 0306 	and.w	r3, r3, #6
 800a002:	2b04      	cmp	r3, #4
 800a004:	bf18      	it	ne
 800a006:	2500      	movne	r5, #0
 800a008:	6832      	ldr	r2, [r6, #0]
 800a00a:	f04f 0600 	mov.w	r6, #0
 800a00e:	68a3      	ldr	r3, [r4, #8]
 800a010:	bf08      	it	eq
 800a012:	1aad      	subeq	r5, r5, r2
 800a014:	6922      	ldr	r2, [r4, #16]
 800a016:	bf08      	it	eq
 800a018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a01c:	4293      	cmp	r3, r2
 800a01e:	bfc4      	itt	gt
 800a020:	1a9b      	subgt	r3, r3, r2
 800a022:	18ed      	addgt	r5, r5, r3
 800a024:	341a      	adds	r4, #26
 800a026:	42b5      	cmp	r5, r6
 800a028:	d11a      	bne.n	800a060 <_printf_common+0xcc>
 800a02a:	2000      	movs	r0, #0
 800a02c:	e008      	b.n	800a040 <_printf_common+0xac>
 800a02e:	2301      	movs	r3, #1
 800a030:	4652      	mov	r2, sl
 800a032:	4649      	mov	r1, r9
 800a034:	4638      	mov	r0, r7
 800a036:	47c0      	blx	r8
 800a038:	3001      	adds	r0, #1
 800a03a:	d103      	bne.n	800a044 <_printf_common+0xb0>
 800a03c:	f04f 30ff 	mov.w	r0, #4294967295
 800a040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a044:	3501      	adds	r5, #1
 800a046:	e7c4      	b.n	8009fd2 <_printf_common+0x3e>
 800a048:	2030      	movs	r0, #48	; 0x30
 800a04a:	18e1      	adds	r1, r4, r3
 800a04c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a050:	1c5a      	adds	r2, r3, #1
 800a052:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a056:	4422      	add	r2, r4
 800a058:	3302      	adds	r3, #2
 800a05a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a05e:	e7c5      	b.n	8009fec <_printf_common+0x58>
 800a060:	2301      	movs	r3, #1
 800a062:	4622      	mov	r2, r4
 800a064:	4649      	mov	r1, r9
 800a066:	4638      	mov	r0, r7
 800a068:	47c0      	blx	r8
 800a06a:	3001      	adds	r0, #1
 800a06c:	d0e6      	beq.n	800a03c <_printf_common+0xa8>
 800a06e:	3601      	adds	r6, #1
 800a070:	e7d9      	b.n	800a026 <_printf_common+0x92>
	...

0800a074 <_printf_i>:
 800a074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a078:	7e0f      	ldrb	r7, [r1, #24]
 800a07a:	4691      	mov	r9, r2
 800a07c:	2f78      	cmp	r7, #120	; 0x78
 800a07e:	4680      	mov	r8, r0
 800a080:	460c      	mov	r4, r1
 800a082:	469a      	mov	sl, r3
 800a084:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a086:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a08a:	d807      	bhi.n	800a09c <_printf_i+0x28>
 800a08c:	2f62      	cmp	r7, #98	; 0x62
 800a08e:	d80a      	bhi.n	800a0a6 <_printf_i+0x32>
 800a090:	2f00      	cmp	r7, #0
 800a092:	f000 80d9 	beq.w	800a248 <_printf_i+0x1d4>
 800a096:	2f58      	cmp	r7, #88	; 0x58
 800a098:	f000 80a4 	beq.w	800a1e4 <_printf_i+0x170>
 800a09c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a0a4:	e03a      	b.n	800a11c <_printf_i+0xa8>
 800a0a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a0aa:	2b15      	cmp	r3, #21
 800a0ac:	d8f6      	bhi.n	800a09c <_printf_i+0x28>
 800a0ae:	a101      	add	r1, pc, #4	; (adr r1, 800a0b4 <_printf_i+0x40>)
 800a0b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a0b4:	0800a10d 	.word	0x0800a10d
 800a0b8:	0800a121 	.word	0x0800a121
 800a0bc:	0800a09d 	.word	0x0800a09d
 800a0c0:	0800a09d 	.word	0x0800a09d
 800a0c4:	0800a09d 	.word	0x0800a09d
 800a0c8:	0800a09d 	.word	0x0800a09d
 800a0cc:	0800a121 	.word	0x0800a121
 800a0d0:	0800a09d 	.word	0x0800a09d
 800a0d4:	0800a09d 	.word	0x0800a09d
 800a0d8:	0800a09d 	.word	0x0800a09d
 800a0dc:	0800a09d 	.word	0x0800a09d
 800a0e0:	0800a22f 	.word	0x0800a22f
 800a0e4:	0800a151 	.word	0x0800a151
 800a0e8:	0800a211 	.word	0x0800a211
 800a0ec:	0800a09d 	.word	0x0800a09d
 800a0f0:	0800a09d 	.word	0x0800a09d
 800a0f4:	0800a251 	.word	0x0800a251
 800a0f8:	0800a09d 	.word	0x0800a09d
 800a0fc:	0800a151 	.word	0x0800a151
 800a100:	0800a09d 	.word	0x0800a09d
 800a104:	0800a09d 	.word	0x0800a09d
 800a108:	0800a219 	.word	0x0800a219
 800a10c:	682b      	ldr	r3, [r5, #0]
 800a10e:	1d1a      	adds	r2, r3, #4
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	602a      	str	r2, [r5, #0]
 800a114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a118:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a11c:	2301      	movs	r3, #1
 800a11e:	e0a4      	b.n	800a26a <_printf_i+0x1f6>
 800a120:	6820      	ldr	r0, [r4, #0]
 800a122:	6829      	ldr	r1, [r5, #0]
 800a124:	0606      	lsls	r6, r0, #24
 800a126:	f101 0304 	add.w	r3, r1, #4
 800a12a:	d50a      	bpl.n	800a142 <_printf_i+0xce>
 800a12c:	680e      	ldr	r6, [r1, #0]
 800a12e:	602b      	str	r3, [r5, #0]
 800a130:	2e00      	cmp	r6, #0
 800a132:	da03      	bge.n	800a13c <_printf_i+0xc8>
 800a134:	232d      	movs	r3, #45	; 0x2d
 800a136:	4276      	negs	r6, r6
 800a138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a13c:	230a      	movs	r3, #10
 800a13e:	485e      	ldr	r0, [pc, #376]	; (800a2b8 <_printf_i+0x244>)
 800a140:	e019      	b.n	800a176 <_printf_i+0x102>
 800a142:	680e      	ldr	r6, [r1, #0]
 800a144:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a148:	602b      	str	r3, [r5, #0]
 800a14a:	bf18      	it	ne
 800a14c:	b236      	sxthne	r6, r6
 800a14e:	e7ef      	b.n	800a130 <_printf_i+0xbc>
 800a150:	682b      	ldr	r3, [r5, #0]
 800a152:	6820      	ldr	r0, [r4, #0]
 800a154:	1d19      	adds	r1, r3, #4
 800a156:	6029      	str	r1, [r5, #0]
 800a158:	0601      	lsls	r1, r0, #24
 800a15a:	d501      	bpl.n	800a160 <_printf_i+0xec>
 800a15c:	681e      	ldr	r6, [r3, #0]
 800a15e:	e002      	b.n	800a166 <_printf_i+0xf2>
 800a160:	0646      	lsls	r6, r0, #25
 800a162:	d5fb      	bpl.n	800a15c <_printf_i+0xe8>
 800a164:	881e      	ldrh	r6, [r3, #0]
 800a166:	2f6f      	cmp	r7, #111	; 0x6f
 800a168:	bf0c      	ite	eq
 800a16a:	2308      	moveq	r3, #8
 800a16c:	230a      	movne	r3, #10
 800a16e:	4852      	ldr	r0, [pc, #328]	; (800a2b8 <_printf_i+0x244>)
 800a170:	2100      	movs	r1, #0
 800a172:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a176:	6865      	ldr	r5, [r4, #4]
 800a178:	2d00      	cmp	r5, #0
 800a17a:	bfa8      	it	ge
 800a17c:	6821      	ldrge	r1, [r4, #0]
 800a17e:	60a5      	str	r5, [r4, #8]
 800a180:	bfa4      	itt	ge
 800a182:	f021 0104 	bicge.w	r1, r1, #4
 800a186:	6021      	strge	r1, [r4, #0]
 800a188:	b90e      	cbnz	r6, 800a18e <_printf_i+0x11a>
 800a18a:	2d00      	cmp	r5, #0
 800a18c:	d04d      	beq.n	800a22a <_printf_i+0x1b6>
 800a18e:	4615      	mov	r5, r2
 800a190:	fbb6 f1f3 	udiv	r1, r6, r3
 800a194:	fb03 6711 	mls	r7, r3, r1, r6
 800a198:	5dc7      	ldrb	r7, [r0, r7]
 800a19a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a19e:	4637      	mov	r7, r6
 800a1a0:	42bb      	cmp	r3, r7
 800a1a2:	460e      	mov	r6, r1
 800a1a4:	d9f4      	bls.n	800a190 <_printf_i+0x11c>
 800a1a6:	2b08      	cmp	r3, #8
 800a1a8:	d10b      	bne.n	800a1c2 <_printf_i+0x14e>
 800a1aa:	6823      	ldr	r3, [r4, #0]
 800a1ac:	07de      	lsls	r6, r3, #31
 800a1ae:	d508      	bpl.n	800a1c2 <_printf_i+0x14e>
 800a1b0:	6923      	ldr	r3, [r4, #16]
 800a1b2:	6861      	ldr	r1, [r4, #4]
 800a1b4:	4299      	cmp	r1, r3
 800a1b6:	bfde      	ittt	le
 800a1b8:	2330      	movle	r3, #48	; 0x30
 800a1ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a1be:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a1c2:	1b52      	subs	r2, r2, r5
 800a1c4:	6122      	str	r2, [r4, #16]
 800a1c6:	464b      	mov	r3, r9
 800a1c8:	4621      	mov	r1, r4
 800a1ca:	4640      	mov	r0, r8
 800a1cc:	f8cd a000 	str.w	sl, [sp]
 800a1d0:	aa03      	add	r2, sp, #12
 800a1d2:	f7ff fedf 	bl	8009f94 <_printf_common>
 800a1d6:	3001      	adds	r0, #1
 800a1d8:	d14c      	bne.n	800a274 <_printf_i+0x200>
 800a1da:	f04f 30ff 	mov.w	r0, #4294967295
 800a1de:	b004      	add	sp, #16
 800a1e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1e4:	4834      	ldr	r0, [pc, #208]	; (800a2b8 <_printf_i+0x244>)
 800a1e6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a1ea:	6829      	ldr	r1, [r5, #0]
 800a1ec:	6823      	ldr	r3, [r4, #0]
 800a1ee:	f851 6b04 	ldr.w	r6, [r1], #4
 800a1f2:	6029      	str	r1, [r5, #0]
 800a1f4:	061d      	lsls	r5, r3, #24
 800a1f6:	d514      	bpl.n	800a222 <_printf_i+0x1ae>
 800a1f8:	07df      	lsls	r7, r3, #31
 800a1fa:	bf44      	itt	mi
 800a1fc:	f043 0320 	orrmi.w	r3, r3, #32
 800a200:	6023      	strmi	r3, [r4, #0]
 800a202:	b91e      	cbnz	r6, 800a20c <_printf_i+0x198>
 800a204:	6823      	ldr	r3, [r4, #0]
 800a206:	f023 0320 	bic.w	r3, r3, #32
 800a20a:	6023      	str	r3, [r4, #0]
 800a20c:	2310      	movs	r3, #16
 800a20e:	e7af      	b.n	800a170 <_printf_i+0xfc>
 800a210:	6823      	ldr	r3, [r4, #0]
 800a212:	f043 0320 	orr.w	r3, r3, #32
 800a216:	6023      	str	r3, [r4, #0]
 800a218:	2378      	movs	r3, #120	; 0x78
 800a21a:	4828      	ldr	r0, [pc, #160]	; (800a2bc <_printf_i+0x248>)
 800a21c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a220:	e7e3      	b.n	800a1ea <_printf_i+0x176>
 800a222:	0659      	lsls	r1, r3, #25
 800a224:	bf48      	it	mi
 800a226:	b2b6      	uxthmi	r6, r6
 800a228:	e7e6      	b.n	800a1f8 <_printf_i+0x184>
 800a22a:	4615      	mov	r5, r2
 800a22c:	e7bb      	b.n	800a1a6 <_printf_i+0x132>
 800a22e:	682b      	ldr	r3, [r5, #0]
 800a230:	6826      	ldr	r6, [r4, #0]
 800a232:	1d18      	adds	r0, r3, #4
 800a234:	6961      	ldr	r1, [r4, #20]
 800a236:	6028      	str	r0, [r5, #0]
 800a238:	0635      	lsls	r5, r6, #24
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	d501      	bpl.n	800a242 <_printf_i+0x1ce>
 800a23e:	6019      	str	r1, [r3, #0]
 800a240:	e002      	b.n	800a248 <_printf_i+0x1d4>
 800a242:	0670      	lsls	r0, r6, #25
 800a244:	d5fb      	bpl.n	800a23e <_printf_i+0x1ca>
 800a246:	8019      	strh	r1, [r3, #0]
 800a248:	2300      	movs	r3, #0
 800a24a:	4615      	mov	r5, r2
 800a24c:	6123      	str	r3, [r4, #16]
 800a24e:	e7ba      	b.n	800a1c6 <_printf_i+0x152>
 800a250:	682b      	ldr	r3, [r5, #0]
 800a252:	2100      	movs	r1, #0
 800a254:	1d1a      	adds	r2, r3, #4
 800a256:	602a      	str	r2, [r5, #0]
 800a258:	681d      	ldr	r5, [r3, #0]
 800a25a:	6862      	ldr	r2, [r4, #4]
 800a25c:	4628      	mov	r0, r5
 800a25e:	f000 fb23 	bl	800a8a8 <memchr>
 800a262:	b108      	cbz	r0, 800a268 <_printf_i+0x1f4>
 800a264:	1b40      	subs	r0, r0, r5
 800a266:	6060      	str	r0, [r4, #4]
 800a268:	6863      	ldr	r3, [r4, #4]
 800a26a:	6123      	str	r3, [r4, #16]
 800a26c:	2300      	movs	r3, #0
 800a26e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a272:	e7a8      	b.n	800a1c6 <_printf_i+0x152>
 800a274:	462a      	mov	r2, r5
 800a276:	4649      	mov	r1, r9
 800a278:	4640      	mov	r0, r8
 800a27a:	6923      	ldr	r3, [r4, #16]
 800a27c:	47d0      	blx	sl
 800a27e:	3001      	adds	r0, #1
 800a280:	d0ab      	beq.n	800a1da <_printf_i+0x166>
 800a282:	6823      	ldr	r3, [r4, #0]
 800a284:	079b      	lsls	r3, r3, #30
 800a286:	d413      	bmi.n	800a2b0 <_printf_i+0x23c>
 800a288:	68e0      	ldr	r0, [r4, #12]
 800a28a:	9b03      	ldr	r3, [sp, #12]
 800a28c:	4298      	cmp	r0, r3
 800a28e:	bfb8      	it	lt
 800a290:	4618      	movlt	r0, r3
 800a292:	e7a4      	b.n	800a1de <_printf_i+0x16a>
 800a294:	2301      	movs	r3, #1
 800a296:	4632      	mov	r2, r6
 800a298:	4649      	mov	r1, r9
 800a29a:	4640      	mov	r0, r8
 800a29c:	47d0      	blx	sl
 800a29e:	3001      	adds	r0, #1
 800a2a0:	d09b      	beq.n	800a1da <_printf_i+0x166>
 800a2a2:	3501      	adds	r5, #1
 800a2a4:	68e3      	ldr	r3, [r4, #12]
 800a2a6:	9903      	ldr	r1, [sp, #12]
 800a2a8:	1a5b      	subs	r3, r3, r1
 800a2aa:	42ab      	cmp	r3, r5
 800a2ac:	dcf2      	bgt.n	800a294 <_printf_i+0x220>
 800a2ae:	e7eb      	b.n	800a288 <_printf_i+0x214>
 800a2b0:	2500      	movs	r5, #0
 800a2b2:	f104 0619 	add.w	r6, r4, #25
 800a2b6:	e7f5      	b.n	800a2a4 <_printf_i+0x230>
 800a2b8:	0800b176 	.word	0x0800b176
 800a2bc:	0800b187 	.word	0x0800b187

0800a2c0 <_sbrk_r>:
 800a2c0:	b538      	push	{r3, r4, r5, lr}
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	4d05      	ldr	r5, [pc, #20]	; (800a2dc <_sbrk_r+0x1c>)
 800a2c6:	4604      	mov	r4, r0
 800a2c8:	4608      	mov	r0, r1
 800a2ca:	602b      	str	r3, [r5, #0]
 800a2cc:	f7f6 fd70 	bl	8000db0 <_sbrk>
 800a2d0:	1c43      	adds	r3, r0, #1
 800a2d2:	d102      	bne.n	800a2da <_sbrk_r+0x1a>
 800a2d4:	682b      	ldr	r3, [r5, #0]
 800a2d6:	b103      	cbz	r3, 800a2da <_sbrk_r+0x1a>
 800a2d8:	6023      	str	r3, [r4, #0]
 800a2da:	bd38      	pop	{r3, r4, r5, pc}
 800a2dc:	20001ea0 	.word	0x20001ea0

0800a2e0 <__swbuf_r>:
 800a2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2e2:	460e      	mov	r6, r1
 800a2e4:	4614      	mov	r4, r2
 800a2e6:	4605      	mov	r5, r0
 800a2e8:	b118      	cbz	r0, 800a2f2 <__swbuf_r+0x12>
 800a2ea:	6983      	ldr	r3, [r0, #24]
 800a2ec:	b90b      	cbnz	r3, 800a2f2 <__swbuf_r+0x12>
 800a2ee:	f000 f9d5 	bl	800a69c <__sinit>
 800a2f2:	4b21      	ldr	r3, [pc, #132]	; (800a378 <__swbuf_r+0x98>)
 800a2f4:	429c      	cmp	r4, r3
 800a2f6:	d12b      	bne.n	800a350 <__swbuf_r+0x70>
 800a2f8:	686c      	ldr	r4, [r5, #4]
 800a2fa:	69a3      	ldr	r3, [r4, #24]
 800a2fc:	60a3      	str	r3, [r4, #8]
 800a2fe:	89a3      	ldrh	r3, [r4, #12]
 800a300:	071a      	lsls	r2, r3, #28
 800a302:	d52f      	bpl.n	800a364 <__swbuf_r+0x84>
 800a304:	6923      	ldr	r3, [r4, #16]
 800a306:	b36b      	cbz	r3, 800a364 <__swbuf_r+0x84>
 800a308:	6923      	ldr	r3, [r4, #16]
 800a30a:	6820      	ldr	r0, [r4, #0]
 800a30c:	b2f6      	uxtb	r6, r6
 800a30e:	1ac0      	subs	r0, r0, r3
 800a310:	6963      	ldr	r3, [r4, #20]
 800a312:	4637      	mov	r7, r6
 800a314:	4283      	cmp	r3, r0
 800a316:	dc04      	bgt.n	800a322 <__swbuf_r+0x42>
 800a318:	4621      	mov	r1, r4
 800a31a:	4628      	mov	r0, r5
 800a31c:	f000 f92a 	bl	800a574 <_fflush_r>
 800a320:	bb30      	cbnz	r0, 800a370 <__swbuf_r+0x90>
 800a322:	68a3      	ldr	r3, [r4, #8]
 800a324:	3001      	adds	r0, #1
 800a326:	3b01      	subs	r3, #1
 800a328:	60a3      	str	r3, [r4, #8]
 800a32a:	6823      	ldr	r3, [r4, #0]
 800a32c:	1c5a      	adds	r2, r3, #1
 800a32e:	6022      	str	r2, [r4, #0]
 800a330:	701e      	strb	r6, [r3, #0]
 800a332:	6963      	ldr	r3, [r4, #20]
 800a334:	4283      	cmp	r3, r0
 800a336:	d004      	beq.n	800a342 <__swbuf_r+0x62>
 800a338:	89a3      	ldrh	r3, [r4, #12]
 800a33a:	07db      	lsls	r3, r3, #31
 800a33c:	d506      	bpl.n	800a34c <__swbuf_r+0x6c>
 800a33e:	2e0a      	cmp	r6, #10
 800a340:	d104      	bne.n	800a34c <__swbuf_r+0x6c>
 800a342:	4621      	mov	r1, r4
 800a344:	4628      	mov	r0, r5
 800a346:	f000 f915 	bl	800a574 <_fflush_r>
 800a34a:	b988      	cbnz	r0, 800a370 <__swbuf_r+0x90>
 800a34c:	4638      	mov	r0, r7
 800a34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a350:	4b0a      	ldr	r3, [pc, #40]	; (800a37c <__swbuf_r+0x9c>)
 800a352:	429c      	cmp	r4, r3
 800a354:	d101      	bne.n	800a35a <__swbuf_r+0x7a>
 800a356:	68ac      	ldr	r4, [r5, #8]
 800a358:	e7cf      	b.n	800a2fa <__swbuf_r+0x1a>
 800a35a:	4b09      	ldr	r3, [pc, #36]	; (800a380 <__swbuf_r+0xa0>)
 800a35c:	429c      	cmp	r4, r3
 800a35e:	bf08      	it	eq
 800a360:	68ec      	ldreq	r4, [r5, #12]
 800a362:	e7ca      	b.n	800a2fa <__swbuf_r+0x1a>
 800a364:	4621      	mov	r1, r4
 800a366:	4628      	mov	r0, r5
 800a368:	f000 f80c 	bl	800a384 <__swsetup_r>
 800a36c:	2800      	cmp	r0, #0
 800a36e:	d0cb      	beq.n	800a308 <__swbuf_r+0x28>
 800a370:	f04f 37ff 	mov.w	r7, #4294967295
 800a374:	e7ea      	b.n	800a34c <__swbuf_r+0x6c>
 800a376:	bf00      	nop
 800a378:	0800b1b8 	.word	0x0800b1b8
 800a37c:	0800b1d8 	.word	0x0800b1d8
 800a380:	0800b198 	.word	0x0800b198

0800a384 <__swsetup_r>:
 800a384:	4b32      	ldr	r3, [pc, #200]	; (800a450 <__swsetup_r+0xcc>)
 800a386:	b570      	push	{r4, r5, r6, lr}
 800a388:	681d      	ldr	r5, [r3, #0]
 800a38a:	4606      	mov	r6, r0
 800a38c:	460c      	mov	r4, r1
 800a38e:	b125      	cbz	r5, 800a39a <__swsetup_r+0x16>
 800a390:	69ab      	ldr	r3, [r5, #24]
 800a392:	b913      	cbnz	r3, 800a39a <__swsetup_r+0x16>
 800a394:	4628      	mov	r0, r5
 800a396:	f000 f981 	bl	800a69c <__sinit>
 800a39a:	4b2e      	ldr	r3, [pc, #184]	; (800a454 <__swsetup_r+0xd0>)
 800a39c:	429c      	cmp	r4, r3
 800a39e:	d10f      	bne.n	800a3c0 <__swsetup_r+0x3c>
 800a3a0:	686c      	ldr	r4, [r5, #4]
 800a3a2:	89a3      	ldrh	r3, [r4, #12]
 800a3a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3a8:	0719      	lsls	r1, r3, #28
 800a3aa:	d42c      	bmi.n	800a406 <__swsetup_r+0x82>
 800a3ac:	06dd      	lsls	r5, r3, #27
 800a3ae:	d411      	bmi.n	800a3d4 <__swsetup_r+0x50>
 800a3b0:	2309      	movs	r3, #9
 800a3b2:	6033      	str	r3, [r6, #0]
 800a3b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a3b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3bc:	81a3      	strh	r3, [r4, #12]
 800a3be:	e03e      	b.n	800a43e <__swsetup_r+0xba>
 800a3c0:	4b25      	ldr	r3, [pc, #148]	; (800a458 <__swsetup_r+0xd4>)
 800a3c2:	429c      	cmp	r4, r3
 800a3c4:	d101      	bne.n	800a3ca <__swsetup_r+0x46>
 800a3c6:	68ac      	ldr	r4, [r5, #8]
 800a3c8:	e7eb      	b.n	800a3a2 <__swsetup_r+0x1e>
 800a3ca:	4b24      	ldr	r3, [pc, #144]	; (800a45c <__swsetup_r+0xd8>)
 800a3cc:	429c      	cmp	r4, r3
 800a3ce:	bf08      	it	eq
 800a3d0:	68ec      	ldreq	r4, [r5, #12]
 800a3d2:	e7e6      	b.n	800a3a2 <__swsetup_r+0x1e>
 800a3d4:	0758      	lsls	r0, r3, #29
 800a3d6:	d512      	bpl.n	800a3fe <__swsetup_r+0x7a>
 800a3d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3da:	b141      	cbz	r1, 800a3ee <__swsetup_r+0x6a>
 800a3dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3e0:	4299      	cmp	r1, r3
 800a3e2:	d002      	beq.n	800a3ea <__swsetup_r+0x66>
 800a3e4:	4630      	mov	r0, r6
 800a3e6:	f7ff fa45 	bl	8009874 <_free_r>
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	6363      	str	r3, [r4, #52]	; 0x34
 800a3ee:	89a3      	ldrh	r3, [r4, #12]
 800a3f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a3f4:	81a3      	strh	r3, [r4, #12]
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	6063      	str	r3, [r4, #4]
 800a3fa:	6923      	ldr	r3, [r4, #16]
 800a3fc:	6023      	str	r3, [r4, #0]
 800a3fe:	89a3      	ldrh	r3, [r4, #12]
 800a400:	f043 0308 	orr.w	r3, r3, #8
 800a404:	81a3      	strh	r3, [r4, #12]
 800a406:	6923      	ldr	r3, [r4, #16]
 800a408:	b94b      	cbnz	r3, 800a41e <__swsetup_r+0x9a>
 800a40a:	89a3      	ldrh	r3, [r4, #12]
 800a40c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a414:	d003      	beq.n	800a41e <__swsetup_r+0x9a>
 800a416:	4621      	mov	r1, r4
 800a418:	4630      	mov	r0, r6
 800a41a:	f000 fa05 	bl	800a828 <__smakebuf_r>
 800a41e:	89a0      	ldrh	r0, [r4, #12]
 800a420:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a424:	f010 0301 	ands.w	r3, r0, #1
 800a428:	d00a      	beq.n	800a440 <__swsetup_r+0xbc>
 800a42a:	2300      	movs	r3, #0
 800a42c:	60a3      	str	r3, [r4, #8]
 800a42e:	6963      	ldr	r3, [r4, #20]
 800a430:	425b      	negs	r3, r3
 800a432:	61a3      	str	r3, [r4, #24]
 800a434:	6923      	ldr	r3, [r4, #16]
 800a436:	b943      	cbnz	r3, 800a44a <__swsetup_r+0xc6>
 800a438:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a43c:	d1ba      	bne.n	800a3b4 <__swsetup_r+0x30>
 800a43e:	bd70      	pop	{r4, r5, r6, pc}
 800a440:	0781      	lsls	r1, r0, #30
 800a442:	bf58      	it	pl
 800a444:	6963      	ldrpl	r3, [r4, #20]
 800a446:	60a3      	str	r3, [r4, #8]
 800a448:	e7f4      	b.n	800a434 <__swsetup_r+0xb0>
 800a44a:	2000      	movs	r0, #0
 800a44c:	e7f7      	b.n	800a43e <__swsetup_r+0xba>
 800a44e:	bf00      	nop
 800a450:	200002e0 	.word	0x200002e0
 800a454:	0800b1b8 	.word	0x0800b1b8
 800a458:	0800b1d8 	.word	0x0800b1d8
 800a45c:	0800b198 	.word	0x0800b198

0800a460 <abort>:
 800a460:	2006      	movs	r0, #6
 800a462:	b508      	push	{r3, lr}
 800a464:	f000 faac 	bl	800a9c0 <raise>
 800a468:	2001      	movs	r0, #1
 800a46a:	f7f6 fc2e 	bl	8000cca <_exit>
	...

0800a470 <__sflush_r>:
 800a470:	898a      	ldrh	r2, [r1, #12]
 800a472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a474:	4605      	mov	r5, r0
 800a476:	0710      	lsls	r0, r2, #28
 800a478:	460c      	mov	r4, r1
 800a47a:	d457      	bmi.n	800a52c <__sflush_r+0xbc>
 800a47c:	684b      	ldr	r3, [r1, #4]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	dc04      	bgt.n	800a48c <__sflush_r+0x1c>
 800a482:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a484:	2b00      	cmp	r3, #0
 800a486:	dc01      	bgt.n	800a48c <__sflush_r+0x1c>
 800a488:	2000      	movs	r0, #0
 800a48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a48c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a48e:	2e00      	cmp	r6, #0
 800a490:	d0fa      	beq.n	800a488 <__sflush_r+0x18>
 800a492:	2300      	movs	r3, #0
 800a494:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a498:	682f      	ldr	r7, [r5, #0]
 800a49a:	602b      	str	r3, [r5, #0]
 800a49c:	d032      	beq.n	800a504 <__sflush_r+0x94>
 800a49e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a4a0:	89a3      	ldrh	r3, [r4, #12]
 800a4a2:	075a      	lsls	r2, r3, #29
 800a4a4:	d505      	bpl.n	800a4b2 <__sflush_r+0x42>
 800a4a6:	6863      	ldr	r3, [r4, #4]
 800a4a8:	1ac0      	subs	r0, r0, r3
 800a4aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4ac:	b10b      	cbz	r3, 800a4b2 <__sflush_r+0x42>
 800a4ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a4b0:	1ac0      	subs	r0, r0, r3
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4b8:	4628      	mov	r0, r5
 800a4ba:	6a21      	ldr	r1, [r4, #32]
 800a4bc:	47b0      	blx	r6
 800a4be:	1c43      	adds	r3, r0, #1
 800a4c0:	89a3      	ldrh	r3, [r4, #12]
 800a4c2:	d106      	bne.n	800a4d2 <__sflush_r+0x62>
 800a4c4:	6829      	ldr	r1, [r5, #0]
 800a4c6:	291d      	cmp	r1, #29
 800a4c8:	d82c      	bhi.n	800a524 <__sflush_r+0xb4>
 800a4ca:	4a29      	ldr	r2, [pc, #164]	; (800a570 <__sflush_r+0x100>)
 800a4cc:	40ca      	lsrs	r2, r1
 800a4ce:	07d6      	lsls	r6, r2, #31
 800a4d0:	d528      	bpl.n	800a524 <__sflush_r+0xb4>
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	6062      	str	r2, [r4, #4]
 800a4d6:	6922      	ldr	r2, [r4, #16]
 800a4d8:	04d9      	lsls	r1, r3, #19
 800a4da:	6022      	str	r2, [r4, #0]
 800a4dc:	d504      	bpl.n	800a4e8 <__sflush_r+0x78>
 800a4de:	1c42      	adds	r2, r0, #1
 800a4e0:	d101      	bne.n	800a4e6 <__sflush_r+0x76>
 800a4e2:	682b      	ldr	r3, [r5, #0]
 800a4e4:	b903      	cbnz	r3, 800a4e8 <__sflush_r+0x78>
 800a4e6:	6560      	str	r0, [r4, #84]	; 0x54
 800a4e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4ea:	602f      	str	r7, [r5, #0]
 800a4ec:	2900      	cmp	r1, #0
 800a4ee:	d0cb      	beq.n	800a488 <__sflush_r+0x18>
 800a4f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4f4:	4299      	cmp	r1, r3
 800a4f6:	d002      	beq.n	800a4fe <__sflush_r+0x8e>
 800a4f8:	4628      	mov	r0, r5
 800a4fa:	f7ff f9bb 	bl	8009874 <_free_r>
 800a4fe:	2000      	movs	r0, #0
 800a500:	6360      	str	r0, [r4, #52]	; 0x34
 800a502:	e7c2      	b.n	800a48a <__sflush_r+0x1a>
 800a504:	6a21      	ldr	r1, [r4, #32]
 800a506:	2301      	movs	r3, #1
 800a508:	4628      	mov	r0, r5
 800a50a:	47b0      	blx	r6
 800a50c:	1c41      	adds	r1, r0, #1
 800a50e:	d1c7      	bne.n	800a4a0 <__sflush_r+0x30>
 800a510:	682b      	ldr	r3, [r5, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d0c4      	beq.n	800a4a0 <__sflush_r+0x30>
 800a516:	2b1d      	cmp	r3, #29
 800a518:	d001      	beq.n	800a51e <__sflush_r+0xae>
 800a51a:	2b16      	cmp	r3, #22
 800a51c:	d101      	bne.n	800a522 <__sflush_r+0xb2>
 800a51e:	602f      	str	r7, [r5, #0]
 800a520:	e7b2      	b.n	800a488 <__sflush_r+0x18>
 800a522:	89a3      	ldrh	r3, [r4, #12]
 800a524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a528:	81a3      	strh	r3, [r4, #12]
 800a52a:	e7ae      	b.n	800a48a <__sflush_r+0x1a>
 800a52c:	690f      	ldr	r7, [r1, #16]
 800a52e:	2f00      	cmp	r7, #0
 800a530:	d0aa      	beq.n	800a488 <__sflush_r+0x18>
 800a532:	0793      	lsls	r3, r2, #30
 800a534:	bf18      	it	ne
 800a536:	2300      	movne	r3, #0
 800a538:	680e      	ldr	r6, [r1, #0]
 800a53a:	bf08      	it	eq
 800a53c:	694b      	ldreq	r3, [r1, #20]
 800a53e:	1bf6      	subs	r6, r6, r7
 800a540:	600f      	str	r7, [r1, #0]
 800a542:	608b      	str	r3, [r1, #8]
 800a544:	2e00      	cmp	r6, #0
 800a546:	dd9f      	ble.n	800a488 <__sflush_r+0x18>
 800a548:	4633      	mov	r3, r6
 800a54a:	463a      	mov	r2, r7
 800a54c:	4628      	mov	r0, r5
 800a54e:	6a21      	ldr	r1, [r4, #32]
 800a550:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a554:	47e0      	blx	ip
 800a556:	2800      	cmp	r0, #0
 800a558:	dc06      	bgt.n	800a568 <__sflush_r+0xf8>
 800a55a:	89a3      	ldrh	r3, [r4, #12]
 800a55c:	f04f 30ff 	mov.w	r0, #4294967295
 800a560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a564:	81a3      	strh	r3, [r4, #12]
 800a566:	e790      	b.n	800a48a <__sflush_r+0x1a>
 800a568:	4407      	add	r7, r0
 800a56a:	1a36      	subs	r6, r6, r0
 800a56c:	e7ea      	b.n	800a544 <__sflush_r+0xd4>
 800a56e:	bf00      	nop
 800a570:	20400001 	.word	0x20400001

0800a574 <_fflush_r>:
 800a574:	b538      	push	{r3, r4, r5, lr}
 800a576:	690b      	ldr	r3, [r1, #16]
 800a578:	4605      	mov	r5, r0
 800a57a:	460c      	mov	r4, r1
 800a57c:	b913      	cbnz	r3, 800a584 <_fflush_r+0x10>
 800a57e:	2500      	movs	r5, #0
 800a580:	4628      	mov	r0, r5
 800a582:	bd38      	pop	{r3, r4, r5, pc}
 800a584:	b118      	cbz	r0, 800a58e <_fflush_r+0x1a>
 800a586:	6983      	ldr	r3, [r0, #24]
 800a588:	b90b      	cbnz	r3, 800a58e <_fflush_r+0x1a>
 800a58a:	f000 f887 	bl	800a69c <__sinit>
 800a58e:	4b14      	ldr	r3, [pc, #80]	; (800a5e0 <_fflush_r+0x6c>)
 800a590:	429c      	cmp	r4, r3
 800a592:	d11b      	bne.n	800a5cc <_fflush_r+0x58>
 800a594:	686c      	ldr	r4, [r5, #4]
 800a596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d0ef      	beq.n	800a57e <_fflush_r+0xa>
 800a59e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a5a0:	07d0      	lsls	r0, r2, #31
 800a5a2:	d404      	bmi.n	800a5ae <_fflush_r+0x3a>
 800a5a4:	0599      	lsls	r1, r3, #22
 800a5a6:	d402      	bmi.n	800a5ae <_fflush_r+0x3a>
 800a5a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5aa:	f000 f915 	bl	800a7d8 <__retarget_lock_acquire_recursive>
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	4621      	mov	r1, r4
 800a5b2:	f7ff ff5d 	bl	800a470 <__sflush_r>
 800a5b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5b8:	4605      	mov	r5, r0
 800a5ba:	07da      	lsls	r2, r3, #31
 800a5bc:	d4e0      	bmi.n	800a580 <_fflush_r+0xc>
 800a5be:	89a3      	ldrh	r3, [r4, #12]
 800a5c0:	059b      	lsls	r3, r3, #22
 800a5c2:	d4dd      	bmi.n	800a580 <_fflush_r+0xc>
 800a5c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5c6:	f000 f908 	bl	800a7da <__retarget_lock_release_recursive>
 800a5ca:	e7d9      	b.n	800a580 <_fflush_r+0xc>
 800a5cc:	4b05      	ldr	r3, [pc, #20]	; (800a5e4 <_fflush_r+0x70>)
 800a5ce:	429c      	cmp	r4, r3
 800a5d0:	d101      	bne.n	800a5d6 <_fflush_r+0x62>
 800a5d2:	68ac      	ldr	r4, [r5, #8]
 800a5d4:	e7df      	b.n	800a596 <_fflush_r+0x22>
 800a5d6:	4b04      	ldr	r3, [pc, #16]	; (800a5e8 <_fflush_r+0x74>)
 800a5d8:	429c      	cmp	r4, r3
 800a5da:	bf08      	it	eq
 800a5dc:	68ec      	ldreq	r4, [r5, #12]
 800a5de:	e7da      	b.n	800a596 <_fflush_r+0x22>
 800a5e0:	0800b1b8 	.word	0x0800b1b8
 800a5e4:	0800b1d8 	.word	0x0800b1d8
 800a5e8:	0800b198 	.word	0x0800b198

0800a5ec <std>:
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	b510      	push	{r4, lr}
 800a5f0:	4604      	mov	r4, r0
 800a5f2:	e9c0 3300 	strd	r3, r3, [r0]
 800a5f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5fa:	6083      	str	r3, [r0, #8]
 800a5fc:	8181      	strh	r1, [r0, #12]
 800a5fe:	6643      	str	r3, [r0, #100]	; 0x64
 800a600:	81c2      	strh	r2, [r0, #14]
 800a602:	6183      	str	r3, [r0, #24]
 800a604:	4619      	mov	r1, r3
 800a606:	2208      	movs	r2, #8
 800a608:	305c      	adds	r0, #92	; 0x5c
 800a60a:	f7fe ffdd 	bl	80095c8 <memset>
 800a60e:	4b05      	ldr	r3, [pc, #20]	; (800a624 <std+0x38>)
 800a610:	6224      	str	r4, [r4, #32]
 800a612:	6263      	str	r3, [r4, #36]	; 0x24
 800a614:	4b04      	ldr	r3, [pc, #16]	; (800a628 <std+0x3c>)
 800a616:	62a3      	str	r3, [r4, #40]	; 0x28
 800a618:	4b04      	ldr	r3, [pc, #16]	; (800a62c <std+0x40>)
 800a61a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a61c:	4b04      	ldr	r3, [pc, #16]	; (800a630 <std+0x44>)
 800a61e:	6323      	str	r3, [r4, #48]	; 0x30
 800a620:	bd10      	pop	{r4, pc}
 800a622:	bf00      	nop
 800a624:	0800a9f9 	.word	0x0800a9f9
 800a628:	0800aa1b 	.word	0x0800aa1b
 800a62c:	0800aa53 	.word	0x0800aa53
 800a630:	0800aa77 	.word	0x0800aa77

0800a634 <_cleanup_r>:
 800a634:	4901      	ldr	r1, [pc, #4]	; (800a63c <_cleanup_r+0x8>)
 800a636:	f000 b8af 	b.w	800a798 <_fwalk_reent>
 800a63a:	bf00      	nop
 800a63c:	0800a575 	.word	0x0800a575

0800a640 <__sfmoreglue>:
 800a640:	2268      	movs	r2, #104	; 0x68
 800a642:	b570      	push	{r4, r5, r6, lr}
 800a644:	1e4d      	subs	r5, r1, #1
 800a646:	4355      	muls	r5, r2
 800a648:	460e      	mov	r6, r1
 800a64a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a64e:	f7ff f979 	bl	8009944 <_malloc_r>
 800a652:	4604      	mov	r4, r0
 800a654:	b140      	cbz	r0, 800a668 <__sfmoreglue+0x28>
 800a656:	2100      	movs	r1, #0
 800a658:	e9c0 1600 	strd	r1, r6, [r0]
 800a65c:	300c      	adds	r0, #12
 800a65e:	60a0      	str	r0, [r4, #8]
 800a660:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a664:	f7fe ffb0 	bl	80095c8 <memset>
 800a668:	4620      	mov	r0, r4
 800a66a:	bd70      	pop	{r4, r5, r6, pc}

0800a66c <__sfp_lock_acquire>:
 800a66c:	4801      	ldr	r0, [pc, #4]	; (800a674 <__sfp_lock_acquire+0x8>)
 800a66e:	f000 b8b3 	b.w	800a7d8 <__retarget_lock_acquire_recursive>
 800a672:	bf00      	nop
 800a674:	20001e9d 	.word	0x20001e9d

0800a678 <__sfp_lock_release>:
 800a678:	4801      	ldr	r0, [pc, #4]	; (800a680 <__sfp_lock_release+0x8>)
 800a67a:	f000 b8ae 	b.w	800a7da <__retarget_lock_release_recursive>
 800a67e:	bf00      	nop
 800a680:	20001e9d 	.word	0x20001e9d

0800a684 <__sinit_lock_acquire>:
 800a684:	4801      	ldr	r0, [pc, #4]	; (800a68c <__sinit_lock_acquire+0x8>)
 800a686:	f000 b8a7 	b.w	800a7d8 <__retarget_lock_acquire_recursive>
 800a68a:	bf00      	nop
 800a68c:	20001e9e 	.word	0x20001e9e

0800a690 <__sinit_lock_release>:
 800a690:	4801      	ldr	r0, [pc, #4]	; (800a698 <__sinit_lock_release+0x8>)
 800a692:	f000 b8a2 	b.w	800a7da <__retarget_lock_release_recursive>
 800a696:	bf00      	nop
 800a698:	20001e9e 	.word	0x20001e9e

0800a69c <__sinit>:
 800a69c:	b510      	push	{r4, lr}
 800a69e:	4604      	mov	r4, r0
 800a6a0:	f7ff fff0 	bl	800a684 <__sinit_lock_acquire>
 800a6a4:	69a3      	ldr	r3, [r4, #24]
 800a6a6:	b11b      	cbz	r3, 800a6b0 <__sinit+0x14>
 800a6a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6ac:	f7ff bff0 	b.w	800a690 <__sinit_lock_release>
 800a6b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a6b4:	6523      	str	r3, [r4, #80]	; 0x50
 800a6b6:	4b13      	ldr	r3, [pc, #76]	; (800a704 <__sinit+0x68>)
 800a6b8:	4a13      	ldr	r2, [pc, #76]	; (800a708 <__sinit+0x6c>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a6be:	42a3      	cmp	r3, r4
 800a6c0:	bf08      	it	eq
 800a6c2:	2301      	moveq	r3, #1
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	bf08      	it	eq
 800a6c8:	61a3      	streq	r3, [r4, #24]
 800a6ca:	f000 f81f 	bl	800a70c <__sfp>
 800a6ce:	6060      	str	r0, [r4, #4]
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f000 f81b 	bl	800a70c <__sfp>
 800a6d6:	60a0      	str	r0, [r4, #8]
 800a6d8:	4620      	mov	r0, r4
 800a6da:	f000 f817 	bl	800a70c <__sfp>
 800a6de:	2200      	movs	r2, #0
 800a6e0:	2104      	movs	r1, #4
 800a6e2:	60e0      	str	r0, [r4, #12]
 800a6e4:	6860      	ldr	r0, [r4, #4]
 800a6e6:	f7ff ff81 	bl	800a5ec <std>
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	2109      	movs	r1, #9
 800a6ee:	68a0      	ldr	r0, [r4, #8]
 800a6f0:	f7ff ff7c 	bl	800a5ec <std>
 800a6f4:	2202      	movs	r2, #2
 800a6f6:	2112      	movs	r1, #18
 800a6f8:	68e0      	ldr	r0, [r4, #12]
 800a6fa:	f7ff ff77 	bl	800a5ec <std>
 800a6fe:	2301      	movs	r3, #1
 800a700:	61a3      	str	r3, [r4, #24]
 800a702:	e7d1      	b.n	800a6a8 <__sinit+0xc>
 800a704:	0800afb0 	.word	0x0800afb0
 800a708:	0800a635 	.word	0x0800a635

0800a70c <__sfp>:
 800a70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a70e:	4607      	mov	r7, r0
 800a710:	f7ff ffac 	bl	800a66c <__sfp_lock_acquire>
 800a714:	4b1e      	ldr	r3, [pc, #120]	; (800a790 <__sfp+0x84>)
 800a716:	681e      	ldr	r6, [r3, #0]
 800a718:	69b3      	ldr	r3, [r6, #24]
 800a71a:	b913      	cbnz	r3, 800a722 <__sfp+0x16>
 800a71c:	4630      	mov	r0, r6
 800a71e:	f7ff ffbd 	bl	800a69c <__sinit>
 800a722:	3648      	adds	r6, #72	; 0x48
 800a724:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a728:	3b01      	subs	r3, #1
 800a72a:	d503      	bpl.n	800a734 <__sfp+0x28>
 800a72c:	6833      	ldr	r3, [r6, #0]
 800a72e:	b30b      	cbz	r3, 800a774 <__sfp+0x68>
 800a730:	6836      	ldr	r6, [r6, #0]
 800a732:	e7f7      	b.n	800a724 <__sfp+0x18>
 800a734:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a738:	b9d5      	cbnz	r5, 800a770 <__sfp+0x64>
 800a73a:	4b16      	ldr	r3, [pc, #88]	; (800a794 <__sfp+0x88>)
 800a73c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a740:	60e3      	str	r3, [r4, #12]
 800a742:	6665      	str	r5, [r4, #100]	; 0x64
 800a744:	f000 f847 	bl	800a7d6 <__retarget_lock_init_recursive>
 800a748:	f7ff ff96 	bl	800a678 <__sfp_lock_release>
 800a74c:	2208      	movs	r2, #8
 800a74e:	4629      	mov	r1, r5
 800a750:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a754:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a758:	6025      	str	r5, [r4, #0]
 800a75a:	61a5      	str	r5, [r4, #24]
 800a75c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a760:	f7fe ff32 	bl	80095c8 <memset>
 800a764:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a768:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a76c:	4620      	mov	r0, r4
 800a76e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a770:	3468      	adds	r4, #104	; 0x68
 800a772:	e7d9      	b.n	800a728 <__sfp+0x1c>
 800a774:	2104      	movs	r1, #4
 800a776:	4638      	mov	r0, r7
 800a778:	f7ff ff62 	bl	800a640 <__sfmoreglue>
 800a77c:	4604      	mov	r4, r0
 800a77e:	6030      	str	r0, [r6, #0]
 800a780:	2800      	cmp	r0, #0
 800a782:	d1d5      	bne.n	800a730 <__sfp+0x24>
 800a784:	f7ff ff78 	bl	800a678 <__sfp_lock_release>
 800a788:	230c      	movs	r3, #12
 800a78a:	603b      	str	r3, [r7, #0]
 800a78c:	e7ee      	b.n	800a76c <__sfp+0x60>
 800a78e:	bf00      	nop
 800a790:	0800afb0 	.word	0x0800afb0
 800a794:	ffff0001 	.word	0xffff0001

0800a798 <_fwalk_reent>:
 800a798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a79c:	4606      	mov	r6, r0
 800a79e:	4688      	mov	r8, r1
 800a7a0:	2700      	movs	r7, #0
 800a7a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a7a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7aa:	f1b9 0901 	subs.w	r9, r9, #1
 800a7ae:	d505      	bpl.n	800a7bc <_fwalk_reent+0x24>
 800a7b0:	6824      	ldr	r4, [r4, #0]
 800a7b2:	2c00      	cmp	r4, #0
 800a7b4:	d1f7      	bne.n	800a7a6 <_fwalk_reent+0xe>
 800a7b6:	4638      	mov	r0, r7
 800a7b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7bc:	89ab      	ldrh	r3, [r5, #12]
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	d907      	bls.n	800a7d2 <_fwalk_reent+0x3a>
 800a7c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	d003      	beq.n	800a7d2 <_fwalk_reent+0x3a>
 800a7ca:	4629      	mov	r1, r5
 800a7cc:	4630      	mov	r0, r6
 800a7ce:	47c0      	blx	r8
 800a7d0:	4307      	orrs	r7, r0
 800a7d2:	3568      	adds	r5, #104	; 0x68
 800a7d4:	e7e9      	b.n	800a7aa <_fwalk_reent+0x12>

0800a7d6 <__retarget_lock_init_recursive>:
 800a7d6:	4770      	bx	lr

0800a7d8 <__retarget_lock_acquire_recursive>:
 800a7d8:	4770      	bx	lr

0800a7da <__retarget_lock_release_recursive>:
 800a7da:	4770      	bx	lr

0800a7dc <__swhatbuf_r>:
 800a7dc:	b570      	push	{r4, r5, r6, lr}
 800a7de:	460e      	mov	r6, r1
 800a7e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7e4:	4614      	mov	r4, r2
 800a7e6:	2900      	cmp	r1, #0
 800a7e8:	461d      	mov	r5, r3
 800a7ea:	b096      	sub	sp, #88	; 0x58
 800a7ec:	da08      	bge.n	800a800 <__swhatbuf_r+0x24>
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a7f4:	602a      	str	r2, [r5, #0]
 800a7f6:	061a      	lsls	r2, r3, #24
 800a7f8:	d410      	bmi.n	800a81c <__swhatbuf_r+0x40>
 800a7fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7fe:	e00e      	b.n	800a81e <__swhatbuf_r+0x42>
 800a800:	466a      	mov	r2, sp
 800a802:	f000 f95f 	bl	800aac4 <_fstat_r>
 800a806:	2800      	cmp	r0, #0
 800a808:	dbf1      	blt.n	800a7ee <__swhatbuf_r+0x12>
 800a80a:	9a01      	ldr	r2, [sp, #4]
 800a80c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a810:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a814:	425a      	negs	r2, r3
 800a816:	415a      	adcs	r2, r3
 800a818:	602a      	str	r2, [r5, #0]
 800a81a:	e7ee      	b.n	800a7fa <__swhatbuf_r+0x1e>
 800a81c:	2340      	movs	r3, #64	; 0x40
 800a81e:	2000      	movs	r0, #0
 800a820:	6023      	str	r3, [r4, #0]
 800a822:	b016      	add	sp, #88	; 0x58
 800a824:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a828 <__smakebuf_r>:
 800a828:	898b      	ldrh	r3, [r1, #12]
 800a82a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a82c:	079d      	lsls	r5, r3, #30
 800a82e:	4606      	mov	r6, r0
 800a830:	460c      	mov	r4, r1
 800a832:	d507      	bpl.n	800a844 <__smakebuf_r+0x1c>
 800a834:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a838:	6023      	str	r3, [r4, #0]
 800a83a:	6123      	str	r3, [r4, #16]
 800a83c:	2301      	movs	r3, #1
 800a83e:	6163      	str	r3, [r4, #20]
 800a840:	b002      	add	sp, #8
 800a842:	bd70      	pop	{r4, r5, r6, pc}
 800a844:	466a      	mov	r2, sp
 800a846:	ab01      	add	r3, sp, #4
 800a848:	f7ff ffc8 	bl	800a7dc <__swhatbuf_r>
 800a84c:	9900      	ldr	r1, [sp, #0]
 800a84e:	4605      	mov	r5, r0
 800a850:	4630      	mov	r0, r6
 800a852:	f7ff f877 	bl	8009944 <_malloc_r>
 800a856:	b948      	cbnz	r0, 800a86c <__smakebuf_r+0x44>
 800a858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a85c:	059a      	lsls	r2, r3, #22
 800a85e:	d4ef      	bmi.n	800a840 <__smakebuf_r+0x18>
 800a860:	f023 0303 	bic.w	r3, r3, #3
 800a864:	f043 0302 	orr.w	r3, r3, #2
 800a868:	81a3      	strh	r3, [r4, #12]
 800a86a:	e7e3      	b.n	800a834 <__smakebuf_r+0xc>
 800a86c:	4b0d      	ldr	r3, [pc, #52]	; (800a8a4 <__smakebuf_r+0x7c>)
 800a86e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a870:	89a3      	ldrh	r3, [r4, #12]
 800a872:	6020      	str	r0, [r4, #0]
 800a874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a878:	81a3      	strh	r3, [r4, #12]
 800a87a:	9b00      	ldr	r3, [sp, #0]
 800a87c:	6120      	str	r0, [r4, #16]
 800a87e:	6163      	str	r3, [r4, #20]
 800a880:	9b01      	ldr	r3, [sp, #4]
 800a882:	b15b      	cbz	r3, 800a89c <__smakebuf_r+0x74>
 800a884:	4630      	mov	r0, r6
 800a886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a88a:	f000 f92d 	bl	800aae8 <_isatty_r>
 800a88e:	b128      	cbz	r0, 800a89c <__smakebuf_r+0x74>
 800a890:	89a3      	ldrh	r3, [r4, #12]
 800a892:	f023 0303 	bic.w	r3, r3, #3
 800a896:	f043 0301 	orr.w	r3, r3, #1
 800a89a:	81a3      	strh	r3, [r4, #12]
 800a89c:	89a0      	ldrh	r0, [r4, #12]
 800a89e:	4305      	orrs	r5, r0
 800a8a0:	81a5      	strh	r5, [r4, #12]
 800a8a2:	e7cd      	b.n	800a840 <__smakebuf_r+0x18>
 800a8a4:	0800a635 	.word	0x0800a635

0800a8a8 <memchr>:
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	b510      	push	{r4, lr}
 800a8ac:	b2c9      	uxtb	r1, r1
 800a8ae:	4402      	add	r2, r0
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	d101      	bne.n	800a8ba <memchr+0x12>
 800a8b6:	2000      	movs	r0, #0
 800a8b8:	e003      	b.n	800a8c2 <memchr+0x1a>
 800a8ba:	7804      	ldrb	r4, [r0, #0]
 800a8bc:	3301      	adds	r3, #1
 800a8be:	428c      	cmp	r4, r1
 800a8c0:	d1f6      	bne.n	800a8b0 <memchr+0x8>
 800a8c2:	bd10      	pop	{r4, pc}

0800a8c4 <memmove>:
 800a8c4:	4288      	cmp	r0, r1
 800a8c6:	b510      	push	{r4, lr}
 800a8c8:	eb01 0402 	add.w	r4, r1, r2
 800a8cc:	d902      	bls.n	800a8d4 <memmove+0x10>
 800a8ce:	4284      	cmp	r4, r0
 800a8d0:	4623      	mov	r3, r4
 800a8d2:	d807      	bhi.n	800a8e4 <memmove+0x20>
 800a8d4:	1e43      	subs	r3, r0, #1
 800a8d6:	42a1      	cmp	r1, r4
 800a8d8:	d008      	beq.n	800a8ec <memmove+0x28>
 800a8da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8e2:	e7f8      	b.n	800a8d6 <memmove+0x12>
 800a8e4:	4601      	mov	r1, r0
 800a8e6:	4402      	add	r2, r0
 800a8e8:	428a      	cmp	r2, r1
 800a8ea:	d100      	bne.n	800a8ee <memmove+0x2a>
 800a8ec:	bd10      	pop	{r4, pc}
 800a8ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8f6:	e7f7      	b.n	800a8e8 <memmove+0x24>

0800a8f8 <__malloc_lock>:
 800a8f8:	4801      	ldr	r0, [pc, #4]	; (800a900 <__malloc_lock+0x8>)
 800a8fa:	f7ff bf6d 	b.w	800a7d8 <__retarget_lock_acquire_recursive>
 800a8fe:	bf00      	nop
 800a900:	20001e9c 	.word	0x20001e9c

0800a904 <__malloc_unlock>:
 800a904:	4801      	ldr	r0, [pc, #4]	; (800a90c <__malloc_unlock+0x8>)
 800a906:	f7ff bf68 	b.w	800a7da <__retarget_lock_release_recursive>
 800a90a:	bf00      	nop
 800a90c:	20001e9c 	.word	0x20001e9c

0800a910 <_realloc_r>:
 800a910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a914:	4680      	mov	r8, r0
 800a916:	4614      	mov	r4, r2
 800a918:	460e      	mov	r6, r1
 800a91a:	b921      	cbnz	r1, 800a926 <_realloc_r+0x16>
 800a91c:	4611      	mov	r1, r2
 800a91e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a922:	f7ff b80f 	b.w	8009944 <_malloc_r>
 800a926:	b92a      	cbnz	r2, 800a934 <_realloc_r+0x24>
 800a928:	f7fe ffa4 	bl	8009874 <_free_r>
 800a92c:	4625      	mov	r5, r4
 800a92e:	4628      	mov	r0, r5
 800a930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a934:	f000 f8fa 	bl	800ab2c <_malloc_usable_size_r>
 800a938:	4284      	cmp	r4, r0
 800a93a:	4607      	mov	r7, r0
 800a93c:	d802      	bhi.n	800a944 <_realloc_r+0x34>
 800a93e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a942:	d812      	bhi.n	800a96a <_realloc_r+0x5a>
 800a944:	4621      	mov	r1, r4
 800a946:	4640      	mov	r0, r8
 800a948:	f7fe fffc 	bl	8009944 <_malloc_r>
 800a94c:	4605      	mov	r5, r0
 800a94e:	2800      	cmp	r0, #0
 800a950:	d0ed      	beq.n	800a92e <_realloc_r+0x1e>
 800a952:	42bc      	cmp	r4, r7
 800a954:	4622      	mov	r2, r4
 800a956:	4631      	mov	r1, r6
 800a958:	bf28      	it	cs
 800a95a:	463a      	movcs	r2, r7
 800a95c:	f7fe fe26 	bl	80095ac <memcpy>
 800a960:	4631      	mov	r1, r6
 800a962:	4640      	mov	r0, r8
 800a964:	f7fe ff86 	bl	8009874 <_free_r>
 800a968:	e7e1      	b.n	800a92e <_realloc_r+0x1e>
 800a96a:	4635      	mov	r5, r6
 800a96c:	e7df      	b.n	800a92e <_realloc_r+0x1e>

0800a96e <_raise_r>:
 800a96e:	291f      	cmp	r1, #31
 800a970:	b538      	push	{r3, r4, r5, lr}
 800a972:	4604      	mov	r4, r0
 800a974:	460d      	mov	r5, r1
 800a976:	d904      	bls.n	800a982 <_raise_r+0x14>
 800a978:	2316      	movs	r3, #22
 800a97a:	6003      	str	r3, [r0, #0]
 800a97c:	f04f 30ff 	mov.w	r0, #4294967295
 800a980:	bd38      	pop	{r3, r4, r5, pc}
 800a982:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a984:	b112      	cbz	r2, 800a98c <_raise_r+0x1e>
 800a986:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a98a:	b94b      	cbnz	r3, 800a9a0 <_raise_r+0x32>
 800a98c:	4620      	mov	r0, r4
 800a98e:	f000 f831 	bl	800a9f4 <_getpid_r>
 800a992:	462a      	mov	r2, r5
 800a994:	4601      	mov	r1, r0
 800a996:	4620      	mov	r0, r4
 800a998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a99c:	f000 b818 	b.w	800a9d0 <_kill_r>
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d00a      	beq.n	800a9ba <_raise_r+0x4c>
 800a9a4:	1c59      	adds	r1, r3, #1
 800a9a6:	d103      	bne.n	800a9b0 <_raise_r+0x42>
 800a9a8:	2316      	movs	r3, #22
 800a9aa:	6003      	str	r3, [r0, #0]
 800a9ac:	2001      	movs	r0, #1
 800a9ae:	e7e7      	b.n	800a980 <_raise_r+0x12>
 800a9b0:	2400      	movs	r4, #0
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a9b8:	4798      	blx	r3
 800a9ba:	2000      	movs	r0, #0
 800a9bc:	e7e0      	b.n	800a980 <_raise_r+0x12>
	...

0800a9c0 <raise>:
 800a9c0:	4b02      	ldr	r3, [pc, #8]	; (800a9cc <raise+0xc>)
 800a9c2:	4601      	mov	r1, r0
 800a9c4:	6818      	ldr	r0, [r3, #0]
 800a9c6:	f7ff bfd2 	b.w	800a96e <_raise_r>
 800a9ca:	bf00      	nop
 800a9cc:	200002e0 	.word	0x200002e0

0800a9d0 <_kill_r>:
 800a9d0:	b538      	push	{r3, r4, r5, lr}
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	4d06      	ldr	r5, [pc, #24]	; (800a9f0 <_kill_r+0x20>)
 800a9d6:	4604      	mov	r4, r0
 800a9d8:	4608      	mov	r0, r1
 800a9da:	4611      	mov	r1, r2
 800a9dc:	602b      	str	r3, [r5, #0]
 800a9de:	f7f6 f964 	bl	8000caa <_kill>
 800a9e2:	1c43      	adds	r3, r0, #1
 800a9e4:	d102      	bne.n	800a9ec <_kill_r+0x1c>
 800a9e6:	682b      	ldr	r3, [r5, #0]
 800a9e8:	b103      	cbz	r3, 800a9ec <_kill_r+0x1c>
 800a9ea:	6023      	str	r3, [r4, #0]
 800a9ec:	bd38      	pop	{r3, r4, r5, pc}
 800a9ee:	bf00      	nop
 800a9f0:	20001ea0 	.word	0x20001ea0

0800a9f4 <_getpid_r>:
 800a9f4:	f7f6 b952 	b.w	8000c9c <_getpid>

0800a9f8 <__sread>:
 800a9f8:	b510      	push	{r4, lr}
 800a9fa:	460c      	mov	r4, r1
 800a9fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa00:	f000 f89c 	bl	800ab3c <_read_r>
 800aa04:	2800      	cmp	r0, #0
 800aa06:	bfab      	itete	ge
 800aa08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa0a:	89a3      	ldrhlt	r3, [r4, #12]
 800aa0c:	181b      	addge	r3, r3, r0
 800aa0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa12:	bfac      	ite	ge
 800aa14:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa16:	81a3      	strhlt	r3, [r4, #12]
 800aa18:	bd10      	pop	{r4, pc}

0800aa1a <__swrite>:
 800aa1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa1e:	461f      	mov	r7, r3
 800aa20:	898b      	ldrh	r3, [r1, #12]
 800aa22:	4605      	mov	r5, r0
 800aa24:	05db      	lsls	r3, r3, #23
 800aa26:	460c      	mov	r4, r1
 800aa28:	4616      	mov	r6, r2
 800aa2a:	d505      	bpl.n	800aa38 <__swrite+0x1e>
 800aa2c:	2302      	movs	r3, #2
 800aa2e:	2200      	movs	r2, #0
 800aa30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa34:	f000 f868 	bl	800ab08 <_lseek_r>
 800aa38:	89a3      	ldrh	r3, [r4, #12]
 800aa3a:	4632      	mov	r2, r6
 800aa3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa40:	81a3      	strh	r3, [r4, #12]
 800aa42:	4628      	mov	r0, r5
 800aa44:	463b      	mov	r3, r7
 800aa46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa4e:	f000 b817 	b.w	800aa80 <_write_r>

0800aa52 <__sseek>:
 800aa52:	b510      	push	{r4, lr}
 800aa54:	460c      	mov	r4, r1
 800aa56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa5a:	f000 f855 	bl	800ab08 <_lseek_r>
 800aa5e:	1c43      	adds	r3, r0, #1
 800aa60:	89a3      	ldrh	r3, [r4, #12]
 800aa62:	bf15      	itete	ne
 800aa64:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa6e:	81a3      	strheq	r3, [r4, #12]
 800aa70:	bf18      	it	ne
 800aa72:	81a3      	strhne	r3, [r4, #12]
 800aa74:	bd10      	pop	{r4, pc}

0800aa76 <__sclose>:
 800aa76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa7a:	f000 b813 	b.w	800aaa4 <_close_r>
	...

0800aa80 <_write_r>:
 800aa80:	b538      	push	{r3, r4, r5, lr}
 800aa82:	4604      	mov	r4, r0
 800aa84:	4608      	mov	r0, r1
 800aa86:	4611      	mov	r1, r2
 800aa88:	2200      	movs	r2, #0
 800aa8a:	4d05      	ldr	r5, [pc, #20]	; (800aaa0 <_write_r+0x20>)
 800aa8c:	602a      	str	r2, [r5, #0]
 800aa8e:	461a      	mov	r2, r3
 800aa90:	f7f6 f942 	bl	8000d18 <_write>
 800aa94:	1c43      	adds	r3, r0, #1
 800aa96:	d102      	bne.n	800aa9e <_write_r+0x1e>
 800aa98:	682b      	ldr	r3, [r5, #0]
 800aa9a:	b103      	cbz	r3, 800aa9e <_write_r+0x1e>
 800aa9c:	6023      	str	r3, [r4, #0]
 800aa9e:	bd38      	pop	{r3, r4, r5, pc}
 800aaa0:	20001ea0 	.word	0x20001ea0

0800aaa4 <_close_r>:
 800aaa4:	b538      	push	{r3, r4, r5, lr}
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	4d05      	ldr	r5, [pc, #20]	; (800aac0 <_close_r+0x1c>)
 800aaaa:	4604      	mov	r4, r0
 800aaac:	4608      	mov	r0, r1
 800aaae:	602b      	str	r3, [r5, #0]
 800aab0:	f7f6 f94e 	bl	8000d50 <_close>
 800aab4:	1c43      	adds	r3, r0, #1
 800aab6:	d102      	bne.n	800aabe <_close_r+0x1a>
 800aab8:	682b      	ldr	r3, [r5, #0]
 800aaba:	b103      	cbz	r3, 800aabe <_close_r+0x1a>
 800aabc:	6023      	str	r3, [r4, #0]
 800aabe:	bd38      	pop	{r3, r4, r5, pc}
 800aac0:	20001ea0 	.word	0x20001ea0

0800aac4 <_fstat_r>:
 800aac4:	b538      	push	{r3, r4, r5, lr}
 800aac6:	2300      	movs	r3, #0
 800aac8:	4d06      	ldr	r5, [pc, #24]	; (800aae4 <_fstat_r+0x20>)
 800aaca:	4604      	mov	r4, r0
 800aacc:	4608      	mov	r0, r1
 800aace:	4611      	mov	r1, r2
 800aad0:	602b      	str	r3, [r5, #0]
 800aad2:	f7f6 f948 	bl	8000d66 <_fstat>
 800aad6:	1c43      	adds	r3, r0, #1
 800aad8:	d102      	bne.n	800aae0 <_fstat_r+0x1c>
 800aada:	682b      	ldr	r3, [r5, #0]
 800aadc:	b103      	cbz	r3, 800aae0 <_fstat_r+0x1c>
 800aade:	6023      	str	r3, [r4, #0]
 800aae0:	bd38      	pop	{r3, r4, r5, pc}
 800aae2:	bf00      	nop
 800aae4:	20001ea0 	.word	0x20001ea0

0800aae8 <_isatty_r>:
 800aae8:	b538      	push	{r3, r4, r5, lr}
 800aaea:	2300      	movs	r3, #0
 800aaec:	4d05      	ldr	r5, [pc, #20]	; (800ab04 <_isatty_r+0x1c>)
 800aaee:	4604      	mov	r4, r0
 800aaf0:	4608      	mov	r0, r1
 800aaf2:	602b      	str	r3, [r5, #0]
 800aaf4:	f7f6 f946 	bl	8000d84 <_isatty>
 800aaf8:	1c43      	adds	r3, r0, #1
 800aafa:	d102      	bne.n	800ab02 <_isatty_r+0x1a>
 800aafc:	682b      	ldr	r3, [r5, #0]
 800aafe:	b103      	cbz	r3, 800ab02 <_isatty_r+0x1a>
 800ab00:	6023      	str	r3, [r4, #0]
 800ab02:	bd38      	pop	{r3, r4, r5, pc}
 800ab04:	20001ea0 	.word	0x20001ea0

0800ab08 <_lseek_r>:
 800ab08:	b538      	push	{r3, r4, r5, lr}
 800ab0a:	4604      	mov	r4, r0
 800ab0c:	4608      	mov	r0, r1
 800ab0e:	4611      	mov	r1, r2
 800ab10:	2200      	movs	r2, #0
 800ab12:	4d05      	ldr	r5, [pc, #20]	; (800ab28 <_lseek_r+0x20>)
 800ab14:	602a      	str	r2, [r5, #0]
 800ab16:	461a      	mov	r2, r3
 800ab18:	f7f6 f93e 	bl	8000d98 <_lseek>
 800ab1c:	1c43      	adds	r3, r0, #1
 800ab1e:	d102      	bne.n	800ab26 <_lseek_r+0x1e>
 800ab20:	682b      	ldr	r3, [r5, #0]
 800ab22:	b103      	cbz	r3, 800ab26 <_lseek_r+0x1e>
 800ab24:	6023      	str	r3, [r4, #0]
 800ab26:	bd38      	pop	{r3, r4, r5, pc}
 800ab28:	20001ea0 	.word	0x20001ea0

0800ab2c <_malloc_usable_size_r>:
 800ab2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab30:	1f18      	subs	r0, r3, #4
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	bfbc      	itt	lt
 800ab36:	580b      	ldrlt	r3, [r1, r0]
 800ab38:	18c0      	addlt	r0, r0, r3
 800ab3a:	4770      	bx	lr

0800ab3c <_read_r>:
 800ab3c:	b538      	push	{r3, r4, r5, lr}
 800ab3e:	4604      	mov	r4, r0
 800ab40:	4608      	mov	r0, r1
 800ab42:	4611      	mov	r1, r2
 800ab44:	2200      	movs	r2, #0
 800ab46:	4d05      	ldr	r5, [pc, #20]	; (800ab5c <_read_r+0x20>)
 800ab48:	602a      	str	r2, [r5, #0]
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	f7f6 f8c7 	bl	8000cde <_read>
 800ab50:	1c43      	adds	r3, r0, #1
 800ab52:	d102      	bne.n	800ab5a <_read_r+0x1e>
 800ab54:	682b      	ldr	r3, [r5, #0]
 800ab56:	b103      	cbz	r3, 800ab5a <_read_r+0x1e>
 800ab58:	6023      	str	r3, [r4, #0]
 800ab5a:	bd38      	pop	{r3, r4, r5, pc}
 800ab5c:	20001ea0 	.word	0x20001ea0

0800ab60 <_init>:
 800ab60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab62:	bf00      	nop
 800ab64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab66:	bc08      	pop	{r3}
 800ab68:	469e      	mov	lr, r3
 800ab6a:	4770      	bx	lr

0800ab6c <_fini>:
 800ab6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab6e:	bf00      	nop
 800ab70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab72:	bc08      	pop	{r3}
 800ab74:	469e      	mov	lr, r3
 800ab76:	4770      	bx	lr
