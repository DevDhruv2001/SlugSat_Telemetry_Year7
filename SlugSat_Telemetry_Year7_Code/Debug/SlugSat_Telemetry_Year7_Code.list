
SlugSat_Telemetry_Year7_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afe4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000077c  0800b120  0800b120  0001b120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b89c  0800b89c  00020344  2**0
                  CONTENTS
  4 .ARM          00000008  0800b89c  0800b89c  0001b89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8a4  0800b8a4  00020344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8a4  0800b8a4  0001b8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8a8  0800b8a8  0001b8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000344  20000000  0800b8ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b60  20000344  0800bbf0  00020344  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ea4  0800bbf0  00021ea4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020344  2**0
                  CONTENTS, READONLY
 12 .debug_info   000123d2  00000000  00000000  0002036d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032a5  00000000  00000000  0003273f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  000359e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  00036930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e1e  00000000  00000000  00037720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000131fe  00000000  00000000  0005153e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d8c1  00000000  00000000  0006473c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1ffd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049a8  00000000  00000000  000f2050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000344 	.word	0x20000344
 8000158:	00000000 	.word	0x00000000
 800015c:	0800b108 	.word	0x0800b108

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000348 	.word	0x20000348
 8000178:	0800b108 	.word	0x0800b108

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b976 	b.w	8000490 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14d      	bne.n	8000268 <__udivmoddi4+0xac>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d968      	bls.n	80002a4 <__udivmoddi4+0xe8>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b152      	cbz	r2, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa01 f302 	lsl.w	r3, r1, r2
 80001dc:	f1c2 0120 	rsb	r1, r2, #32
 80001e0:	fa20 f101 	lsr.w	r1, r0, r1
 80001e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e8:	ea41 0803 	orr.w	r8, r1, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001f6:	fa1f fe8c 	uxth.w	lr, ip
 80001fa:	fb01 8817 	mls	r8, r1, r7, r8
 80001fe:	fb07 f00e 	mul.w	r0, r7, lr
 8000202:	0c23      	lsrs	r3, r4, #16
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	4298      	cmp	r0, r3
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0303 	adds.w	r3, ip, r3
 8000210:	f107 35ff 	add.w	r5, r7, #4294967295
 8000214:	f080 811e 	bcs.w	8000454 <__udivmoddi4+0x298>
 8000218:	4298      	cmp	r0, r3
 800021a:	f240 811b 	bls.w	8000454 <__udivmoddi4+0x298>
 800021e:	3f02      	subs	r7, #2
 8000220:	4463      	add	r3, ip
 8000222:	1a1b      	subs	r3, r3, r0
 8000224:	fbb3 f0f1 	udiv	r0, r3, r1
 8000228:	fb01 3310 	mls	r3, r1, r0, r3
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000236:	45a6      	cmp	lr, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000242:	f080 8109 	bcs.w	8000458 <__udivmoddi4+0x29c>
 8000246:	45a6      	cmp	lr, r4
 8000248:	f240 8106 	bls.w	8000458 <__udivmoddi4+0x29c>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	eba4 040e 	sub.w	r4, r4, lr
 8000256:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa8>
 800025c:	2300      	movs	r3, #0
 800025e:	40d4      	lsrs	r4, r2
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	428b      	cmp	r3, r1
 800026a:	d908      	bls.n	800027e <__udivmoddi4+0xc2>
 800026c:	2e00      	cmp	r6, #0
 800026e:	f000 80ee 	beq.w	800044e <__udivmoddi4+0x292>
 8000272:	2100      	movs	r1, #0
 8000274:	e9c6 0500 	strd	r0, r5, [r6]
 8000278:	4608      	mov	r0, r1
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f183 	clz	r1, r3
 8000282:	2900      	cmp	r1, #0
 8000284:	d14a      	bne.n	800031c <__udivmoddi4+0x160>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd4>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fc 	bhi.w	8000488 <__udivmoddi4+0x2cc>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb65 0303 	sbc.w	r3, r5, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e2      	beq.n	8000264 <__udivmoddi4+0xa8>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7df      	b.n	8000264 <__udivmoddi4+0xa8>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xec>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 8091 	bne.w	80003d4 <__udivmoddi4+0x218>
 80002b2:	eba1 000c 	sub.w	r0, r1, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002bc:	fa1f fe8c 	uxth.w	lr, ip
 80002c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002c4:	fb07 0013 	mls	r0, r7, r3, r0
 80002c8:	0c25      	lsrs	r5, r4, #16
 80002ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ce:	fb0e f003 	mul.w	r0, lr, r3
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0x12c>
 80002d6:	eb1c 0505 	adds.w	r5, ip, r5
 80002da:	f103 38ff 	add.w	r8, r3, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x12a>
 80002e0:	42a8      	cmp	r0, r5
 80002e2:	f200 80ce 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 80002e6:	4643      	mov	r3, r8
 80002e8:	1a2d      	subs	r5, r5, r0
 80002ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ee:	fb07 5510 	mls	r5, r7, r0, r5
 80002f2:	fb0e fe00 	mul.w	lr, lr, r0
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002fc:	45a6      	cmp	lr, r4
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0x156>
 8000300:	eb1c 0404 	adds.w	r4, ip, r4
 8000304:	f100 35ff 	add.w	r5, r0, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x154>
 800030a:	45a6      	cmp	lr, r4
 800030c:	f200 80b6 	bhi.w	800047c <__udivmoddi4+0x2c0>
 8000310:	4628      	mov	r0, r5
 8000312:	eba4 040e 	sub.w	r4, r4, lr
 8000316:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031a:	e79e      	b.n	800025a <__udivmoddi4+0x9e>
 800031c:	f1c1 0720 	rsb	r7, r1, #32
 8000320:	408b      	lsls	r3, r1
 8000322:	fa22 fc07 	lsr.w	ip, r2, r7
 8000326:	ea4c 0c03 	orr.w	ip, ip, r3
 800032a:	fa25 fa07 	lsr.w	sl, r5, r7
 800032e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000332:	fbba f8f9 	udiv	r8, sl, r9
 8000336:	fa20 f307 	lsr.w	r3, r0, r7
 800033a:	fb09 aa18 	mls	sl, r9, r8, sl
 800033e:	408d      	lsls	r5, r1
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	431d      	orrs	r5, r3
 8000346:	fa00 f301 	lsl.w	r3, r0, r1
 800034a:	fb08 f00e 	mul.w	r0, r8, lr
 800034e:	0c2c      	lsrs	r4, r5, #16
 8000350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000354:	42a0      	cmp	r0, r4
 8000356:	fa02 f201 	lsl.w	r2, r2, r1
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b8>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f108 3aff 	add.w	sl, r8, #4294967295
 8000364:	f080 8088 	bcs.w	8000478 <__udivmoddi4+0x2bc>
 8000368:	42a0      	cmp	r0, r4
 800036a:	f240 8085 	bls.w	8000478 <__udivmoddi4+0x2bc>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	4464      	add	r4, ip
 8000374:	1a24      	subs	r4, r4, r0
 8000376:	fbb4 f0f9 	udiv	r0, r4, r9
 800037a:	fb09 4410 	mls	r4, r9, r0, r4
 800037e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000382:	b2ad      	uxth	r5, r5
 8000384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1e2>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 35ff 	add.w	r5, r0, #4294967295
 8000394:	d26c      	bcs.n	8000470 <__udivmoddi4+0x2b4>
 8000396:	45a6      	cmp	lr, r4
 8000398:	d96a      	bls.n	8000470 <__udivmoddi4+0x2b4>
 800039a:	3802      	subs	r0, #2
 800039c:	4464      	add	r4, ip
 800039e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a2:	fba0 9502 	umull	r9, r5, r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	42ac      	cmp	r4, r5
 80003ac:	46c8      	mov	r8, r9
 80003ae:	46ae      	mov	lr, r5
 80003b0:	d356      	bcc.n	8000460 <__udivmoddi4+0x2a4>
 80003b2:	d053      	beq.n	800045c <__udivmoddi4+0x2a0>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2d0>
 80003b8:	ebb3 0208 	subs.w	r2, r3, r8
 80003bc:	eb64 040e 	sbc.w	r4, r4, lr
 80003c0:	fa22 f301 	lsr.w	r3, r2, r1
 80003c4:	fa04 f707 	lsl.w	r7, r4, r7
 80003c8:	431f      	orrs	r7, r3
 80003ca:	40cc      	lsrs	r4, r1
 80003cc:	e9c6 7400 	strd	r7, r4, [r6]
 80003d0:	2100      	movs	r1, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa8>
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	f1c2 0120 	rsb	r1, r2, #32
 80003dc:	fa25 f301 	lsr.w	r3, r5, r1
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa20 f101 	lsr.w	r1, r0, r1
 80003e8:	4095      	lsls	r5, r2
 80003ea:	430d      	orrs	r5, r1
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3311 	mls	r3, r7, r1, r3
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	0c28      	lsrs	r0, r5, #16
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	fb01 f30e 	mul.w	r3, r1, lr
 8000402:	4283      	cmp	r3, r0
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x260>
 800040a:	eb1c 0000 	adds.w	r0, ip, r0
 800040e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000412:	d22f      	bcs.n	8000474 <__udivmoddi4+0x2b8>
 8000414:	4283      	cmp	r3, r0
 8000416:	d92d      	bls.n	8000474 <__udivmoddi4+0x2b8>
 8000418:	3902      	subs	r1, #2
 800041a:	4460      	add	r0, ip
 800041c:	1ac0      	subs	r0, r0, r3
 800041e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000422:	fb07 0013 	mls	r0, r7, r3, r0
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800042c:	fb03 f00e 	mul.w	r0, r3, lr
 8000430:	42a8      	cmp	r0, r5
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x28a>
 8000434:	eb1c 0505 	adds.w	r5, ip, r5
 8000438:	f103 38ff 	add.w	r8, r3, #4294967295
 800043c:	d216      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800043e:	42a8      	cmp	r0, r5
 8000440:	d914      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000442:	3b02      	subs	r3, #2
 8000444:	4465      	add	r5, ip
 8000446:	1a28      	subs	r0, r5, r0
 8000448:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044c:	e738      	b.n	80002c0 <__udivmoddi4+0x104>
 800044e:	4631      	mov	r1, r6
 8000450:	4630      	mov	r0, r6
 8000452:	e707      	b.n	8000264 <__udivmoddi4+0xa8>
 8000454:	462f      	mov	r7, r5
 8000456:	e6e4      	b.n	8000222 <__udivmoddi4+0x66>
 8000458:	4618      	mov	r0, r3
 800045a:	e6f9      	b.n	8000250 <__udivmoddi4+0x94>
 800045c:	454b      	cmp	r3, r9
 800045e:	d2a9      	bcs.n	80003b4 <__udivmoddi4+0x1f8>
 8000460:	ebb9 0802 	subs.w	r8, r9, r2
 8000464:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000468:	3801      	subs	r0, #1
 800046a:	e7a3      	b.n	80003b4 <__udivmoddi4+0x1f8>
 800046c:	4643      	mov	r3, r8
 800046e:	e7ea      	b.n	8000446 <__udivmoddi4+0x28a>
 8000470:	4628      	mov	r0, r5
 8000472:	e794      	b.n	800039e <__udivmoddi4+0x1e2>
 8000474:	4641      	mov	r1, r8
 8000476:	e7d1      	b.n	800041c <__udivmoddi4+0x260>
 8000478:	46d0      	mov	r8, sl
 800047a:	e77b      	b.n	8000374 <__udivmoddi4+0x1b8>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	e747      	b.n	8000312 <__udivmoddi4+0x156>
 8000482:	3b02      	subs	r3, #2
 8000484:	4465      	add	r5, ip
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x12c>
 8000488:	4608      	mov	r0, r1
 800048a:	e706      	b.n	800029a <__udivmoddi4+0xde>
 800048c:	4631      	mov	r1, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa8>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <CC1200_Init>:
 * @param CS_Pin: GPIO pin
 * @param HSPI: SPI handler
 * @retval none
 */
void CC1200_Init(CC1200_t* SPI_Info, uint8_t* MISO_Data, GPIO_TypeDef* CS_Port, uint16_t CS_Pin, SPI_HandleTypeDef* HSPI)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
 800049a:	60f8      	str	r0, [r7, #12]
 800049c:	60b9      	str	r1, [r7, #8]
 800049e:	607a      	str	r2, [r7, #4]
 80004a0:	807b      	strh	r3, [r7, #2]
	SPI_Info -> MISO_Data = MISO_Data;
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	68ba      	ldr	r2, [r7, #8]
 80004a6:	601a      	str	r2, [r3, #0]
	SPI_Info -> CS_Port = CS_Port;
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	605a      	str	r2, [r3, #4]
	SPI_Info -> CS_Pin = CS_Pin;
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	887a      	ldrh	r2, [r7, #2]
 80004b2:	811a      	strh	r2, [r3, #8]
	SPI_Info -> HSPI = HSPI;
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	69ba      	ldr	r2, [r7, #24]
 80004b8:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	6858      	ldr	r0, [r3, #4]
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	891b      	ldrh	r3, [r3, #8]
 80004c2:	2201      	movs	r2, #1
 80004c4:	4619      	mov	r1, r3
 80004c6:	f001 f970 	bl	80017aa <HAL_GPIO_WritePin>
}
 80004ca:	bf00      	nop
 80004cc:	3710      	adds	r7, #16
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <CC1200_Configure>:
 * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
 * @param setting : structure with register addresses and associated values
 * @retval Success (0) or Error (1)
 */
uint8_t CC1200_Configure(CC1200_t* SPI_Info, RegisterSetting_t* Register_Setting, RegisterSetting_t* Extended_Register_Setting)
{
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b086      	sub	sp, #24
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	60f8      	str	r0, [r7, #12]
 80004da:	60b9      	str	r1, [r7, #8]
 80004dc:	607a      	str	r2, [r7, #4]
	uint8_t retval = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	75fb      	strb	r3, [r7, #23]

	CC1200_Command_Strobe(SPI_Info, CC1200_COMMAND_SRES); // reset the chip
 80004e2:	2130      	movs	r1, #48	; 0x30
 80004e4:	68f8      	ldr	r0, [r7, #12]
 80004e6:	f000 f988 	bl	80007fa <CC1200_Command_Strobe>

	uint8_t Address;
	uint8_t ConfigIndex = 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	757b      	strb	r3, [r7, #21]
	// configure standard registers
	for (Address = 0x00; Address < 0x2F; Address++)
 80004ee:	2300      	movs	r3, #0
 80004f0:	75bb      	strb	r3, [r7, #22]
 80004f2:	e028      	b.n	8000546 <CC1200_Configure+0x74>
	{
		// If at the next desired address to configure, then configure it
		if (Address == Register_Setting[ConfigIndex].Address)
 80004f4:	7d7b      	ldrb	r3, [r7, #21]
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	68ba      	ldr	r2, [r7, #8]
 80004fa:	4413      	add	r3, r2
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	7dba      	ldrb	r2, [r7, #22]
 8000500:	429a      	cmp	r2, r3
 8000502:	d11d      	bne.n	8000540 <CC1200_Configure+0x6e>
		{
			CC1200_Write_Single_Register(SPI_Info, Address, Register_Setting[ConfigIndex].Value);
 8000504:	7d7b      	ldrb	r3, [r7, #21]
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	68ba      	ldr	r2, [r7, #8]
 800050a:	4413      	add	r3, r2
 800050c:	785a      	ldrb	r2, [r3, #1]
 800050e:	7dbb      	ldrb	r3, [r7, #22]
 8000510:	4619      	mov	r1, r3
 8000512:	68f8      	ldr	r0, [r7, #12]
 8000514:	f000 f850 	bl	80005b8 <CC1200_Write_Single_Register>
			CC1200_Read_Single_Register(SPI_Info, Address);
 8000518:	7dbb      	ldrb	r3, [r7, #22]
 800051a:	4619      	mov	r1, r3
 800051c:	68f8      	ldr	r0, [r7, #12]
 800051e:	f000 f887 	bl	8000630 <CC1200_Read_Single_Register>
			if (*(SPI_Info->MISO_Data) != Register_Setting[ConfigIndex].Value)
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	781a      	ldrb	r2, [r3, #0]
 8000528:	7d7b      	ldrb	r3, [r7, #21]
 800052a:	005b      	lsls	r3, r3, #1
 800052c:	68b9      	ldr	r1, [r7, #8]
 800052e:	440b      	add	r3, r1
 8000530:	785b      	ldrb	r3, [r3, #1]
 8000532:	429a      	cmp	r2, r3
 8000534:	d001      	beq.n	800053a <CC1200_Configure+0x68>
			{
				retval = 1;
 8000536:	2301      	movs	r3, #1
 8000538:	75fb      	strb	r3, [r7, #23]
			}
			ConfigIndex++;
 800053a:	7d7b      	ldrb	r3, [r7, #21]
 800053c:	3301      	adds	r3, #1
 800053e:	757b      	strb	r3, [r7, #21]
	for (Address = 0x00; Address < 0x2F; Address++)
 8000540:	7dbb      	ldrb	r3, [r7, #22]
 8000542:	3301      	adds	r3, #1
 8000544:	75bb      	strb	r3, [r7, #22]
 8000546:	7dbb      	ldrb	r3, [r7, #22]
 8000548:	2b2e      	cmp	r3, #46	; 0x2e
 800054a:	d9d3      	bls.n	80004f4 <CC1200_Configure+0x22>
		}
	}

	ConfigIndex = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	757b      	strb	r3, [r7, #21]
	// configure extended registers
	for (Address = 0x00; Address <= 0xDA; Address++)
 8000550:	2300      	movs	r3, #0
 8000552:	75bb      	strb	r3, [r7, #22]
 8000554:	e028      	b.n	80005a8 <CC1200_Configure+0xd6>
	{
		// If at the next desired address to configure, then configure it
		if (Address == Extended_Register_Setting[ConfigIndex].Address)
 8000556:	7d7b      	ldrb	r3, [r7, #21]
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	4413      	add	r3, r2
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	7dba      	ldrb	r2, [r7, #22]
 8000562:	429a      	cmp	r2, r3
 8000564:	d11d      	bne.n	80005a2 <CC1200_Configure+0xd0>
		{
			CC1200_Write_Single_Extended_Register(SPI_Info, Address, Extended_Register_Setting[ConfigIndex].Value);
 8000566:	7d7b      	ldrb	r3, [r7, #21]
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	4413      	add	r3, r2
 800056e:	785a      	ldrb	r2, [r3, #1]
 8000570:	7dbb      	ldrb	r3, [r7, #22]
 8000572:	4619      	mov	r1, r3
 8000574:	68f8      	ldr	r0, [r7, #12]
 8000576:	f000 f89b 	bl	80006b0 <CC1200_Write_Single_Extended_Register>
			CC1200_Read_Single_Extended_Register(SPI_Info, Address);
 800057a:	7dbb      	ldrb	r3, [r7, #22]
 800057c:	4619      	mov	r1, r3
 800057e:	68f8      	ldr	r0, [r7, #12]
 8000580:	f000 f8e8 	bl	8000754 <CC1200_Read_Single_Extended_Register>
			if (*(SPI_Info->MISO_Data) != Extended_Register_Setting[ConfigIndex].Value)
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	781a      	ldrb	r2, [r3, #0]
 800058a:	7d7b      	ldrb	r3, [r7, #21]
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	6879      	ldr	r1, [r7, #4]
 8000590:	440b      	add	r3, r1
 8000592:	785b      	ldrb	r3, [r3, #1]
 8000594:	429a      	cmp	r2, r3
 8000596:	d001      	beq.n	800059c <CC1200_Configure+0xca>
			{
				retval = 1;
 8000598:	2301      	movs	r3, #1
 800059a:	75fb      	strb	r3, [r7, #23]
			}
			ConfigIndex++;
 800059c:	7d7b      	ldrb	r3, [r7, #21]
 800059e:	3301      	adds	r3, #1
 80005a0:	757b      	strb	r3, [r7, #21]
	for (Address = 0x00; Address <= 0xDA; Address++)
 80005a2:	7dbb      	ldrb	r3, [r7, #22]
 80005a4:	3301      	adds	r3, #1
 80005a6:	75bb      	strb	r3, [r7, #22]
 80005a8:	7dbb      	ldrb	r3, [r7, #22]
 80005aa:	2bda      	cmp	r3, #218	; 0xda
 80005ac:	d9d3      	bls.n	8000556 <CC1200_Configure+0x84>
		}
	}

	return(retval);
 80005ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3718      	adds	r7, #24
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <CC1200_Write_Single_Register>:
  * @param Register_Address : address of register
  * @param Register_Value : value to write to register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Write_Single_Register(CC1200_t* SPI_Info, uint8_t Register_Address, uint8_t Register_Value)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af02      	add	r7, sp, #8
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	460b      	mov	r3, r1
 80005c2:	70fb      	strb	r3, [r7, #3]
 80005c4:	4613      	mov	r3, r2
 80005c6:	70bb      	strb	r3, [r7, #2]
	uint8_t retval;
//	char Message[100];
//	uint16_t Message_Length;

	if (Register_Address < 0x2F)
 80005c8:	78fb      	ldrb	r3, [r7, #3]
 80005ca:	2b2e      	cmp	r3, #46	; 0x2e
 80005cc:	d829      	bhi.n	8000622 <CC1200_Write_Single_Register+0x6a>
	{
		uint8_t Header_Byte = 0x00 | Register_Address; // 0000 0000 | 0 0 A5 A4 A3 A2 A1 A0
 80005ce:	78fb      	ldrb	r3, [r7, #3]
 80005d0:	73bb      	strb	r3, [r7, #14]
		//uint8_t MOSI_Data[2] = {Header_Byte, Register_Value};

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	6858      	ldr	r0, [r3, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	891b      	ldrh	r3, [r3, #8]
 80005da:	2200      	movs	r2, #0
 80005dc:	4619      	mov	r1, r3
 80005de:	f001 f8e4 	bl	80017aa <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 2, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	68d8      	ldr	r0, [r3, #12]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	f107 010e 	add.w	r1, r7, #14
 80005ee:	2364      	movs	r3, #100	; 0x64
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2301      	movs	r3, #1
 80005f4:	f003 fbb5 	bl	8003d62 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Value, SPI_Info -> MISO_Data, 1, 100);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	68d8      	ldr	r0, [r3, #12]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	1cb9      	adds	r1, r7, #2
 8000602:	2364      	movs	r3, #100	; 0x64
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2301      	movs	r3, #1
 8000608:	f003 fbab 	bl	8003d62 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	6858      	ldr	r0, [r3, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	891b      	ldrh	r3, [r3, #8]
 8000614:	2201      	movs	r2, #1
 8000616:	4619      	mov	r1, r3
 8000618:	f001 f8c7 	bl	80017aa <HAL_GPIO_WritePin>

		retval = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	73fb      	strb	r3, [r7, #15]
 8000620:	e001      	b.n	8000626 <CC1200_Write_Single_Register+0x6e>
	}
	else
	{
		retval = 1;
 8000622:	2301      	movs	r3, #1
 8000624:	73fb      	strb	r3, [r7, #15]
	}

	return retval;
 8000626:	7bfb      	ldrb	r3, [r7, #15]
}
 8000628:	4618      	mov	r0, r3
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <CC1200_Read_Single_Register>:
  * 	B   = 0
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Read_Single_Register(CC1200_t* SPI_Info, uint8_t Register_Address)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af02      	add	r7, sp, #8
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	460b      	mov	r3, r1
 800063a:	70fb      	strb	r3, [r7, #3]
	uint8_t retval;
//	char Message[100];
//	uint16_t Message_Length;

	if (Register_Address < 0x2F)
 800063c:	78fb      	ldrb	r3, [r7, #3]
 800063e:	2b2e      	cmp	r3, #46	; 0x2e
 8000640:	d82f      	bhi.n	80006a2 <CC1200_Read_Single_Register+0x72>
	{
		uint8_t Header_Byte = 0x80 | Register_Address; // 1000 0000 | 0 0 A5 A4 A3 A2 A1 A0
 8000642:	78fb      	ldrb	r3, [r7, #3]
 8000644:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000648:	b2db      	uxtb	r3, r3
 800064a:	73bb      	strb	r3, [r7, #14]
		uint8_t Placeholder = 0x00;
 800064c:	2300      	movs	r3, #0
 800064e:	737b      	strb	r3, [r7, #13]
		//uint8_t MOSI_Data[2] = {Header_Byte, Placeholder};

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	6858      	ldr	r0, [r3, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	891b      	ldrh	r3, [r3, #8]
 8000658:	2200      	movs	r2, #0
 800065a:	4619      	mov	r1, r3
 800065c:	f001 f8a5 	bl	80017aa <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 2, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	68d8      	ldr	r0, [r3, #12]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	f107 010e 	add.w	r1, r7, #14
 800066c:	2364      	movs	r3, #100	; 0x64
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2301      	movs	r3, #1
 8000672:	f003 fb76 	bl	8003d62 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	68d8      	ldr	r0, [r3, #12]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	f107 010d 	add.w	r1, r7, #13
 8000682:	2364      	movs	r3, #100	; 0x64
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	2301      	movs	r3, #1
 8000688:	f003 fb6b 	bl	8003d62 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	6858      	ldr	r0, [r3, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	891b      	ldrh	r3, [r3, #8]
 8000694:	2201      	movs	r2, #1
 8000696:	4619      	mov	r1, r3
 8000698:	f001 f887 	bl	80017aa <HAL_GPIO_WritePin>

		retval = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	73fb      	strb	r3, [r7, #15]
 80006a0:	e001      	b.n	80006a6 <CC1200_Read_Single_Register+0x76>
	}
	else
	{
		retval = 1;
 80006a2:	2301      	movs	r3, #1
 80006a4:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <CC1200_Write_Single_Extended_Register>:
  * @param Register_Address : address of register
  * @param Register_Value : value to write to register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Write_Single_Extended_Register(CC1200_t* SPI_Info, uint8_t Register_Address, uint8_t Register_Value)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af02      	add	r7, sp, #8
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	70fb      	strb	r3, [r7, #3]
 80006bc:	4613      	mov	r3, r2
 80006be:	70bb      	strb	r3, [r7, #2]
	uint8_t retval;
//	char Message[100];
//	uint16_t Message_Length;

	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 80006c0:	78fb      	ldrb	r3, [r7, #3]
 80006c2:	2b39      	cmp	r3, #57	; 0x39
 80006c4:	d902      	bls.n	80006cc <CC1200_Write_Single_Extended_Register+0x1c>
 80006c6:	78fb      	ldrb	r3, [r7, #3]
 80006c8:	2b63      	cmp	r3, #99	; 0x63
 80006ca:	d908      	bls.n	80006de <CC1200_Write_Single_Extended_Register+0x2e>
 80006cc:	78fb      	ldrb	r3, [r7, #3]
 80006ce:	2ba2      	cmp	r3, #162	; 0xa2
 80006d0:	d902      	bls.n	80006d8 <CC1200_Write_Single_Extended_Register+0x28>
 80006d2:	78fb      	ldrb	r3, [r7, #3]
 80006d4:	2bd1      	cmp	r3, #209	; 0xd1
 80006d6:	d902      	bls.n	80006de <CC1200_Write_Single_Extended_Register+0x2e>
			(Register_Address >= 0xDB))
 80006d8:	78fb      	ldrb	r3, [r7, #3]
	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 80006da:	2bda      	cmp	r3, #218	; 0xda
 80006dc:	d902      	bls.n	80006e4 <CC1200_Write_Single_Extended_Register+0x34>
	{
		retval = 1;
 80006de:	2301      	movs	r3, #1
 80006e0:	73fb      	strb	r3, [r7, #15]
 80006e2:	e032      	b.n	800074a <CC1200_Write_Single_Extended_Register+0x9a>
	}
	else
	{
		uint8_t Header_Byte = 0x00 | 0x2F; // 0000 0000 | 0 0 1 0 1 1 1 1
 80006e4:	232f      	movs	r3, #47	; 0x2f
 80006e6:	73bb      	strb	r3, [r7, #14]
		//uint8_t MOSI_Data[3] = {Header_Byte, Register_Address, Register_Value};

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6858      	ldr	r0, [r3, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	891b      	ldrh	r3, [r3, #8]
 80006f0:	2200      	movs	r2, #0
 80006f2:	4619      	mov	r1, r3
 80006f4:	f001 f859 	bl	80017aa <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 3, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	68d8      	ldr	r0, [r3, #12]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	f107 010e 	add.w	r1, r7, #14
 8000704:	2364      	movs	r3, #100	; 0x64
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2301      	movs	r3, #1
 800070a:	f003 fb2a 	bl	8003d62 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Address, SPI_Info -> MISO_Data, 1, 100);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	68d8      	ldr	r0, [r3, #12]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	1cf9      	adds	r1, r7, #3
 8000718:	2364      	movs	r3, #100	; 0x64
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	2301      	movs	r3, #1
 800071e:	f003 fb20 	bl	8003d62 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Value, SPI_Info -> MISO_Data, 1, 100);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	68d8      	ldr	r0, [r3, #12]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	1cb9      	adds	r1, r7, #2
 800072c:	2364      	movs	r3, #100	; 0x64
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	2301      	movs	r3, #1
 8000732:	f003 fb16 	bl	8003d62 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6858      	ldr	r0, [r3, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	891b      	ldrh	r3, [r3, #8]
 800073e:	2201      	movs	r2, #1
 8000740:	4619      	mov	r1, r3
 8000742:	f001 f832 	bl	80017aa <HAL_GPIO_WritePin>

		retval = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 800074a:	7bfb      	ldrb	r3, [r7, #15]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <CC1200_Read_Single_Extended_Register>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Read_Single_Extended_Register(CC1200_t* SPI_Info, uint8_t Register_Address)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af02      	add	r7, sp, #8
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	70fb      	strb	r3, [r7, #3]
	uint8_t retval;
//	char Message[100];
//	uint16_t Message_Length;

	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 8000760:	78fb      	ldrb	r3, [r7, #3]
 8000762:	2b39      	cmp	r3, #57	; 0x39
 8000764:	d902      	bls.n	800076c <CC1200_Read_Single_Extended_Register+0x18>
 8000766:	78fb      	ldrb	r3, [r7, #3]
 8000768:	2b63      	cmp	r3, #99	; 0x63
 800076a:	d908      	bls.n	800077e <CC1200_Read_Single_Extended_Register+0x2a>
 800076c:	78fb      	ldrb	r3, [r7, #3]
 800076e:	2ba2      	cmp	r3, #162	; 0xa2
 8000770:	d902      	bls.n	8000778 <CC1200_Read_Single_Extended_Register+0x24>
 8000772:	78fb      	ldrb	r3, [r7, #3]
 8000774:	2bd1      	cmp	r3, #209	; 0xd1
 8000776:	d902      	bls.n	800077e <CC1200_Read_Single_Extended_Register+0x2a>
				(Register_Address >= 0xDB))
 8000778:	78fb      	ldrb	r3, [r7, #3]
	if ((Register_Address >= 0x3A && Register_Address <= 0x63) || (Register_Address >= 0xA3 && Register_Address <= 0xD1) ||
 800077a:	2bda      	cmp	r3, #218	; 0xda
 800077c:	d902      	bls.n	8000784 <CC1200_Read_Single_Extended_Register+0x30>
	{
		retval = 1;
 800077e:	2301      	movs	r3, #1
 8000780:	73fb      	strb	r3, [r7, #15]
 8000782:	e035      	b.n	80007f0 <CC1200_Read_Single_Extended_Register+0x9c>
	}
	else
	{
		uint8_t Header_Byte = 0x80 | 0x2F; // 1000 0000 | 0 0 1 0 1 1 1 1
 8000784:	23af      	movs	r3, #175	; 0xaf
 8000786:	73bb      	strb	r3, [r7, #14]
		uint8_t Placeholder = 0x00;
 8000788:	2300      	movs	r3, #0
 800078a:	737b      	strb	r3, [r7, #13]
		//uint8_t MOSI_Data[3] = {Header_Byte, Register_Address, Placeholder};
		//(SPI_Info -> MOSI_Data)[0] = MOSI_Data[0];
		//(SPI_Info -> MOSI_Data)[1] = MOSI_Data[1];
		//(SPI_Info -> MOSI_Data)[2] = MOSI_Data[2];

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	6858      	ldr	r0, [r3, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	891b      	ldrh	r3, [r3, #8]
 8000794:	2200      	movs	r2, #0
 8000796:	4619      	mov	r1, r3
 8000798:	f001 f807 	bl	80017aa <HAL_GPIO_WritePin>

		//HAL_SPI_TransmitReceive(SPI_Info -> HSPI, MOSI_Data, SPI_Info -> MISO_Data, 3, HAL_MAX_DELAY);

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	68d8      	ldr	r0, [r3, #12]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	f107 010e 	add.w	r1, r7, #14
 80007a8:	2364      	movs	r3, #100	; 0x64
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	2301      	movs	r3, #1
 80007ae:	f003 fad8 	bl	8003d62 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Register_Address, SPI_Info -> MISO_Data, 1, 100);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	68d8      	ldr	r0, [r3, #12]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	1cf9      	adds	r1, r7, #3
 80007bc:	2364      	movs	r3, #100	; 0x64
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	2301      	movs	r3, #1
 80007c2:	f003 face 	bl	8003d62 <HAL_SPI_TransmitReceive>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	68d8      	ldr	r0, [r3, #12]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	f107 010d 	add.w	r1, r7, #13
 80007d2:	2364      	movs	r3, #100	; 0x64
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	2301      	movs	r3, #1
 80007d8:	f003 fac3 	bl	8003d62 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6858      	ldr	r0, [r3, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	891b      	ldrh	r3, [r3, #8]
 80007e4:	2201      	movs	r2, #1
 80007e6:	4619      	mov	r1, r3
 80007e8:	f000 ffdf 	bl	80017aa <HAL_GPIO_WritePin>

		retval = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <CC1200_Command_Strobe>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Command_Strobe(CC1200_t* SPI_Info, uint8_t Register_Address)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b086      	sub	sp, #24
 80007fe:	af02      	add	r7, sp, #8
 8000800:	6078      	str	r0, [r7, #4]
 8000802:	460b      	mov	r3, r1
 8000804:	70fb      	strb	r3, [r7, #3]
	uint8_t retval;
	//char Message[100];
	//uint16_t Message_Length;

	if ((Register_Address >= 0x30) && (Register_Address <= 0x3D))
 8000806:	78fb      	ldrb	r3, [r7, #3]
 8000808:	2b2f      	cmp	r3, #47	; 0x2f
 800080a:	d922      	bls.n	8000852 <CC1200_Command_Strobe+0x58>
 800080c:	78fb      	ldrb	r3, [r7, #3]
 800080e:	2b3d      	cmp	r3, #61	; 0x3d
 8000810:	d81f      	bhi.n	8000852 <CC1200_Command_Strobe+0x58>
	{
		uint8_t Header_Byte = 0x00 | Register_Address; // 0000 0000 | 0 0 A5 A4 A3 A2 A1 A0
 8000812:	78fb      	ldrb	r3, [r7, #3]
 8000814:	73bb      	strb	r3, [r7, #14]
		//SPI_Info -> MOSI_Data = &Header_Byte;

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6858      	ldr	r0, [r3, #4]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	891b      	ldrh	r3, [r3, #8]
 800081e:	2200      	movs	r2, #0
 8000820:	4619      	mov	r1, r3
 8000822:	f000 ffc2 	bl	80017aa <HAL_GPIO_WritePin>

		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	68d8      	ldr	r0, [r3, #12]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	f107 010e 	add.w	r1, r7, #14
 8000832:	2364      	movs	r3, #100	; 0x64
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	2301      	movs	r3, #1
 8000838:	f003 fa93 	bl	8003d62 <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6858      	ldr	r0, [r3, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	891b      	ldrh	r3, [r3, #8]
 8000844:	2201      	movs	r2, #1
 8000846:	4619      	mov	r1, r3
 8000848:	f000 ffaf 	bl	80017aa <HAL_GPIO_WritePin>

		retval = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	73fb      	strb	r3, [r7, #15]
	{
 8000850:	e001      	b.n	8000856 <CC1200_Command_Strobe+0x5c>
	}
	else
	{
		retval = 1;
 8000852:	2301      	movs	r3, #1
 8000854:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 8000856:	7bfb      	ldrb	r3, [r7, #15]
}
 8000858:	4618      	mov	r0, r3
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <CC1200_Transmit>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Transmit(CC1200_t* SPI_Info, uint8_t* TX_Packet, uint8_t TX_Packet_Length)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af02      	add	r7, sp, #8
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	4613      	mov	r3, r2
 800086c:	71fb      	strb	r3, [r7, #7]
	uint8_t Header_Byte = 0x40 | 0x3F; // 0100 0000 | 0011 1111
 800086e:	237f      	movs	r3, #127	; 0x7f
 8000870:	75bb      	strb	r3, [r7, #22]
	uint8_t i; // counter
	//uint8_t Status; // status byte

	CC1200_Command_Strobe(SPI_Info, CC1200_COMMAND_SFTX); // flush TX FIFO (before loading data)
 8000872:	213b      	movs	r1, #59	; 0x3b
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff ffc0 	bl	80007fa <CC1200_Command_Strobe>

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	6858      	ldr	r0, [r3, #4]
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	891b      	ldrh	r3, [r3, #8]
 8000882:	2200      	movs	r2, #0
 8000884:	4619      	mov	r1, r3
 8000886:	f000 ff90 	bl	80017aa <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	68d8      	ldr	r0, [r3, #12]
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	f107 0116 	add.w	r1, r7, #22
 8000896:	2364      	movs	r3, #100	; 0x64
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	2301      	movs	r3, #1
 800089c:	f003 fa61 	bl	8003d62 <HAL_SPI_TransmitReceive>

	HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &TX_Packet_Length, SPI_Info -> MISO_Data, 1, 100);
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	68d8      	ldr	r0, [r3, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	1df9      	adds	r1, r7, #7
 80008aa:	2364      	movs	r3, #100	; 0x64
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	2301      	movs	r3, #1
 80008b0:	f003 fa57 	bl	8003d62 <HAL_SPI_TransmitReceive>

	for(i = 0; i < TX_Packet_Length; i++)
 80008b4:	2300      	movs	r3, #0
 80008b6:	75fb      	strb	r3, [r7, #23]
 80008b8:	e00e      	b.n	80008d8 <CC1200_Transmit+0x78>
	{
		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &(TX_Packet[i]), SPI_Info -> MISO_Data, 1, 100);
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	68d8      	ldr	r0, [r3, #12]
 80008be:	7dfb      	ldrb	r3, [r7, #23]
 80008c0:	68ba      	ldr	r2, [r7, #8]
 80008c2:	18d1      	adds	r1, r2, r3
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	2364      	movs	r3, #100	; 0x64
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2301      	movs	r3, #1
 80008ce:	f003 fa48 	bl	8003d62 <HAL_SPI_TransmitReceive>
	for(i = 0; i < TX_Packet_Length; i++)
 80008d2:	7dfb      	ldrb	r3, [r7, #23]
 80008d4:	3301      	adds	r3, #1
 80008d6:	75fb      	strb	r3, [r7, #23]
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	7dfa      	ldrb	r2, [r7, #23]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d3ec      	bcc.n	80008ba <CC1200_Transmit+0x5a>
	}

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	6858      	ldr	r0, [r3, #4]
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	891b      	ldrh	r3, [r3, #8]
 80008e8:	2201      	movs	r2, #1
 80008ea:	4619      	mov	r1, r3
 80008ec:	f000 ff5d 	bl	80017aa <HAL_GPIO_WritePin>

	CC1200_Command_Strobe(SPI_Info, CC1200_COMMAND_STX); // enable TX
 80008f0:	2135      	movs	r1, #53	; 0x35
 80008f2:	68f8      	ldr	r0, [r7, #12]
 80008f4:	f7ff ff81 	bl	80007fa <CC1200_Command_Strobe>

	return 0;
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <CC1200_Receive>:
  * @param SPI_Info : structure with MOSI/MISO data, CS Port/Pin, SPI handler
  * @param Register_Address : address of register
  * @retval Success (0) or Error (1)
  */
uint8_t CC1200_Receive(CC1200_t* SPI_Info, uint8_t* RX_Packet, uint8_t* RX_Packet_Length)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b088      	sub	sp, #32
 8000906:	af02      	add	r7, sp, #8
 8000908:	60f8      	str	r0, [r7, #12]
 800090a:	60b9      	str	r1, [r7, #8]
 800090c:	607a      	str	r2, [r7, #4]
	uint8_t Header_Byte = 0xC0 | 0x3F; // 1100 0000 | 0011 1111
 800090e:	23ff      	movs	r3, #255	; 0xff
 8000910:	757b      	strb	r3, [r7, #21]
	uint8_t Placeholder = 0x00;
 8000912:	2300      	movs	r3, #0
 8000914:	753b      	strb	r3, [r7, #20]
	uint8_t Packet_Length;
	uint8_t i; // counter

	CC1200_Command_Strobe(SPI_Info, CC1200_COMMAND_SFRX); // flush RX FIFO (before initiating receive)
 8000916:	213a      	movs	r1, #58	; 0x3a
 8000918:	68f8      	ldr	r0, [r7, #12]
 800091a:	f7ff ff6e 	bl	80007fa <CC1200_Command_Strobe>

	CC1200_Command_Strobe(SPI_Info, CC1200_COMMAND_SRX); // enable RX
 800091e:	2134      	movs	r1, #52	; 0x34
 8000920:	68f8      	ldr	r0, [r7, #12]
 8000922:	f7ff ff6a 	bl	80007fa <CC1200_Command_Strobe>

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_RESET);
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	6858      	ldr	r0, [r3, #4]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	891b      	ldrh	r3, [r3, #8]
 800092e:	2200      	movs	r2, #0
 8000930:	4619      	mov	r1, r3
 8000932:	f000 ff3a 	bl	80017aa <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Header_Byte, SPI_Info -> MISO_Data, 1, 100);
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	68d8      	ldr	r0, [r3, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	f107 0115 	add.w	r1, r7, #21
 8000942:	2364      	movs	r3, #100	; 0x64
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	2301      	movs	r3, #1
 8000948:	f003 fa0b 	bl	8003d62 <HAL_SPI_TransmitReceive>

	HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	68d8      	ldr	r0, [r3, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	f107 0114 	add.w	r1, r7, #20
 8000958:	2364      	movs	r3, #100	; 0x64
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2301      	movs	r3, #1
 800095e:	f003 fa00 	bl	8003d62 <HAL_SPI_TransmitReceive>
	Packet_Length = (SPI_Info->MISO_Data) [0];
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	75bb      	strb	r3, [r7, #22]
	*RX_Packet_Length = Packet_Length;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	7dba      	ldrb	r2, [r7, #22]
 800096e:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < Packet_Length; i++)
 8000970:	2300      	movs	r3, #0
 8000972:	75fb      	strb	r3, [r7, #23]
 8000974:	e014      	b.n	80009a0 <CC1200_Receive+0x9e>
	{
		HAL_SPI_TransmitReceive(SPI_Info -> HSPI, &Placeholder, SPI_Info -> MISO_Data, 1, 100);
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	68d8      	ldr	r0, [r3, #12]
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	f107 0114 	add.w	r1, r7, #20
 8000982:	2364      	movs	r3, #100	; 0x64
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	2301      	movs	r3, #1
 8000988:	f003 f9eb 	bl	8003d62 <HAL_SPI_TransmitReceive>
		RX_Packet[i] = (SPI_Info->MISO_Data) [0];
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	7dfb      	ldrb	r3, [r7, #23]
 8000992:	68b9      	ldr	r1, [r7, #8]
 8000994:	440b      	add	r3, r1
 8000996:	7812      	ldrb	r2, [r2, #0]
 8000998:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < Packet_Length; i++)
 800099a:	7dfb      	ldrb	r3, [r7, #23]
 800099c:	3301      	adds	r3, #1
 800099e:	75fb      	strb	r3, [r7, #23]
 80009a0:	7dfa      	ldrb	r2, [r7, #23]
 80009a2:	7dbb      	ldrb	r3, [r7, #22]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d3e6      	bcc.n	8000976 <CC1200_Receive+0x74>
	}

	RX_Packet[Packet_Length] = '\0'; // null termination
 80009a8:	7dbb      	ldrb	r3, [r7, #22]
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	4413      	add	r3, r2
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(SPI_Info -> CS_Port, SPI_Info -> CS_Pin, GPIO_PIN_SET);
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	6858      	ldr	r0, [r3, #4]
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	891b      	ldrh	r3, [r3, #8]
 80009ba:	2201      	movs	r2, #1
 80009bc:	4619      	mov	r1, r3
 80009be:	f000 fef4 	bl	80017aa <HAL_GPIO_WritePin>

	return 0;
 80009c2:	2300      	movs	r3, #0
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	80fb      	strh	r3, [r7, #6]
	//RXTransmit function
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr

080009e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b09a      	sub	sp, #104	; 0x68
 80009e4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009e6:	f000 fb9a 	bl	800111e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80009ea:	f000 f897 	bl	8000b1c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80009ee:	f000 f941 	bl	8000c74 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80009f2:	f000 f915 	bl	8000c20 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 80009f6:	f000 f8dd 	bl	8000bb4 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 80009fa:	f007 fde7 	bl	80085cc <MX_USB_DEVICE_Init>
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // start with chip select high
	uint8_t state;
	//uint8_t MOSI_Data[1];
	char Message[100];
	uint16_t Message_Length;
	uint8_t flag = 1;
 80009fe:	2301      	movs	r3, #1
 8000a00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
//		CDC_Transmit_FS((uint8_t*) Message, (Message_Length));
//		HAL_Delay(1000); // delay 1 sec

//		// verify SO goes low
//		MOSI_Data[0] = 0x3D; // no operation command
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // set chip select high
 8000a04:	2201      	movs	r2, #1
 8000a06:	2140      	movs	r1, #64	; 0x40
 8000a08:	483e      	ldr	r0, [pc, #248]	; (8000b04 <main+0x124>)
 8000a0a:	f000 fece 	bl	80017aa <HAL_GPIO_WritePin>
		HAL_Delay(10); // delay
 8000a0e:	200a      	movs	r0, #10
 8000a10:	f000 fbf4 	bl	80011fc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // set chip select low
 8000a14:	2200      	movs	r2, #0
 8000a16:	2140      	movs	r1, #64	; 0x40
 8000a18:	483a      	ldr	r0, [pc, #232]	; (8000b04 <main+0x124>)
 8000a1a:	f000 fec6 	bl	80017aa <HAL_GPIO_WritePin>
		while(flag)
 8000a1e:	e06b      	b.n	8000af8 <main+0x118>
		{
			state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6); // read MISO pin
 8000a20:	2140      	movs	r1, #64	; 0x40
 8000a22:	4839      	ldr	r0, [pc, #228]	; (8000b08 <main+0x128>)
 8000a24:	f000 feaa 	bl	800177c <HAL_GPIO_ReadPin>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
			if (state == 0) // if MISO pin is low, the crystal oscillator is stable
 8000a2e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d115      	bne.n	8000a62 <main+0x82>
			{
				flag = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				Message_Length = sprintf(Message, "Chip Ready\r\n");
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	4933      	ldr	r1, [pc, #204]	; (8000b0c <main+0x12c>)
 8000a40:	4618      	mov	r0, r3
 8000a42:	f009 f89d 	bl	8009b80 <siprintf>
 8000a46:	4603      	mov	r3, r0
 8000a48:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
				CDC_Transmit_FS((uint8_t*) Message, (Message_Length));
 8000a4c:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8000a50:	463b      	mov	r3, r7
 8000a52:	4611      	mov	r1, r2
 8000a54:	4618      	mov	r0, r3
 8000a56:	f007 febb 	bl	80087d0 <CDC_Transmit_FS>
				HAL_Delay(100);
 8000a5a:	2064      	movs	r0, #100	; 0x64
 8000a5c:	f000 fbce 	bl	80011fc <HAL_Delay>
 8000a60:	e04a      	b.n	8000af8 <main+0x118>
			}
			else // otherwise, the crystal oscillator is not stable
			{
				flag = 1;
 8000a62:	2301      	movs	r3, #1
 8000a64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6); // read CS pin
 8000a68:	2140      	movs	r1, #64	; 0x40
 8000a6a:	4826      	ldr	r0, [pc, #152]	; (8000b04 <main+0x124>)
 8000a6c:	f000 fe86 	bl	800177c <HAL_GPIO_ReadPin>
 8000a70:	4603      	mov	r3, r0
 8000a72:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
				if (state == 0)
 8000a76:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d112      	bne.n	8000aa4 <main+0xc4>
				{
					Message_Length = sprintf(Message, "Chip Select Low\r\n");
 8000a7e:	463b      	mov	r3, r7
 8000a80:	4923      	ldr	r1, [pc, #140]	; (8000b10 <main+0x130>)
 8000a82:	4618      	mov	r0, r3
 8000a84:	f009 f87c 	bl	8009b80 <siprintf>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
					CDC_Transmit_FS((uint8_t*) Message, (Message_Length));
 8000a8e:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8000a92:	463b      	mov	r3, r7
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f007 fe9a 	bl	80087d0 <CDC_Transmit_FS>
					HAL_Delay(100);
 8000a9c:	2064      	movs	r0, #100	; 0x64
 8000a9e:	f000 fbad 	bl	80011fc <HAL_Delay>
 8000aa2:	e011      	b.n	8000ac8 <main+0xe8>
				}
				else
				{
					Message_Length = sprintf(Message, "Chip Select High\r\n");
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	491b      	ldr	r1, [pc, #108]	; (8000b14 <main+0x134>)
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f009 f869 	bl	8009b80 <siprintf>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
					CDC_Transmit_FS((uint8_t*) Message, (Message_Length));
 8000ab4:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8000ab8:	463b      	mov	r3, r7
 8000aba:	4611      	mov	r1, r2
 8000abc:	4618      	mov	r0, r3
 8000abe:	f007 fe87 	bl	80087d0 <CDC_Transmit_FS>
					HAL_Delay(100);
 8000ac2:	2064      	movs	r0, #100	; 0x64
 8000ac4:	f000 fb9a 	bl	80011fc <HAL_Delay>
				}
				Message_Length = sprintf(Message, "Chip Not Ready\r\n");
 8000ac8:	463b      	mov	r3, r7
 8000aca:	4913      	ldr	r1, [pc, #76]	; (8000b18 <main+0x138>)
 8000acc:	4618      	mov	r0, r3
 8000ace:	f009 f857 	bl	8009b80 <siprintf>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
				CDC_Transmit_FS((uint8_t*) Message, (Message_Length));
 8000ad8:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8000adc:	463b      	mov	r3, r7
 8000ade:	4611      	mov	r1, r2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f007 fe75 	bl	80087d0 <CDC_Transmit_FS>
				HAL_Delay(1000);
 8000ae6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aea:	f000 fb87 	bl	80011fc <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // set MISO low
 8000aee:	2200      	movs	r2, #0
 8000af0:	2140      	movs	r1, #64	; 0x40
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <main+0x128>)
 8000af4:	f000 fe59 	bl	80017aa <HAL_GPIO_WritePin>
		while(flag)
 8000af8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d18f      	bne.n	8000a20 <main+0x40>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // set chip select high
 8000b00:	e780      	b.n	8000a04 <main+0x24>
 8000b02:	bf00      	nop
 8000b04:	40020400 	.word	0x40020400
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	0800b120 	.word	0x0800b120
 8000b10:	0800b130 	.word	0x0800b130
 8000b14:	0800b144 	.word	0x0800b144
 8000b18:	0800b158 	.word	0x0800b158

08000b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b092      	sub	sp, #72	; 0x48
 8000b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	2234      	movs	r2, #52	; 0x34
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f009 f820 	bl	8009b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b30:	463b      	mov	r3, r7
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <SystemClock_Config+0x94>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000b46:	4a1a      	ldr	r2, [pc, #104]	; (8000bb0 <SystemClock_Config+0x94>)
 8000b48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b4c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b52:	2305      	movs	r3, #5
 8000b54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b56:	2302      	movs	r3, #2
 8000b58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000b60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b64:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000b66:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000b6a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4618      	mov	r0, r3
 8000b72:	f002 fa77 	bl	8003064 <HAL_RCC_OscConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000b7c:	f000 f8e8 	bl	8000d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b80:	230f      	movs	r3, #15
 8000b82:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b84:	2303      	movs	r3, #3
 8000b86:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b94:	463b      	mov	r3, r7
 8000b96:	2101      	movs	r1, #1
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f002 fd93 	bl	80036c4 <HAL_RCC_ClockConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000ba4:	f000 f8d4 	bl	8000d50 <Error_Handler>
  }
}
 8000ba8:	bf00      	nop
 8000baa:	3748      	adds	r7, #72	; 0x48
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40007000 	.word	0x40007000

08000bb4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bba:	4a18      	ldr	r2, [pc, #96]	; (8000c1c <MX_SPI1_Init+0x68>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000be8:	2210      	movs	r2, #16
 8000bea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000c00:	220a      	movs	r2, #10
 8000c02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000c06:	f003 f823 	bl	8003c50 <HAL_SPI_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c10:	f000 f89e 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000360 	.word	0x20000360
 8000c1c:	40013000 	.word	0x40013000

08000c20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <MX_USART2_UART_Init+0x50>)
 8000c28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c58:	f003 faf0 	bl	800423c <HAL_UART_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c62:	f000 f875 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200003b8 	.word	0x200003b8
 8000c70:	40004400 	.word	0x40004400

08000c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	; 0x28
 8000c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8a:	4b2e      	ldr	r3, [pc, #184]	; (8000d44 <MX_GPIO_Init+0xd0>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	4a2d      	ldr	r2, [pc, #180]	; (8000d44 <MX_GPIO_Init+0xd0>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	61d3      	str	r3, [r2, #28]
 8000c96:	4b2b      	ldr	r3, [pc, #172]	; (8000d44 <MX_GPIO_Init+0xd0>)
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	f003 0304 	and.w	r3, r3, #4
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca2:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <MX_GPIO_Init+0xd0>)
 8000ca4:	69db      	ldr	r3, [r3, #28]
 8000ca6:	4a27      	ldr	r2, [pc, #156]	; (8000d44 <MX_GPIO_Init+0xd0>)
 8000ca8:	f043 0320 	orr.w	r3, r3, #32
 8000cac:	61d3      	str	r3, [r2, #28]
 8000cae:	4b25      	ldr	r3, [pc, #148]	; (8000d44 <MX_GPIO_Init+0xd0>)
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	f003 0320 	and.w	r3, r3, #32
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b22      	ldr	r3, [pc, #136]	; (8000d44 <MX_GPIO_Init+0xd0>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	4a21      	ldr	r2, [pc, #132]	; (8000d44 <MX_GPIO_Init+0xd0>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	61d3      	str	r3, [r2, #28]
 8000cc6:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <MX_GPIO_Init+0xd0>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <MX_GPIO_Init+0xd0>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	4a1b      	ldr	r2, [pc, #108]	; (8000d44 <MX_GPIO_Init+0xd0>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	61d3      	str	r3, [r2, #28]
 8000cde:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <MX_GPIO_Init+0xd0>)
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2140      	movs	r1, #64	; 0x40
 8000cee:	4816      	ldr	r0, [pc, #88]	; (8000d48 <MX_GPIO_Init+0xd4>)
 8000cf0:	f000 fd5b 	bl	80017aa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PC12 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_12;
 8000cf4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cfa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4810      	ldr	r0, [pc, #64]	; (8000d4c <MX_GPIO_Init+0xd8>)
 8000d0c:	f000 fba6 	bl	800145c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d10:	2340      	movs	r3, #64	; 0x40
 8000d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	4808      	ldr	r0, [pc, #32]	; (8000d48 <MX_GPIO_Init+0xd4>)
 8000d28:	f000 fb98 	bl	800145c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2100      	movs	r1, #0
 8000d30:	2028      	movs	r0, #40	; 0x28
 8000d32:	f000 fb5c 	bl	80013ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d36:	2028      	movs	r0, #40	; 0x28
 8000d38:	f000 fb75 	bl	8001426 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d3c:	bf00      	nop
 8000d3e:	3728      	adds	r7, #40	; 0x28
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020400 	.word	0x40020400
 8000d4c:	40020800 	.word	0x40020800

08000d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d54:	b672      	cpsid	i
}
 8000d56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d58:	e7fe      	b.n	8000d58 <Error_Handler+0x8>
	...

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <HAL_MspInit+0x5c>)
 8000d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d66:	4a14      	ldr	r2, [pc, #80]	; (8000db8 <HAL_MspInit+0x5c>)
 8000d68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d6c:	6253      	str	r3, [r2, #36]	; 0x24
 8000d6e:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_MspInit+0x5c>)
 8000d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <HAL_MspInit+0x5c>)
 8000d7c:	6a1b      	ldr	r3, [r3, #32]
 8000d7e:	4a0e      	ldr	r2, [pc, #56]	; (8000db8 <HAL_MspInit+0x5c>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6213      	str	r3, [r2, #32]
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <HAL_MspInit+0x5c>)
 8000d88:	6a1b      	ldr	r3, [r3, #32]
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <HAL_MspInit+0x5c>)
 8000d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d96:	4a08      	ldr	r2, [pc, #32]	; (8000db8 <HAL_MspInit+0x5c>)
 8000d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	6253      	str	r3, [r2, #36]	; 0x24
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_MspInit+0x5c>)
 8000da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000daa:	2007      	movs	r0, #7
 8000dac:	f000 fb14 	bl	80013d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db0:	bf00      	nop
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40023800 	.word	0x40023800

08000dbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a17      	ldr	r2, [pc, #92]	; (8000e38 <HAL_SPI_MspInit+0x7c>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d127      	bne.n	8000e2e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dde:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <HAL_SPI_MspInit+0x80>)
 8000de0:	6a1b      	ldr	r3, [r3, #32]
 8000de2:	4a16      	ldr	r2, [pc, #88]	; (8000e3c <HAL_SPI_MspInit+0x80>)
 8000de4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000de8:	6213      	str	r3, [r2, #32]
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <HAL_SPI_MspInit+0x80>)
 8000dec:	6a1b      	ldr	r3, [r3, #32]
 8000dee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <HAL_SPI_MspInit+0x80>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	4a10      	ldr	r2, [pc, #64]	; (8000e3c <HAL_SPI_MspInit+0x80>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	61d3      	str	r3, [r2, #28]
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_SPI_MspInit+0x80>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e0e:	23e0      	movs	r3, #224	; 0xe0
 8000e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e1e:	2305      	movs	r3, #5
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	4805      	ldr	r0, [pc, #20]	; (8000e40 <HAL_SPI_MspInit+0x84>)
 8000e2a:	f000 fb17 	bl	800145c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e2e:	bf00      	nop
 8000e30:	3728      	adds	r7, #40	; 0x28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40013000 	.word	0x40013000
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020000 	.word	0x40020000

08000e44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a17      	ldr	r2, [pc, #92]	; (8000ec0 <HAL_UART_MspInit+0x7c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d127      	bne.n	8000eb6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e66:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <HAL_UART_MspInit+0x80>)
 8000e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6a:	4a16      	ldr	r2, [pc, #88]	; (8000ec4 <HAL_UART_MspInit+0x80>)
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e70:	6253      	str	r3, [r2, #36]	; 0x24
 8000e72:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <HAL_UART_MspInit+0x80>)
 8000e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <HAL_UART_MspInit+0x80>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a10      	ldr	r2, [pc, #64]	; (8000ec4 <HAL_UART_MspInit+0x80>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	61d3      	str	r3, [r2, #28]
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <HAL_UART_MspInit+0x80>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e96:	230c      	movs	r3, #12
 8000e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ea6:	2307      	movs	r3, #7
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <HAL_UART_MspInit+0x84>)
 8000eb2:	f000 fad3 	bl	800145c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	3728      	adds	r7, #40	; 0x28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40004400 	.word	0x40004400
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020000 	.word	0x40020000

08000ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <NMI_Handler+0x4>

08000ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <MemManage_Handler+0x4>

08000ede <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr

08000ef6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr

08000f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr

08000f0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f12:	f000 f957 	bl	80011c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <USB_LP_IRQHandler+0x10>)
 8000f22:	f000 fd77 	bl	8001a14 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20001988 	.word	0x20001988

08000f30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000f34:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000f38:	f000 fc50 	bl	80017dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f40:	f000 fc4c 	bl	80017dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return 1;
 8000f4c:	2301      	movs	r3, #1
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr

08000f56 <_kill>:

int _kill(int pid, int sig)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f60:	f008 fdce 	bl	8009b00 <__errno>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2216      	movs	r2, #22
 8000f68:	601a      	str	r2, [r3, #0]
  return -1;
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <_exit>:

void _exit (int status)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f7e:	f04f 31ff 	mov.w	r1, #4294967295
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffe7 	bl	8000f56 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f88:	e7fe      	b.n	8000f88 <_exit+0x12>

08000f8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	60f8      	str	r0, [r7, #12]
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	e00a      	b.n	8000fb2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f9c:	f3af 8000 	nop.w
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	1c5a      	adds	r2, r3, #1
 8000fa6:	60ba      	str	r2, [r7, #8]
 8000fa8:	b2ca      	uxtb	r2, r1
 8000faa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	dbf0      	blt.n	8000f9c <_read+0x12>
  }

  return len;
 8000fba:	687b      	ldr	r3, [r7, #4]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	e009      	b.n	8000fea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	1c5a      	adds	r2, r3, #1
 8000fda:	60ba      	str	r2, [r7, #8]
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	dbf1      	blt.n	8000fd6 <_write+0x12>
  }
  return len;
 8000ff2:	687b      	ldr	r3, [r7, #4]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <_close>:

int _close(int file)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001004:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001008:	4618      	mov	r0, r3
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr

08001012 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001022:	605a      	str	r2, [r3, #4]
  return 0;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <_isatty>:

int _isatty(int file)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001038:	2301      	movs	r3, #1
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr

08001044 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr

0800105c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001064:	4a14      	ldr	r2, [pc, #80]	; (80010b8 <_sbrk+0x5c>)
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <_sbrk+0x60>)
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <_sbrk+0x64>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d102      	bne.n	800107e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <_sbrk+0x64>)
 800107a:	4a12      	ldr	r2, [pc, #72]	; (80010c4 <_sbrk+0x68>)
 800107c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <_sbrk+0x64>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	429a      	cmp	r2, r3
 800108a:	d207      	bcs.n	800109c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800108c:	f008 fd38 	bl	8009b00 <__errno>
 8001090:	4603      	mov	r3, r0
 8001092:	220c      	movs	r2, #12
 8001094:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	e009      	b.n	80010b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <_sbrk+0x64>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010a2:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <_sbrk+0x64>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <_sbrk+0x64>)
 80010ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ae:	68fb      	ldr	r3, [r7, #12]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20014000 	.word	0x20014000
 80010bc:	00000400 	.word	0x00000400
 80010c0:	20000410 	.word	0x20000410
 80010c4:	20001ea8 	.word	0x20001ea8

080010c8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr

080010d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d4:	480c      	ldr	r0, [pc, #48]	; (8001108 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010d6:	490d      	ldr	r1, [pc, #52]	; (800110c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010d8:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010dc:	e002      	b.n	80010e4 <LoopCopyDataInit>

080010de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e2:	3304      	adds	r3, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e8:	d3f9      	bcc.n	80010de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010ec:	4c0a      	ldr	r4, [pc, #40]	; (8001118 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f0:	e001      	b.n	80010f6 <LoopFillZerobss>

080010f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f4:	3204      	adds	r2, #4

080010f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f8:	d3fb      	bcc.n	80010f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010fa:	f7ff ffe5 	bl	80010c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010fe:	f008 fd05 	bl	8009b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001102:	f7ff fc6d 	bl	80009e0 <main>
  bx lr
 8001106:	4770      	bx	lr
  ldr r0, =_sdata
 8001108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800110c:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 8001110:	0800b8ac 	.word	0x0800b8ac
  ldr r2, =_sbss
 8001114:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 8001118:	20001ea4 	.word	0x20001ea4

0800111c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800111c:	e7fe      	b.n	800111c <ADC1_IRQHandler>

0800111e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001128:	2003      	movs	r0, #3
 800112a:	f000 f955 	bl	80013d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800112e:	2000      	movs	r0, #0
 8001130:	f000 f80e 	bl	8001150 <HAL_InitTick>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d002      	beq.n	8001140 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	71fb      	strb	r3, [r7, #7]
 800113e:	e001      	b.n	8001144 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001140:	f7ff fe0c 	bl	8000d5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001144:	79fb      	ldrb	r3, [r7, #7]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001158:	2300      	movs	r3, #0
 800115a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800115c:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <HAL_InitTick+0x68>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d022      	beq.n	80011aa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001164:	4b15      	ldr	r3, [pc, #84]	; (80011bc <HAL_InitTick+0x6c>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <HAL_InitTick+0x68>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001170:	fbb1 f3f3 	udiv	r3, r1, r3
 8001174:	fbb2 f3f3 	udiv	r3, r2, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f000 f962 	bl	8001442 <HAL_SYSTICK_Config>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d10f      	bne.n	80011a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b0f      	cmp	r3, #15
 8001188:	d809      	bhi.n	800119e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800118a:	2200      	movs	r2, #0
 800118c:	6879      	ldr	r1, [r7, #4]
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	f000 f92c 	bl	80013ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <HAL_InitTick+0x70>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	e007      	b.n	80011ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	73fb      	strb	r3, [r7, #15]
 80011a2:	e004      	b.n	80011ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
 80011a8:	e001      	b.n	80011ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	2000016c 	.word	0x2000016c
 80011bc:	20000164 	.word	0x20000164
 80011c0:	20000168 	.word	0x20000168

080011c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <HAL_IncTick+0x1c>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <HAL_IncTick+0x20>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4413      	add	r3, r2
 80011d2:	4a03      	ldr	r2, [pc, #12]	; (80011e0 <HAL_IncTick+0x1c>)
 80011d4:	6013      	str	r3, [r2, #0]
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000414 	.word	0x20000414
 80011e4:	2000016c 	.word	0x2000016c

080011e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return uwTick;
 80011ec:	4b02      	ldr	r3, [pc, #8]	; (80011f8 <HAL_GetTick+0x10>)
 80011ee:	681b      	ldr	r3, [r3, #0]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr
 80011f8:	20000414 	.word	0x20000414

080011fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001204:	f7ff fff0 	bl	80011e8 <HAL_GetTick>
 8001208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001214:	d004      	beq.n	8001220 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <HAL_Delay+0x40>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	4413      	add	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001220:	bf00      	nop
 8001222:	f7ff ffe1 	bl	80011e8 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	429a      	cmp	r2, r3
 8001230:	d8f7      	bhi.n	8001222 <HAL_Delay+0x26>
  {
  }
}
 8001232:	bf00      	nop
 8001234:	bf00      	nop
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	2000016c 	.word	0x2000016c

08001240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <__NVIC_SetPriorityGrouping+0x44>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800125c:	4013      	ands	r3, r2
 800125e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001268:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800126c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001272:	4a04      	ldr	r2, [pc, #16]	; (8001284 <__NVIC_SetPriorityGrouping+0x44>)
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	60d3      	str	r3, [r2, #12]
}
 8001278:	bf00      	nop
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800128c:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <__NVIC_GetPriorityGrouping+0x18>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	0a1b      	lsrs	r3, r3, #8
 8001292:	f003 0307 	and.w	r3, r3, #7
}
 8001296:	4618      	mov	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	db0b      	blt.n	80012ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	f003 021f 	and.w	r2, r3, #31
 80012bc:	4906      	ldr	r1, [pc, #24]	; (80012d8 <__NVIC_EnableIRQ+0x34>)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	095b      	lsrs	r3, r3, #5
 80012c4:	2001      	movs	r0, #1
 80012c6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr
 80012d8:	e000e100 	.word	0xe000e100

080012dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	db0a      	blt.n	8001306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	490c      	ldr	r1, [pc, #48]	; (8001328 <__NVIC_SetPriority+0x4c>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	440b      	add	r3, r1
 8001300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001304:	e00a      	b.n	800131c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4908      	ldr	r1, [pc, #32]	; (800132c <__NVIC_SetPriority+0x50>)
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	3b04      	subs	r3, #4
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	440b      	add	r3, r1
 800131a:	761a      	strb	r2, [r3, #24]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000e100 	.word	0xe000e100
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	; 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f1c3 0307 	rsb	r3, r3, #7
 800134a:	2b04      	cmp	r3, #4
 800134c:	bf28      	it	cs
 800134e:	2304      	movcs	r3, #4
 8001350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3304      	adds	r3, #4
 8001356:	2b06      	cmp	r3, #6
 8001358:	d902      	bls.n	8001360 <NVIC_EncodePriority+0x30>
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3b03      	subs	r3, #3
 800135e:	e000      	b.n	8001362 <NVIC_EncodePriority+0x32>
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	f04f 32ff 	mov.w	r2, #4294967295
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	401a      	ands	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001378:	f04f 31ff 	mov.w	r1, #4294967295
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	43d9      	mvns	r1, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	4313      	orrs	r3, r2
         );
}
 800138a:	4618      	mov	r0, r3
 800138c:	3724      	adds	r7, #36	; 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a4:	d301      	bcc.n	80013aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00f      	b.n	80013ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013aa:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <SysTick_Config+0x40>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b2:	210f      	movs	r1, #15
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f7ff ff90 	bl	80012dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <SysTick_Config+0x40>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c2:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <SysTick_Config+0x40>)
 80013c4:	2207      	movs	r2, #7
 80013c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	e000e010 	.word	0xe000e010

080013d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ff2d 	bl	8001240 <__NVIC_SetPriorityGrouping>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b086      	sub	sp, #24
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001400:	f7ff ff42 	bl	8001288 <__NVIC_GetPriorityGrouping>
 8001404:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	6978      	ldr	r0, [r7, #20]
 800140c:	f7ff ff90 	bl	8001330 <NVIC_EncodePriority>
 8001410:	4602      	mov	r2, r0
 8001412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff5f 	bl	80012dc <__NVIC_SetPriority>
}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff35 	bl	80012a4 <__NVIC_EnableIRQ>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ffa2 	bl	8001394 <SysTick_Config>
 8001450:	4603      	mov	r3, r0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800145c:	b480      	push	{r7}
 800145e:	b087      	sub	sp, #28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001472:	e160      	b.n	8001736 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2101      	movs	r1, #1
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	fa01 f303 	lsl.w	r3, r1, r3
 8001480:	4013      	ands	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 8152 	beq.w	8001730 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	2b01      	cmp	r3, #1
 8001496:	d005      	beq.n	80014a4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d130      	bne.n	8001506 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	2203      	movs	r2, #3
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80014da:	2201      	movs	r2, #1
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	091b      	lsrs	r3, r3, #4
 80014f0:	f003 0201 	and.w	r2, r3, #1
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	2b03      	cmp	r3, #3
 8001510:	d017      	beq.n	8001542 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	2203      	movs	r2, #3
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d123      	bne.n	8001596 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	220f      	movs	r2, #15
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	691a      	ldr	r2, [r3, #16]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	08da      	lsrs	r2, r3, #3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3208      	adds	r2, #8
 8001590:	6939      	ldr	r1, [r7, #16]
 8001592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	2203      	movs	r2, #3
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 0203 	and.w	r2, r3, #3
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 80ac 	beq.w	8001730 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d8:	4b5e      	ldr	r3, [pc, #376]	; (8001754 <HAL_GPIO_Init+0x2f8>)
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	4a5d      	ldr	r2, [pc, #372]	; (8001754 <HAL_GPIO_Init+0x2f8>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6213      	str	r3, [r2, #32]
 80015e4:	4b5b      	ldr	r3, [pc, #364]	; (8001754 <HAL_GPIO_Init+0x2f8>)
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80015f0:	4a59      	ldr	r2, [pc, #356]	; (8001758 <HAL_GPIO_Init+0x2fc>)
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	089b      	lsrs	r3, r3, #2
 80015f6:	3302      	adds	r3, #2
 80015f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	220f      	movs	r2, #15
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4013      	ands	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a51      	ldr	r2, [pc, #324]	; (800175c <HAL_GPIO_Init+0x300>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d025      	beq.n	8001668 <HAL_GPIO_Init+0x20c>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a50      	ldr	r2, [pc, #320]	; (8001760 <HAL_GPIO_Init+0x304>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d01f      	beq.n	8001664 <HAL_GPIO_Init+0x208>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a4f      	ldr	r2, [pc, #316]	; (8001764 <HAL_GPIO_Init+0x308>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d019      	beq.n	8001660 <HAL_GPIO_Init+0x204>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a4e      	ldr	r2, [pc, #312]	; (8001768 <HAL_GPIO_Init+0x30c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d013      	beq.n	800165c <HAL_GPIO_Init+0x200>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a4d      	ldr	r2, [pc, #308]	; (800176c <HAL_GPIO_Init+0x310>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d00d      	beq.n	8001658 <HAL_GPIO_Init+0x1fc>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a4c      	ldr	r2, [pc, #304]	; (8001770 <HAL_GPIO_Init+0x314>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d007      	beq.n	8001654 <HAL_GPIO_Init+0x1f8>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a4b      	ldr	r2, [pc, #300]	; (8001774 <HAL_GPIO_Init+0x318>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d101      	bne.n	8001650 <HAL_GPIO_Init+0x1f4>
 800164c:	2306      	movs	r3, #6
 800164e:	e00c      	b.n	800166a <HAL_GPIO_Init+0x20e>
 8001650:	2307      	movs	r3, #7
 8001652:	e00a      	b.n	800166a <HAL_GPIO_Init+0x20e>
 8001654:	2305      	movs	r3, #5
 8001656:	e008      	b.n	800166a <HAL_GPIO_Init+0x20e>
 8001658:	2304      	movs	r3, #4
 800165a:	e006      	b.n	800166a <HAL_GPIO_Init+0x20e>
 800165c:	2303      	movs	r3, #3
 800165e:	e004      	b.n	800166a <HAL_GPIO_Init+0x20e>
 8001660:	2302      	movs	r3, #2
 8001662:	e002      	b.n	800166a <HAL_GPIO_Init+0x20e>
 8001664:	2301      	movs	r3, #1
 8001666:	e000      	b.n	800166a <HAL_GPIO_Init+0x20e>
 8001668:	2300      	movs	r3, #0
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	f002 0203 	and.w	r2, r2, #3
 8001670:	0092      	lsls	r2, r2, #2
 8001672:	4093      	lsls	r3, r2
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800167a:	4937      	ldr	r1, [pc, #220]	; (8001758 <HAL_GPIO_Init+0x2fc>)
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	089b      	lsrs	r3, r3, #2
 8001680:	3302      	adds	r3, #2
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001688:	4b3b      	ldr	r3, [pc, #236]	; (8001778 <HAL_GPIO_Init+0x31c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	43db      	mvns	r3, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016ac:	4a32      	ldr	r2, [pc, #200]	; (8001778 <HAL_GPIO_Init+0x31c>)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016b2:	4b31      	ldr	r3, [pc, #196]	; (8001778 <HAL_GPIO_Init+0x31c>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4013      	ands	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016d6:	4a28      	ldr	r2, [pc, #160]	; (8001778 <HAL_GPIO_Init+0x31c>)
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016dc:	4b26      	ldr	r3, [pc, #152]	; (8001778 <HAL_GPIO_Init+0x31c>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4013      	ands	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001700:	4a1d      	ldr	r2, [pc, #116]	; (8001778 <HAL_GPIO_Init+0x31c>)
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001706:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <HAL_GPIO_Init+0x31c>)
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	43db      	mvns	r3, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4313      	orrs	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800172a:	4a13      	ldr	r2, [pc, #76]	; (8001778 <HAL_GPIO_Init+0x31c>)
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	3301      	adds	r3, #1
 8001734:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	fa22 f303 	lsr.w	r3, r2, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	f47f ae97 	bne.w	8001474 <HAL_GPIO_Init+0x18>
  }
}
 8001746:	bf00      	nop
 8001748:	bf00      	nop
 800174a:	371c      	adds	r7, #28
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800
 8001758:	40010000 	.word	0x40010000
 800175c:	40020000 	.word	0x40020000
 8001760:	40020400 	.word	0x40020400
 8001764:	40020800 	.word	0x40020800
 8001768:	40020c00 	.word	0x40020c00
 800176c:	40021000 	.word	0x40021000
 8001770:	40021400 	.word	0x40021400
 8001774:	40021800 	.word	0x40021800
 8001778:	40010400 	.word	0x40010400

0800177c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691a      	ldr	r2, [r3, #16]
 800178c:	887b      	ldrh	r3, [r7, #2]
 800178e:	4013      	ands	r3, r2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d002      	beq.n	800179a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001794:	2301      	movs	r3, #1
 8001796:	73fb      	strb	r3, [r7, #15]
 8001798:	e001      	b.n	800179e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800179a:	2300      	movs	r3, #0
 800179c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800179e:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr

080017aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	460b      	mov	r3, r1
 80017b4:	807b      	strh	r3, [r7, #2]
 80017b6:	4613      	mov	r3, r2
 80017b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017ba:	787b      	ldrb	r3, [r7, #1]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017c0:	887a      	ldrh	r2, [r7, #2]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80017c6:	e003      	b.n	80017d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80017c8:	887b      	ldrh	r3, [r7, #2]
 80017ca:	041a      	lsls	r2, r3, #16
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	619a      	str	r2, [r3, #24]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr
	...

080017dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017e8:	695a      	ldr	r2, [r3, #20]
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	4013      	ands	r3, r2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d006      	beq.n	8001800 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017f2:	4a05      	ldr	r2, [pc, #20]	; (8001808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017f8:	88fb      	ldrh	r3, [r7, #6]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff f8e6 	bl	80009cc <HAL_GPIO_EXTI_Callback>
  }
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40010400 	.word	0x40010400

0800180c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800180c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180e:	b08b      	sub	sp, #44	; 0x2c
 8001810:	af06      	add	r7, sp, #24
 8001812:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e0d0      	b.n	80019c0 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d106      	bne.n	8001838 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f007 fec4 	bl	80095c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2203      	movs	r2, #3
 800183c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f002 fe41 	bl	80044cc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800184a:	2300      	movs	r3, #0
 800184c:	73fb      	strb	r3, [r7, #15]
 800184e:	e04c      	b.n	80018ea <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	440b      	add	r3, r1
 8001860:	3301      	adds	r3, #1
 8001862:	2201      	movs	r2, #1
 8001864:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	440b      	add	r3, r1
 8001876:	7bfa      	ldrb	r2, [r7, #15]
 8001878:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800187a:	7bfa      	ldrb	r2, [r7, #15]
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	b298      	uxth	r0, r3
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	440b      	add	r3, r1
 800188c:	3336      	adds	r3, #54	; 0x36
 800188e:	4602      	mov	r2, r0
 8001890:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	440b      	add	r3, r1
 80018a2:	3303      	adds	r3, #3
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018a8:	7bfa      	ldrb	r2, [r7, #15]
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	440b      	add	r3, r1
 80018b6:	3338      	adds	r3, #56	; 0x38
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018bc:	7bfa      	ldrb	r2, [r7, #15]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	440b      	add	r3, r1
 80018ca:	333c      	adds	r3, #60	; 0x3c
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018d0:	7bfa      	ldrb	r2, [r7, #15]
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	440b      	add	r3, r1
 80018de:	3340      	adds	r3, #64	; 0x40
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	3301      	adds	r3, #1
 80018e8:	73fb      	strb	r3, [r7, #15]
 80018ea:	7bfa      	ldrb	r2, [r7, #15]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d3ad      	bcc.n	8001850 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018f4:	2300      	movs	r3, #0
 80018f6:	73fb      	strb	r3, [r7, #15]
 80018f8:	e044      	b.n	8001984 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018fa:	7bfa      	ldrb	r2, [r7, #15]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	440b      	add	r3, r1
 8001908:	f203 1369 	addw	r3, r3, #361	; 0x169
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001910:	7bfa      	ldrb	r2, [r7, #15]
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	440b      	add	r3, r1
 800191e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001922:	7bfa      	ldrb	r2, [r7, #15]
 8001924:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001926:	7bfa      	ldrb	r2, [r7, #15]
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	440b      	add	r3, r1
 8001934:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800193c:	7bfa      	ldrb	r2, [r7, #15]
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	440b      	add	r3, r1
 800194a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001952:	7bfa      	ldrb	r2, [r7, #15]
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	440b      	add	r3, r1
 8001960:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001968:	7bfa      	ldrb	r2, [r7, #15]
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	440b      	add	r3, r1
 8001976:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	3301      	adds	r3, #1
 8001982:	73fb      	strb	r3, [r7, #15]
 8001984:	7bfa      	ldrb	r2, [r7, #15]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	429a      	cmp	r2, r3
 800198c:	d3b5      	bcc.n	80018fa <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	687e      	ldr	r6, [r7, #4]
 8001996:	466d      	mov	r5, sp
 8001998:	f106 0410 	add.w	r4, r6, #16
 800199c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800199e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019a0:	6823      	ldr	r3, [r4, #0]
 80019a2:	602b      	str	r3, [r5, #0]
 80019a4:	1d33      	adds	r3, r6, #4
 80019a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019a8:	6838      	ldr	r0, [r7, #0]
 80019aa:	f002 fda9 	bl	8004500 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d101      	bne.n	80019de <HAL_PCD_Start+0x16>
 80019da:	2302      	movs	r3, #2
 80019dc:	e016      	b.n	8001a0c <HAL_PCD_Start+0x44>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f002 fd58 	bl	80044a0 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80019f0:	2101      	movs	r1, #1
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f007 fdc6 	bl	8009584 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f005 fa3d 	bl	8006e7c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f005 fa35 	bl	8006e90 <USB_ReadInterrupts>
 8001a26:	4603      	mov	r3, r0
 8001a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a30:	d102      	bne.n	8001a38 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 faf5 	bl	8002022 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f005 fa27 	bl	8006e90 <USB_ReadInterrupts>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a4c:	d112      	bne.n	8001a74 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a60:	b292      	uxth	r2, r2
 8001a62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f007 fe25 	bl	80096b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 f8c7 	bl	8001c02 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f005 fa09 	bl	8006e90 <USB_ReadInterrupts>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a88:	d10b      	bne.n	8001aa2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a9c:	b292      	uxth	r2, r2
 8001a9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f005 f9f2 	bl	8006e90 <USB_ReadInterrupts>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ab6:	d10b      	bne.n	8001ad0 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001aca:	b292      	uxth	r2, r2
 8001acc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f005 f9db 	bl	8006e90 <USB_ReadInterrupts>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ae4:	d126      	bne.n	8001b34 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0204 	bic.w	r2, r2, #4
 8001af8:	b292      	uxth	r2, r2
 8001afa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0208 	bic.w	r2, r2, #8
 8001b10:	b292      	uxth	r2, r2
 8001b12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f007 fe06 	bl	8009728 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b2e:	b292      	uxth	r2, r2
 8001b30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f005 f9a9 	bl	8006e90 <USB_ReadInterrupts>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b48:	d126      	bne.n	8001b98 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f042 0208 	orr.w	r2, r2, #8
 8001b5c:	b292      	uxth	r2, r2
 8001b5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b74:	b292      	uxth	r2, r2
 8001b76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 0204 	orr.w	r2, r2, #4
 8001b8c:	b292      	uxth	r2, r2
 8001b8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f007 fdae 	bl	80096f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f005 f977 	bl	8006e90 <USB_ReadInterrupts>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bac:	d10e      	bne.n	8001bcc <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bc0:	b292      	uxth	r2, r2
 8001bc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f007 fd67 	bl	800969a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f005 f95d 	bl	8006e90 <USB_ReadInterrupts>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001be0:	d10b      	bne.n	8001bfa <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bf4:	b292      	uxth	r2, r2
 8001bf6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <HAL_PCD_SetAddress+0x1a>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e013      	b.n	8001c44 <HAL_PCD_SetAddress+0x42>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	78fa      	ldrb	r2, [r7, #3]
 8001c28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	78fa      	ldrb	r2, [r7, #3]
 8001c32:	4611      	mov	r1, r2
 8001c34:	4618      	mov	r0, r3
 8001c36:	f005 f90e 	bl	8006e56 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	4608      	mov	r0, r1
 8001c56:	4611      	mov	r1, r2
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	70fb      	strb	r3, [r7, #3]
 8001c5e:	460b      	mov	r3, r1
 8001c60:	803b      	strh	r3, [r7, #0]
 8001c62:	4613      	mov	r3, r2
 8001c64:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	da0e      	bge.n	8001c90 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c72:	78fb      	ldrb	r3, [r7, #3]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	705a      	strb	r2, [r3, #1]
 8001c8e:	e00e      	b.n	8001cae <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	f003 0207 	and.w	r2, r3, #7
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001cba:	883a      	ldrh	r2, [r7, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	78ba      	ldrb	r2, [r7, #2]
 8001cc4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	785b      	ldrb	r3, [r3, #1]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d004      	beq.n	8001cd8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cd8:	78bb      	ldrb	r3, [r7, #2]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d102      	bne.n	8001ce4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d101      	bne.n	8001cf2 <HAL_PCD_EP_Open+0xa6>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e00e      	b.n	8001d10 <HAL_PCD_EP_Open+0xc4>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68f9      	ldr	r1, [r7, #12]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f002 fc1d 	bl	8004540 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001d0e:	7afb      	ldrb	r3, [r7, #11]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	da0e      	bge.n	8001d4a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	4413      	add	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2201      	movs	r2, #1
 8001d46:	705a      	strb	r2, [r3, #1]
 8001d48:	e00e      	b.n	8001d68 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	f003 0207 	and.w	r2, r3, #7
 8001d50:	4613      	mov	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	4413      	add	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d68:	78fb      	ldrb	r3, [r7, #3]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d101      	bne.n	8001d82 <HAL_PCD_EP_Close+0x6a>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e00e      	b.n	8001da0 <HAL_PCD_EP_Close+0x88>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68f9      	ldr	r1, [r7, #12]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f002 ff3f 	bl	8004c14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	460b      	mov	r3, r1
 8001db6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001db8:	7afb      	ldrb	r3, [r7, #11]
 8001dba:	f003 0207 	and.w	r2, r3, #7
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4413      	add	r3, r2
 8001dce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2200      	movs	r2, #0
 8001de6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001de8:	7afb      	ldrb	r3, [r7, #11]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001df4:	7afb      	ldrb	r3, [r7, #11]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d106      	bne.n	8001e0c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6979      	ldr	r1, [r7, #20]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f003 f8f1 	bl	8004fec <USB_EPStartXfer>
 8001e0a:	e005      	b.n	8001e18 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6979      	ldr	r1, [r7, #20]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f003 f8ea 	bl	8004fec <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	f003 0207 	and.w	r2, r3, #7
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	4613      	mov	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	440b      	add	r3, r1
 8001e40:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001e44:	681b      	ldr	r3, [r3, #0]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	603b      	str	r3, [r7, #0]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e60:	7afb      	ldrb	r3, [r7, #11]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	4613      	mov	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	2200      	movs	r2, #0
 8001e94:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e9c:	7afb      	ldrb	r3, [r7, #11]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ea8:	7afb      	ldrb	r3, [r7, #11]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d106      	bne.n	8001ec0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6979      	ldr	r1, [r7, #20]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f003 f897 	bl	8004fec <USB_EPStartXfer>
 8001ebe:	e005      	b.n	8001ecc <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6979      	ldr	r1, [r7, #20]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f003 f890 	bl	8004fec <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b084      	sub	sp, #16
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ee2:	78fb      	ldrb	r3, [r7, #3]
 8001ee4:	f003 0207 	and.w	r2, r3, #7
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d901      	bls.n	8001ef4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e03e      	b.n	8001f72 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ef4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	da0e      	bge.n	8001f1a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	1c5a      	adds	r2, r3, #1
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	4413      	add	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2201      	movs	r2, #1
 8001f16:	705a      	strb	r2, [r3, #1]
 8001f18:	e00c      	b.n	8001f34 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f1a:	78fa      	ldrb	r2, [r7, #3]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2201      	movs	r2, #1
 8001f38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f3a:	78fb      	ldrb	r3, [r7, #3]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d101      	bne.n	8001f54 <HAL_PCD_EP_SetStall+0x7e>
 8001f50:	2302      	movs	r3, #2
 8001f52:	e00e      	b.n	8001f72 <HAL_PCD_EP_SetStall+0x9c>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68f9      	ldr	r1, [r7, #12]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f004 fe7a 	bl	8006c5c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b084      	sub	sp, #16
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	460b      	mov	r3, r1
 8001f84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f86:	78fb      	ldrb	r3, [r7, #3]
 8001f88:	f003 020f 	and.w	r2, r3, #15
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d901      	bls.n	8001f98 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e040      	b.n	800201a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	da0e      	bge.n	8001fbe <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	1c5a      	adds	r2, r3, #1
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	705a      	strb	r2, [r3, #1]
 8001fbc:	e00e      	b.n	8001fdc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fbe:	78fb      	ldrb	r3, [r7, #3]
 8001fc0:	f003 0207 	and.w	r2, r3, #7
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fe2:	78fb      	ldrb	r3, [r7, #3]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_PCD_EP_ClrStall+0x82>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e00e      	b.n	800201a <HAL_PCD_EP_ClrStall+0xa0>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68f9      	ldr	r1, [r7, #12]
 800200a:	4618      	mov	r0, r3
 800200c:	f004 fe76 	bl	8006cfc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b08e      	sub	sp, #56	; 0x38
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800202a:	e2ec      	b.n	8002606 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002034:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002036:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002038:	b2db      	uxtb	r3, r3
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002042:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002046:	2b00      	cmp	r3, #0
 8002048:	f040 8161 	bne.w	800230e <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800204c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	2b00      	cmp	r3, #0
 8002054:	d152      	bne.n	80020fc <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	b29b      	uxth	r3, r3
 800205e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002066:	81fb      	strh	r3, [r7, #14]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	89fb      	ldrh	r3, [r7, #14]
 800206e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002076:	b29b      	uxth	r3, r3
 8002078:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3328      	adds	r3, #40	; 0x28
 800207e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002088:	b29b      	uxth	r3, r3
 800208a:	461a      	mov	r2, r3
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4413      	add	r3, r2
 8002094:	3302      	adds	r3, #2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	4413      	add	r3, r2
 800209e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	695a      	ldr	r2, [r3, #20]
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	441a      	add	r2, r3
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80020ba:	2100      	movs	r1, #0
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f007 fad2 	bl	8009666 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 829b 	beq.w	8002606 <PCD_EP_ISR_Handler+0x5e4>
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f040 8296 	bne.w	8002606 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	b292      	uxth	r2, r2
 80020ee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80020fa:	e284      	b.n	8002606 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002102:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800210c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800210e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002112:	2b00      	cmp	r3, #0
 8002114:	d034      	beq.n	8002180 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800211e:	b29b      	uxth	r3, r3
 8002120:	461a      	mov	r2, r3
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	4413      	add	r3, r2
 800212a:	3306      	adds	r3, #6
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	4413      	add	r3, r2
 8002134:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6818      	ldr	r0, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002154:	b29b      	uxth	r3, r3
 8002156:	f004 feef 	bl	8006f38 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	b29a      	uxth	r2, r3
 8002162:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002166:	4013      	ands	r3, r2
 8002168:	823b      	strh	r3, [r7, #16]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	8a3a      	ldrh	r2, [r7, #16]
 8002170:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002174:	b292      	uxth	r2, r2
 8002176:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f007 fa47 	bl	800960c <HAL_PCD_SetupStageCallback>
 800217e:	e242      	b.n	8002606 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002180:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002184:	2b00      	cmp	r3, #0
 8002186:	f280 823e 	bge.w	8002606 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	b29a      	uxth	r2, r3
 8002192:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002196:	4013      	ands	r3, r2
 8002198:	83bb      	strh	r3, [r7, #28]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	8bba      	ldrh	r2, [r7, #28]
 80021a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021a4:	b292      	uxth	r2, r2
 80021a6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	461a      	mov	r2, r3
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4413      	add	r3, r2
 80021bc:	3306      	adds	r3, #6
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d019      	beq.n	8002210 <PCD_EP_ISR_Handler+0x1ee>
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d015      	beq.n	8002210 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	6959      	ldr	r1, [r3, #20]
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	f004 fe9f 	bl	8006f38 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	441a      	add	r2, r3
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002208:	2100      	movs	r1, #0
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f007 fa10 	bl	8009630 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	b29b      	uxth	r3, r3
 8002218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800221c:	2b00      	cmp	r3, #0
 800221e:	f040 81f2 	bne.w	8002606 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	61bb      	str	r3, [r7, #24]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002230:	b29b      	uxth	r3, r3
 8002232:	461a      	mov	r2, r3
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	4413      	add	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d112      	bne.n	8002270 <PCD_EP_ISR_Handler+0x24e>
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	b29b      	uxth	r3, r3
 8002250:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002254:	b29a      	uxth	r2, r3
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	801a      	strh	r2, [r3, #0]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	b29b      	uxth	r3, r3
 8002260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002268:	b29a      	uxth	r2, r3
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	801a      	strh	r2, [r3, #0]
 800226e:	e02f      	b.n	80022d0 <PCD_EP_ISR_Handler+0x2ae>
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	2b3e      	cmp	r3, #62	; 0x3e
 8002276:	d813      	bhi.n	80022a0 <PCD_EP_ISR_Handler+0x27e>
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	085b      	lsrs	r3, r3, #1
 800227e:	633b      	str	r3, [r7, #48]	; 0x30
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b00      	cmp	r3, #0
 800228a:	d002      	beq.n	8002292 <PCD_EP_ISR_Handler+0x270>
 800228c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228e:	3301      	adds	r3, #1
 8002290:	633b      	str	r3, [r7, #48]	; 0x30
 8002292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002294:	b29b      	uxth	r3, r3
 8002296:	029b      	lsls	r3, r3, #10
 8002298:	b29a      	uxth	r2, r3
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	801a      	strh	r2, [r3, #0]
 800229e:	e017      	b.n	80022d0 <PCD_EP_ISR_Handler+0x2ae>
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	095b      	lsrs	r3, r3, #5
 80022a6:	633b      	str	r3, [r7, #48]	; 0x30
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	f003 031f 	and.w	r3, r3, #31
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d102      	bne.n	80022ba <PCD_EP_ISR_Handler+0x298>
 80022b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b6:	3b01      	subs	r3, #1
 80022b8:	633b      	str	r3, [r7, #48]	; 0x30
 80022ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022bc:	b29b      	uxth	r3, r3
 80022be:	029b      	lsls	r3, r3, #10
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022e0:	827b      	strh	r3, [r7, #18]
 80022e2:	8a7b      	ldrh	r3, [r7, #18]
 80022e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80022e8:	827b      	strh	r3, [r7, #18]
 80022ea:	8a7b      	ldrh	r3, [r7, #18]
 80022ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022f0:	827b      	strh	r3, [r7, #18]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	8a7b      	ldrh	r3, [r7, #18]
 80022f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002308:	b29b      	uxth	r3, r3
 800230a:	8013      	strh	r3, [r2, #0]
 800230c:	e17b      	b.n	8002606 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002320:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002324:	2b00      	cmp	r3, #0
 8002326:	f280 80ea 	bge.w	80024fe <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	b29a      	uxth	r2, r3
 800233c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002340:	4013      	ands	r3, r2
 8002342:	853b      	strh	r3, [r7, #40]	; 0x28
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002354:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002358:	b292      	uxth	r2, r2
 800235a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800235c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	4413      	add	r3, r2
 8002370:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	7b1b      	ldrb	r3, [r3, #12]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d122      	bne.n	80023c0 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002382:	b29b      	uxth	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4413      	add	r3, r2
 800238e:	3306      	adds	r3, #6
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6812      	ldr	r2, [r2, #0]
 8002396:	4413      	add	r3, r2
 8002398:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023a2:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80023a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 8087 	beq.w	80024ba <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6818      	ldr	r0, [r3, #0]
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	6959      	ldr	r1, [r3, #20]
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	88da      	ldrh	r2, [r3, #6]
 80023b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023ba:	f004 fdbd 	bl	8006f38 <USB_ReadPMA>
 80023be:	e07c      	b.n	80024ba <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	78db      	ldrb	r3, [r3, #3]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d108      	bne.n	80023da <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80023c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023ca:	461a      	mov	r2, r3
 80023cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f927 	bl	8002622 <HAL_PCD_EP_DB_Receive>
 80023d4:	4603      	mov	r3, r0
 80023d6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80023d8:	e06f      	b.n	80024ba <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f4:	847b      	strh	r3, [r7, #34]	; 0x22
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	441a      	add	r2, r3
 8002404:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800240a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800240e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002412:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002416:	b29b      	uxth	r3, r3
 8002418:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	b29b      	uxth	r3, r3
 800242c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d021      	beq.n	8002478 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800243c:	b29b      	uxth	r3, r3
 800243e:	461a      	mov	r2, r3
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4413      	add	r3, r2
 8002448:	3302      	adds	r3, #2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	4413      	add	r3, r2
 8002452:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800245c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800245e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002460:	2b00      	cmp	r3, #0
 8002462:	d02a      	beq.n	80024ba <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6818      	ldr	r0, [r3, #0]
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	6959      	ldr	r1, [r3, #20]
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	891a      	ldrh	r2, [r3, #8]
 8002470:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002472:	f004 fd61 	bl	8006f38 <USB_ReadPMA>
 8002476:	e020      	b.n	80024ba <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002480:	b29b      	uxth	r3, r3
 8002482:	461a      	mov	r2, r3
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4413      	add	r3, r2
 800248c:	3306      	adds	r3, #6
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6812      	ldr	r2, [r2, #0]
 8002494:	4413      	add	r3, r2
 8002496:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024a0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80024a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	6959      	ldr	r1, [r3, #20]
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	895a      	ldrh	r2, [r3, #10]
 80024b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024b6:	f004 fd3f 	bl	8006f38 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	69da      	ldr	r2, [r3, #28]
 80024be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024c0:	441a      	add	r2, r3
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	695a      	ldr	r2, [r3, #20]
 80024ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024cc:	441a      	add	r2, r3
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d004      	beq.n	80024e4 <PCD_EP_ISR_Handler+0x4c2>
 80024da:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d206      	bcs.n	80024f2 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	4619      	mov	r1, r3
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f007 f8a0 	bl	8009630 <HAL_PCD_DataOutStageCallback>
 80024f0:	e005      	b.n	80024fe <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024f8:	4618      	mov	r0, r3
 80024fa:	f002 fd77 	bl	8004fec <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80024fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002504:	2b00      	cmp	r3, #0
 8002506:	d07e      	beq.n	8002606 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002508:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	4413      	add	r3, r2
 800251a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	461a      	mov	r2, r3
 8002522:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	b29b      	uxth	r3, r3
 800252e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002536:	843b      	strh	r3, [r7, #32]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	441a      	add	r2, r3
 8002546:	8c3b      	ldrh	r3, [r7, #32]
 8002548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800254c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002550:	b29b      	uxth	r3, r3
 8002552:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	78db      	ldrb	r3, [r3, #3]
 8002558:	2b03      	cmp	r3, #3
 800255a:	d00c      	beq.n	8002576 <PCD_EP_ISR_Handler+0x554>
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	78db      	ldrb	r3, [r3, #3]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002568:	2b02      	cmp	r3, #2
 800256a:	d146      	bne.n	80025fa <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800256c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800256e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d141      	bne.n	80025fa <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800257e:	b29b      	uxth	r3, r3
 8002580:	461a      	mov	r2, r3
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	4413      	add	r3, r2
 800258a:	3302      	adds	r3, #2
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	4413      	add	r3, r2
 8002594:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800259e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	699a      	ldr	r2, [r3, #24]
 80025a4:	8bfb      	ldrh	r3, [r7, #30]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d906      	bls.n	80025b8 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	699a      	ldr	r2, [r3, #24]
 80025ae:	8bfb      	ldrh	r3, [r7, #30]
 80025b0:	1ad2      	subs	r2, r2, r3
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	619a      	str	r2, [r3, #24]
 80025b6:	e002      	b.n	80025be <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	2200      	movs	r2, #0
 80025bc:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d106      	bne.n	80025d4 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	4619      	mov	r1, r3
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f007 f84a 	bl	8009666 <HAL_PCD_DataInStageCallback>
 80025d2:	e018      	b.n	8002606 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	695a      	ldr	r2, [r3, #20]
 80025d8:	8bfb      	ldrh	r3, [r7, #30]
 80025da:	441a      	add	r2, r3
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	69da      	ldr	r2, [r3, #28]
 80025e4:	8bfb      	ldrh	r3, [r7, #30]
 80025e6:	441a      	add	r2, r3
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025f2:	4618      	mov	r0, r3
 80025f4:	f002 fcfa 	bl	8004fec <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80025f8:	e005      	b.n	8002606 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80025fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025fc:	461a      	mov	r2, r3
 80025fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f91b 	bl	800283c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800260e:	b29b      	uxth	r3, r3
 8002610:	b21b      	sxth	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	f6ff ad0a 	blt.w	800202c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3738      	adds	r7, #56	; 0x38
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b088      	sub	sp, #32
 8002626:	af00      	add	r7, sp, #0
 8002628:	60f8      	str	r0, [r7, #12]
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	4613      	mov	r3, r2
 800262e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002630:	88fb      	ldrh	r3, [r7, #6]
 8002632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d07e      	beq.n	8002738 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002642:	b29b      	uxth	r3, r3
 8002644:	461a      	mov	r2, r3
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	4413      	add	r3, r2
 800264e:	3302      	adds	r3, #2
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	4413      	add	r3, r2
 8002658:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002662:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	699a      	ldr	r2, [r3, #24]
 8002668:	8b7b      	ldrh	r3, [r7, #26]
 800266a:	429a      	cmp	r2, r3
 800266c:	d306      	bcc.n	800267c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	699a      	ldr	r2, [r3, #24]
 8002672:	8b7b      	ldrh	r3, [r7, #26]
 8002674:	1ad2      	subs	r2, r2, r3
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	619a      	str	r2, [r3, #24]
 800267a:	e002      	b.n	8002682 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2200      	movs	r2, #0
 8002680:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d123      	bne.n	80026d2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	461a      	mov	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a4:	833b      	strh	r3, [r7, #24]
 80026a6:	8b3b      	ldrh	r3, [r7, #24]
 80026a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026ac:	833b      	strh	r3, [r7, #24]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	441a      	add	r2, r3
 80026bc:	8b3b      	ldrh	r3, [r7, #24]
 80026be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026d2:	88fb      	ldrh	r3, [r7, #6]
 80026d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d01f      	beq.n	800271c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	461a      	mov	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f6:	82fb      	strh	r3, [r7, #22]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	441a      	add	r2, r3
 8002706:	8afb      	ldrh	r3, [r7, #22]
 8002708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800270c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002710:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002714:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002718:	b29b      	uxth	r3, r3
 800271a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800271c:	8b7b      	ldrh	r3, [r7, #26]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 8087 	beq.w	8002832 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	6959      	ldr	r1, [r3, #20]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	891a      	ldrh	r2, [r3, #8]
 8002730:	8b7b      	ldrh	r3, [r7, #26]
 8002732:	f004 fc01 	bl	8006f38 <USB_ReadPMA>
 8002736:	e07c      	b.n	8002832 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002740:	b29b      	uxth	r3, r3
 8002742:	461a      	mov	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	4413      	add	r3, r2
 800274c:	3306      	adds	r3, #6
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	6812      	ldr	r2, [r2, #0]
 8002754:	4413      	add	r3, r2
 8002756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002760:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	699a      	ldr	r2, [r3, #24]
 8002766:	8b7b      	ldrh	r3, [r7, #26]
 8002768:	429a      	cmp	r2, r3
 800276a:	d306      	bcc.n	800277a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	699a      	ldr	r2, [r3, #24]
 8002770:	8b7b      	ldrh	r3, [r7, #26]
 8002772:	1ad2      	subs	r2, r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	619a      	str	r2, [r3, #24]
 8002778:	e002      	b.n	8002780 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2200      	movs	r2, #0
 800277e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d123      	bne.n	80027d0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	b29b      	uxth	r3, r3
 800279a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800279e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a2:	83fb      	strh	r3, [r7, #30]
 80027a4:	8bfb      	ldrh	r3, [r7, #30]
 80027a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80027aa:	83fb      	strh	r3, [r7, #30]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	441a      	add	r2, r3
 80027ba:	8bfb      	ldrh	r3, [r7, #30]
 80027bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d11f      	bne.n	800281a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f4:	83bb      	strh	r3, [r7, #28]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	441a      	add	r2, r3
 8002804:	8bbb      	ldrh	r3, [r7, #28]
 8002806:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800280a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800280e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002812:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002816:	b29b      	uxth	r3, r3
 8002818:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800281a:	8b7b      	ldrh	r3, [r7, #26]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	6959      	ldr	r1, [r3, #20]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	895a      	ldrh	r2, [r3, #10]
 800282c:	8b7b      	ldrh	r3, [r7, #26]
 800282e:	f004 fb83 	bl	8006f38 <USB_ReadPMA>
    }
  }

  return count;
 8002832:	8b7b      	ldrh	r3, [r7, #26]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3720      	adds	r7, #32
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b0a2      	sub	sp, #136	; 0x88
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	4613      	mov	r3, r2
 8002848:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 81c7 	beq.w	8002be4 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800285e:	b29b      	uxth	r3, r3
 8002860:	461a      	mov	r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	4413      	add	r3, r2
 800286a:	3302      	adds	r3, #2
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	4413      	add	r3, r2
 8002874:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800287e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	699a      	ldr	r2, [r3, #24]
 8002886:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800288a:	429a      	cmp	r2, r3
 800288c:	d907      	bls.n	800289e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	699a      	ldr	r2, [r3, #24]
 8002892:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002896:	1ad2      	subs	r2, r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	619a      	str	r2, [r3, #24]
 800289c:	e002      	b.n	80028a4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2200      	movs	r2, #0
 80028a2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f040 80b9 	bne.w	8002a20 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	785b      	ldrb	r3, [r3, #1]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d126      	bne.n	8002904 <HAL_PCD_EP_DB_Transmit+0xc8>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	461a      	mov	r2, r3
 80028c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ca:	4413      	add	r3, r2
 80028cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	011a      	lsls	r2, r3, #4
 80028d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d6:	4413      	add	r3, r2
 80028d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	801a      	strh	r2, [r3, #0]
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	801a      	strh	r2, [r3, #0]
 8002902:	e01a      	b.n	800293a <HAL_PCD_EP_DB_Transmit+0xfe>
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	785b      	ldrb	r3, [r3, #1]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d116      	bne.n	800293a <HAL_PCD_EP_DB_Transmit+0xfe>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	633b      	str	r3, [r7, #48]	; 0x30
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800291a:	b29b      	uxth	r3, r3
 800291c:	461a      	mov	r2, r3
 800291e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002920:	4413      	add	r3, r2
 8002922:	633b      	str	r3, [r7, #48]	; 0x30
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	011a      	lsls	r2, r3, #4
 800292a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292c:	4413      	add	r3, r2
 800292e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002932:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002936:	2200      	movs	r2, #0
 8002938:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	623b      	str	r3, [r7, #32]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	785b      	ldrb	r3, [r3, #1]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d126      	bne.n	8002996 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	61bb      	str	r3, [r7, #24]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002956:	b29b      	uxth	r3, r3
 8002958:	461a      	mov	r2, r3
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	4413      	add	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	011a      	lsls	r2, r3, #4
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	4413      	add	r3, r2
 800296a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	b29b      	uxth	r3, r3
 8002976:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800297a:	b29a      	uxth	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	801a      	strh	r2, [r3, #0]
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	b29b      	uxth	r3, r3
 8002986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800298a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800298e:	b29a      	uxth	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	801a      	strh	r2, [r3, #0]
 8002994:	e017      	b.n	80029c6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	785b      	ldrb	r3, [r3, #1]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d113      	bne.n	80029c6 <HAL_PCD_EP_DB_Transmit+0x18a>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	461a      	mov	r2, r3
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	4413      	add	r3, r2
 80029ae:	623b      	str	r3, [r7, #32]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	011a      	lsls	r2, r3, #4
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	4413      	add	r3, r2
 80029ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029be:	61fb      	str	r3, [r7, #28]
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	2200      	movs	r2, #0
 80029c4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	4619      	mov	r1, r3
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f006 fe4a 	bl	8009666 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029d2:	88fb      	ldrh	r3, [r7, #6]
 80029d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 82d4 	beq.w	8002f86 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f8:	827b      	strh	r3, [r7, #18]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	441a      	add	r2, r3
 8002a08:	8a7b      	ldrh	r3, [r7, #18]
 8002a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	8013      	strh	r3, [r2, #0]
 8002a1e:	e2b2      	b.n	8002f86 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a20:	88fb      	ldrh	r3, [r7, #6]
 8002a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d021      	beq.n	8002a6e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a44:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	441a      	add	r2, r3
 8002a56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	f040 8286 	bne.w	8002f86 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	695a      	ldr	r2, [r3, #20]
 8002a7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a82:	441a      	add	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	69da      	ldr	r2, [r3, #28]
 8002a8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a90:	441a      	add	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	6a1a      	ldr	r2, [r3, #32]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d309      	bcc.n	8002ab6 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	6a1a      	ldr	r2, [r3, #32]
 8002aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aae:	1ad2      	subs	r2, r2, r3
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	621a      	str	r2, [r3, #32]
 8002ab4:	e015      	b.n	8002ae2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d107      	bne.n	8002ace <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002abe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ac2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002acc:	e009      	b.n	8002ae2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	785b      	ldrb	r3, [r3, #1]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d155      	bne.n	8002b96 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	63bb      	str	r3, [r7, #56]	; 0x38
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	461a      	mov	r2, r3
 8002afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afe:	4413      	add	r3, r2
 8002b00:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	011a      	lsls	r2, r3, #4
 8002b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b10:	637b      	str	r3, [r7, #52]	; 0x34
 8002b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d112      	bne.n	8002b3e <HAL_PCD_EP_DB_Transmit+0x302>
 8002b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b26:	801a      	strh	r2, [r3, #0]
 8002b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b3a:	801a      	strh	r2, [r3, #0]
 8002b3c:	e047      	b.n	8002bce <HAL_PCD_EP_DB_Transmit+0x392>
 8002b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b40:	2b3e      	cmp	r3, #62	; 0x3e
 8002b42:	d811      	bhi.n	8002b68 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b46:	085b      	lsrs	r3, r3, #1
 8002b48:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d002      	beq.n	8002b5a <HAL_PCD_EP_DB_Transmit+0x31e>
 8002b54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b56:	3301      	adds	r3, #1
 8002b58:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	029b      	lsls	r3, r3, #10
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b64:	801a      	strh	r2, [r3, #0]
 8002b66:	e032      	b.n	8002bce <HAL_PCD_EP_DB_Transmit+0x392>
 8002b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b70:	f003 031f 	and.w	r3, r3, #31
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d102      	bne.n	8002b7e <HAL_PCD_EP_DB_Transmit+0x342>
 8002b78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	029b      	lsls	r3, r3, #10
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b92:	801a      	strh	r2, [r3, #0]
 8002b94:	e01b      	b.n	8002bce <HAL_PCD_EP_DB_Transmit+0x392>
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	785b      	ldrb	r3, [r3, #1]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d117      	bne.n	8002bce <HAL_PCD_EP_DB_Transmit+0x392>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	643b      	str	r3, [r7, #64]	; 0x40
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	461a      	mov	r2, r3
 8002bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bb2:	4413      	add	r3, r2
 8002bb4:	643b      	str	r3, [r7, #64]	; 0x40
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	011a      	lsls	r2, r3, #4
 8002bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bcc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	6959      	ldr	r1, [r3, #20]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	891a      	ldrh	r2, [r3, #8]
 8002bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	f004 f966 	bl	8006eae <USB_WritePMA>
 8002be2:	e1d0      	b.n	8002f86 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3306      	adds	r3, #6
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c0c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	699a      	ldr	r2, [r3, #24]
 8002c14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d307      	bcc.n	8002c2c <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	699a      	ldr	r2, [r3, #24]
 8002c20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c24:	1ad2      	subs	r2, r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	619a      	str	r2, [r3, #24]
 8002c2a:	e002      	b.n	8002c32 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f040 80c4 	bne.w	8002dc4 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	785b      	ldrb	r3, [r3, #1]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d126      	bne.n	8002c92 <HAL_PCD_EP_DB_Transmit+0x456>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	461a      	mov	r2, r3
 8002c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c58:	4413      	add	r3, r2
 8002c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	011a      	lsls	r2, r3, #4
 8002c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c64:	4413      	add	r3, r2
 8002c66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c7a:	801a      	strh	r2, [r3, #0]
 8002c7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c8e:	801a      	strh	r2, [r3, #0]
 8002c90:	e01a      	b.n	8002cc8 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	785b      	ldrb	r3, [r3, #1]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d116      	bne.n	8002cc8 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	677b      	str	r3, [r7, #116]	; 0x74
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	461a      	mov	r2, r3
 8002cac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cae:	4413      	add	r3, r2
 8002cb0:	677b      	str	r3, [r7, #116]	; 0x74
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	011a      	lsls	r2, r3, #4
 8002cb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cba:	4413      	add	r3, r2
 8002cbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002cc0:	673b      	str	r3, [r7, #112]	; 0x70
 8002cc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	785b      	ldrb	r3, [r3, #1]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d12f      	bne.n	8002d36 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cee:	4413      	add	r3, r2
 8002cf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	011a      	lsls	r2, r3, #4
 8002cfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cfe:	4413      	add	r3, r2
 8002d00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d1a:	801a      	strh	r2, [r3, #0]
 8002d1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d32:	801a      	strh	r2, [r3, #0]
 8002d34:	e017      	b.n	8002d66 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	785b      	ldrb	r3, [r3, #1]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d113      	bne.n	8002d66 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	461a      	mov	r2, r3
 8002d4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d4c:	4413      	add	r3, r2
 8002d4e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	011a      	lsls	r2, r3, #4
 8002d56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d58:	4413      	add	r3, r2
 8002d5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d62:	2200      	movs	r2, #0
 8002d64:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f006 fc7a 	bl	8009666 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d72:	88fb      	ldrh	r3, [r7, #6]
 8002d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f040 8104 	bne.w	8002f86 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d98:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	441a      	add	r2, r3
 8002daa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002db6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	8013      	strh	r3, [r2, #0]
 8002dc2:	e0e0      	b.n	8002f86 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002dc4:	88fb      	ldrh	r3, [r7, #6]
 8002dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d121      	bne.n	8002e12 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4413      	add	r3, r2
 8002ddc:	881b      	ldrh	r3, [r3, #0]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	441a      	add	r2, r3
 8002dfa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	f040 80b4 	bne.w	8002f86 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e26:	441a      	add	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	69da      	ldr	r2, [r3, #28]
 8002e30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e34:	441a      	add	r2, r3
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	6a1a      	ldr	r2, [r3, #32]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d309      	bcc.n	8002e5a <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	6a1a      	ldr	r2, [r3, #32]
 8002e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e52:	1ad2      	subs	r2, r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	621a      	str	r2, [r3, #32]
 8002e58:	e015      	b.n	8002e86 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d107      	bne.n	8002e72 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002e62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e66:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e70:	e009      	b.n	8002e86 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	667b      	str	r3, [r7, #100]	; 0x64
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	785b      	ldrb	r3, [r3, #1]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d155      	bne.n	8002f40 <HAL_PCD_EP_DB_Transmit+0x704>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ea8:	4413      	add	r3, r2
 8002eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	011a      	lsls	r2, r3, #4
 8002eb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002eba:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d112      	bne.n	8002ee8 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002ec2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ed0:	801a      	strh	r2, [r3, #0]
 8002ed2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ee4:	801a      	strh	r2, [r3, #0]
 8002ee6:	e044      	b.n	8002f72 <HAL_PCD_EP_DB_Transmit+0x736>
 8002ee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eea:	2b3e      	cmp	r3, #62	; 0x3e
 8002eec:	d811      	bhi.n	8002f12 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ef0:	085b      	lsrs	r3, r3, #1
 8002ef2:	657b      	str	r3, [r7, #84]	; 0x54
 8002ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f00:	3301      	adds	r3, #1
 8002f02:	657b      	str	r3, [r7, #84]	; 0x54
 8002f04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	029b      	lsls	r3, r3, #10
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f0e:	801a      	strh	r2, [r3, #0]
 8002f10:	e02f      	b.n	8002f72 <HAL_PCD_EP_DB_Transmit+0x736>
 8002f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f14:	095b      	lsrs	r3, r3, #5
 8002f16:	657b      	str	r3, [r7, #84]	; 0x54
 8002f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f1a:	f003 031f 	and.w	r3, r3, #31
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d102      	bne.n	8002f28 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f24:	3b01      	subs	r3, #1
 8002f26:	657b      	str	r3, [r7, #84]	; 0x54
 8002f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	029b      	lsls	r3, r3, #10
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f3c:	801a      	strh	r2, [r3, #0]
 8002f3e:	e018      	b.n	8002f72 <HAL_PCD_EP_DB_Transmit+0x736>
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	785b      	ldrb	r3, [r3, #1]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d114      	bne.n	8002f72 <HAL_PCD_EP_DB_Transmit+0x736>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	461a      	mov	r2, r3
 8002f54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f56:	4413      	add	r3, r2
 8002f58:	667b      	str	r3, [r7, #100]	; 0x64
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	011a      	lsls	r2, r3, #4
 8002f60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f62:	4413      	add	r3, r2
 8002f64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f68:	663b      	str	r3, [r7, #96]	; 0x60
 8002f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f70:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6818      	ldr	r0, [r3, #0]
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	6959      	ldr	r1, [r3, #20]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	895a      	ldrh	r2, [r3, #10]
 8002f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	f003 ff94 	bl	8006eae <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fa0:	823b      	strh	r3, [r7, #16]
 8002fa2:	8a3b      	ldrh	r3, [r7, #16]
 8002fa4:	f083 0310 	eor.w	r3, r3, #16
 8002fa8:	823b      	strh	r3, [r7, #16]
 8002faa:	8a3b      	ldrh	r3, [r7, #16]
 8002fac:	f083 0320 	eor.w	r3, r3, #32
 8002fb0:	823b      	strh	r3, [r7, #16]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	441a      	add	r2, r3
 8002fc0:	8a3b      	ldrh	r3, [r7, #16]
 8002fc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3788      	adds	r7, #136	; 0x88
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b087      	sub	sp, #28
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	607b      	str	r3, [r7, #4]
 8002fea:	460b      	mov	r3, r1
 8002fec:	817b      	strh	r3, [r7, #10]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002ff2:	897b      	ldrh	r3, [r7, #10]
 8002ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00b      	beq.n	8003016 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ffe:	897b      	ldrh	r3, [r7, #10]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	4613      	mov	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	4413      	add	r3, r2
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	e009      	b.n	800302a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003016:	897a      	ldrh	r2, [r7, #10]
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	4413      	add	r3, r2
 8003028:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800302a:	893b      	ldrh	r3, [r7, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d107      	bne.n	8003040 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2200      	movs	r2, #0
 8003034:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	b29a      	uxth	r2, r3
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	80da      	strh	r2, [r3, #6]
 800303e:	e00b      	b.n	8003058 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2201      	movs	r2, #1
 8003044:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	b29a      	uxth	r2, r3
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	0c1b      	lsrs	r3, r3, #16
 8003052:	b29a      	uxth	r2, r3
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	371c      	adds	r7, #28
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr

08003064 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e31d      	b.n	80036b2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003076:	4b94      	ldr	r3, [pc, #592]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 030c 	and.w	r3, r3, #12
 800307e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003080:	4b91      	ldr	r3, [pc, #580]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003088:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d07b      	beq.n	800318e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	2b08      	cmp	r3, #8
 800309a:	d006      	beq.n	80030aa <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	2b0c      	cmp	r3, #12
 80030a0:	d10f      	bne.n	80030c2 <HAL_RCC_OscConfig+0x5e>
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a8:	d10b      	bne.n	80030c2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030aa:	4b87      	ldr	r3, [pc, #540]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d06a      	beq.n	800318c <HAL_RCC_OscConfig+0x128>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d166      	bne.n	800318c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e2f7      	b.n	80036b2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d106      	bne.n	80030d8 <HAL_RCC_OscConfig+0x74>
 80030ca:	4b7f      	ldr	r3, [pc, #508]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a7e      	ldr	r2, [pc, #504]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 80030d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	e02d      	b.n	8003134 <HAL_RCC_OscConfig+0xd0>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10c      	bne.n	80030fa <HAL_RCC_OscConfig+0x96>
 80030e0:	4b79      	ldr	r3, [pc, #484]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a78      	ldr	r2, [pc, #480]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 80030e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	4b76      	ldr	r3, [pc, #472]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a75      	ldr	r2, [pc, #468]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 80030f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030f6:	6013      	str	r3, [r2, #0]
 80030f8:	e01c      	b.n	8003134 <HAL_RCC_OscConfig+0xd0>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b05      	cmp	r3, #5
 8003100:	d10c      	bne.n	800311c <HAL_RCC_OscConfig+0xb8>
 8003102:	4b71      	ldr	r3, [pc, #452]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a70      	ldr	r2, [pc, #448]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 8003108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	4b6e      	ldr	r3, [pc, #440]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a6d      	ldr	r2, [pc, #436]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 8003114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	e00b      	b.n	8003134 <HAL_RCC_OscConfig+0xd0>
 800311c:	4b6a      	ldr	r3, [pc, #424]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a69      	ldr	r2, [pc, #420]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 8003122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	4b67      	ldr	r3, [pc, #412]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a66      	ldr	r2, [pc, #408]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 800312e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d013      	beq.n	8003164 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313c:	f7fe f854 	bl	80011e8 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003144:	f7fe f850 	bl	80011e8 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b64      	cmp	r3, #100	; 0x64
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e2ad      	b.n	80036b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003156:	4b5c      	ldr	r3, [pc, #368]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0xe0>
 8003162:	e014      	b.n	800318e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003164:	f7fe f840 	bl	80011e8 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800316c:	f7fe f83c 	bl	80011e8 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b64      	cmp	r3, #100	; 0x64
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e299      	b.n	80036b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800317e:	4b52      	ldr	r3, [pc, #328]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x108>
 800318a:	e000      	b.n	800318e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800318c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d05a      	beq.n	8003250 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	2b04      	cmp	r3, #4
 800319e:	d005      	beq.n	80031ac <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2b0c      	cmp	r3, #12
 80031a4:	d119      	bne.n	80031da <HAL_RCC_OscConfig+0x176>
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d116      	bne.n	80031da <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ac:	4b46      	ldr	r3, [pc, #280]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <HAL_RCC_OscConfig+0x160>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e276      	b.n	80036b2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c4:	4b40      	ldr	r3, [pc, #256]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	021b      	lsls	r3, r3, #8
 80031d2:	493d      	ldr	r1, [pc, #244]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d8:	e03a      	b.n	8003250 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d020      	beq.n	8003224 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031e2:	4b3a      	ldr	r3, [pc, #232]	; (80032cc <HAL_RCC_OscConfig+0x268>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e8:	f7fd fffe 	bl	80011e8 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031f0:	f7fd fffa 	bl	80011e8 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e257      	b.n	80036b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003202:	4b31      	ldr	r3, [pc, #196]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320e:	4b2e      	ldr	r3, [pc, #184]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	021b      	lsls	r3, r3, #8
 800321c:	492a      	ldr	r1, [pc, #168]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 800321e:	4313      	orrs	r3, r2
 8003220:	604b      	str	r3, [r1, #4]
 8003222:	e015      	b.n	8003250 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003224:	4b29      	ldr	r3, [pc, #164]	; (80032cc <HAL_RCC_OscConfig+0x268>)
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322a:	f7fd ffdd 	bl	80011e8 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003232:	f7fd ffd9 	bl	80011e8 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e236      	b.n	80036b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003244:	4b20      	ldr	r3, [pc, #128]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1f0      	bne.n	8003232 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0310 	and.w	r3, r3, #16
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 80b8 	beq.w	80033ce <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d170      	bne.n	8003346 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003264:	4b18      	ldr	r3, [pc, #96]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800326c:	2b00      	cmp	r3, #0
 800326e:	d005      	beq.n	800327c <HAL_RCC_OscConfig+0x218>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e21a      	b.n	80036b2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1a      	ldr	r2, [r3, #32]
 8003280:	4b11      	ldr	r3, [pc, #68]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003288:	429a      	cmp	r2, r3
 800328a:	d921      	bls.n	80032d0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fc7d 	bl	8003b90 <RCC_SetFlashLatencyFromMSIRange>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e208      	b.n	80036b2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032a0:	4b09      	ldr	r3, [pc, #36]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	4906      	ldr	r1, [pc, #24]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032b2:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	061b      	lsls	r3, r3, #24
 80032c0:	4901      	ldr	r1, [pc, #4]	; (80032c8 <HAL_RCC_OscConfig+0x264>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	604b      	str	r3, [r1, #4]
 80032c6:	e020      	b.n	800330a <HAL_RCC_OscConfig+0x2a6>
 80032c8:	40023800 	.word	0x40023800
 80032cc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032d0:	4b99      	ldr	r3, [pc, #612]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	4996      	ldr	r1, [pc, #600]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032e2:	4b95      	ldr	r3, [pc, #596]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	061b      	lsls	r3, r3, #24
 80032f0:	4991      	ldr	r1, [pc, #580]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fc48 	bl	8003b90 <RCC_SetFlashLatencyFromMSIRange>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e1d3      	b.n	80036b2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	0b5b      	lsrs	r3, r3, #13
 8003310:	3301      	adds	r3, #1
 8003312:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800331a:	4a87      	ldr	r2, [pc, #540]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 800331c:	6892      	ldr	r2, [r2, #8]
 800331e:	0912      	lsrs	r2, r2, #4
 8003320:	f002 020f 	and.w	r2, r2, #15
 8003324:	4985      	ldr	r1, [pc, #532]	; (800353c <HAL_RCC_OscConfig+0x4d8>)
 8003326:	5c8a      	ldrb	r2, [r1, r2]
 8003328:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800332a:	4a85      	ldr	r2, [pc, #532]	; (8003540 <HAL_RCC_OscConfig+0x4dc>)
 800332c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800332e:	4b85      	ldr	r3, [pc, #532]	; (8003544 <HAL_RCC_OscConfig+0x4e0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7fd ff0c 	bl	8001150 <HAL_InitTick>
 8003338:	4603      	mov	r3, r0
 800333a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d045      	beq.n	80033ce <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003342:	7bfb      	ldrb	r3, [r7, #15]
 8003344:	e1b5      	b.n	80036b2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d029      	beq.n	80033a2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800334e:	4b7e      	ldr	r3, [pc, #504]	; (8003548 <HAL_RCC_OscConfig+0x4e4>)
 8003350:	2201      	movs	r2, #1
 8003352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003354:	f7fd ff48 	bl	80011e8 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800335c:	f7fd ff44 	bl	80011e8 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e1a1      	b.n	80036b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800336e:	4b72      	ldr	r3, [pc, #456]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800337a:	4b6f      	ldr	r3, [pc, #444]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	496c      	ldr	r1, [pc, #432]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 8003388:	4313      	orrs	r3, r2
 800338a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800338c:	4b6a      	ldr	r3, [pc, #424]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	061b      	lsls	r3, r3, #24
 800339a:	4967      	ldr	r1, [pc, #412]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 800339c:	4313      	orrs	r3, r2
 800339e:	604b      	str	r3, [r1, #4]
 80033a0:	e015      	b.n	80033ce <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033a2:	4b69      	ldr	r3, [pc, #420]	; (8003548 <HAL_RCC_OscConfig+0x4e4>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a8:	f7fd ff1e 	bl	80011e8 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033b0:	f7fd ff1a 	bl	80011e8 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e177      	b.n	80036b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80033c2:	4b5d      	ldr	r3, [pc, #372]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f0      	bne.n	80033b0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d030      	beq.n	800343c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d016      	beq.n	8003410 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033e2:	4b5a      	ldr	r3, [pc, #360]	; (800354c <HAL_RCC_OscConfig+0x4e8>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e8:	f7fd fefe 	bl	80011e8 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033f0:	f7fd fefa 	bl	80011e8 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e157      	b.n	80036b2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003402:	4b4d      	ldr	r3, [pc, #308]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 8003404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0x38c>
 800340e:	e015      	b.n	800343c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003410:	4b4e      	ldr	r3, [pc, #312]	; (800354c <HAL_RCC_OscConfig+0x4e8>)
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003416:	f7fd fee7 	bl	80011e8 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800341e:	f7fd fee3 	bl	80011e8 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e140      	b.n	80036b2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003430:	4b41      	ldr	r3, [pc, #260]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 8003432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f0      	bne.n	800341e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 80b5 	beq.w	80035b4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800344a:	2300      	movs	r3, #0
 800344c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800344e:	4b3a      	ldr	r3, [pc, #232]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10d      	bne.n	8003476 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800345a:	4b37      	ldr	r3, [pc, #220]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	4a36      	ldr	r2, [pc, #216]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 8003460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003464:	6253      	str	r3, [r2, #36]	; 0x24
 8003466:	4b34      	ldr	r3, [pc, #208]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346e:	60bb      	str	r3, [r7, #8]
 8003470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003472:	2301      	movs	r3, #1
 8003474:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003476:	4b36      	ldr	r3, [pc, #216]	; (8003550 <HAL_RCC_OscConfig+0x4ec>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347e:	2b00      	cmp	r3, #0
 8003480:	d118      	bne.n	80034b4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003482:	4b33      	ldr	r3, [pc, #204]	; (8003550 <HAL_RCC_OscConfig+0x4ec>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a32      	ldr	r2, [pc, #200]	; (8003550 <HAL_RCC_OscConfig+0x4ec>)
 8003488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800348c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800348e:	f7fd feab 	bl	80011e8 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003496:	f7fd fea7 	bl	80011e8 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b64      	cmp	r3, #100	; 0x64
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e104      	b.n	80036b2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a8:	4b29      	ldr	r3, [pc, #164]	; (8003550 <HAL_RCC_OscConfig+0x4ec>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d106      	bne.n	80034ca <HAL_RCC_OscConfig+0x466>
 80034bc:	4b1e      	ldr	r3, [pc, #120]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 80034be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c0:	4a1d      	ldr	r2, [pc, #116]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 80034c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c6:	6353      	str	r3, [r2, #52]	; 0x34
 80034c8:	e02d      	b.n	8003526 <HAL_RCC_OscConfig+0x4c2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10c      	bne.n	80034ec <HAL_RCC_OscConfig+0x488>
 80034d2:	4b19      	ldr	r3, [pc, #100]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 80034d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d6:	4a18      	ldr	r2, [pc, #96]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 80034d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034dc:	6353      	str	r3, [r2, #52]	; 0x34
 80034de:	4b16      	ldr	r3, [pc, #88]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 80034e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e2:	4a15      	ldr	r2, [pc, #84]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 80034e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034e8:	6353      	str	r3, [r2, #52]	; 0x34
 80034ea:	e01c      	b.n	8003526 <HAL_RCC_OscConfig+0x4c2>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2b05      	cmp	r3, #5
 80034f2:	d10c      	bne.n	800350e <HAL_RCC_OscConfig+0x4aa>
 80034f4:	4b10      	ldr	r3, [pc, #64]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 80034f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f8:	4a0f      	ldr	r2, [pc, #60]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 80034fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034fe:	6353      	str	r3, [r2, #52]	; 0x34
 8003500:	4b0d      	ldr	r3, [pc, #52]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 8003502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003504:	4a0c      	ldr	r2, [pc, #48]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 8003506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800350a:	6353      	str	r3, [r2, #52]	; 0x34
 800350c:	e00b      	b.n	8003526 <HAL_RCC_OscConfig+0x4c2>
 800350e:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 8003510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003512:	4a09      	ldr	r2, [pc, #36]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 8003514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003518:	6353      	str	r3, [r2, #52]	; 0x34
 800351a:	4b07      	ldr	r3, [pc, #28]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 800351c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351e:	4a06      	ldr	r2, [pc, #24]	; (8003538 <HAL_RCC_OscConfig+0x4d4>)
 8003520:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003524:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d024      	beq.n	8003578 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352e:	f7fd fe5b 	bl	80011e8 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003534:	e019      	b.n	800356a <HAL_RCC_OscConfig+0x506>
 8003536:	bf00      	nop
 8003538:	40023800 	.word	0x40023800
 800353c:	0800b63c 	.word	0x0800b63c
 8003540:	20000164 	.word	0x20000164
 8003544:	20000168 	.word	0x20000168
 8003548:	42470020 	.word	0x42470020
 800354c:	42470680 	.word	0x42470680
 8003550:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003554:	f7fd fe48 	bl	80011e8 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003562:	4293      	cmp	r3, r2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e0a3      	b.n	80036b2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800356a:	4b54      	ldr	r3, [pc, #336]	; (80036bc <HAL_RCC_OscConfig+0x658>)
 800356c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0ee      	beq.n	8003554 <HAL_RCC_OscConfig+0x4f0>
 8003576:	e014      	b.n	80035a2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003578:	f7fd fe36 	bl	80011e8 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800357e:	e00a      	b.n	8003596 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003580:	f7fd fe32 	bl	80011e8 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	f241 3288 	movw	r2, #5000	; 0x1388
 800358e:	4293      	cmp	r3, r2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e08d      	b.n	80036b2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003596:	4b49      	ldr	r3, [pc, #292]	; (80036bc <HAL_RCC_OscConfig+0x658>)
 8003598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1ee      	bne.n	8003580 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035a2:	7ffb      	ldrb	r3, [r7, #31]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d105      	bne.n	80035b4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035a8:	4b44      	ldr	r3, [pc, #272]	; (80036bc <HAL_RCC_OscConfig+0x658>)
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	4a43      	ldr	r2, [pc, #268]	; (80036bc <HAL_RCC_OscConfig+0x658>)
 80035ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d079      	beq.n	80036b0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	2b0c      	cmp	r3, #12
 80035c0:	d056      	beq.n	8003670 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d13b      	bne.n	8003642 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ca:	4b3d      	ldr	r3, [pc, #244]	; (80036c0 <HAL_RCC_OscConfig+0x65c>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d0:	f7fd fe0a 	bl	80011e8 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d8:	f7fd fe06 	bl	80011e8 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e063      	b.n	80036b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035ea:	4b34      	ldr	r3, [pc, #208]	; (80036bc <HAL_RCC_OscConfig+0x658>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f0      	bne.n	80035d8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035f6:	4b31      	ldr	r3, [pc, #196]	; (80036bc <HAL_RCC_OscConfig+0x658>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003606:	4319      	orrs	r1, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	430b      	orrs	r3, r1
 800360e:	492b      	ldr	r1, [pc, #172]	; (80036bc <HAL_RCC_OscConfig+0x658>)
 8003610:	4313      	orrs	r3, r2
 8003612:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003614:	4b2a      	ldr	r3, [pc, #168]	; (80036c0 <HAL_RCC_OscConfig+0x65c>)
 8003616:	2201      	movs	r2, #1
 8003618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361a:	f7fd fde5 	bl	80011e8 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003622:	f7fd fde1 	bl	80011e8 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e03e      	b.n	80036b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003634:	4b21      	ldr	r3, [pc, #132]	; (80036bc <HAL_RCC_OscConfig+0x658>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0f0      	beq.n	8003622 <HAL_RCC_OscConfig+0x5be>
 8003640:	e036      	b.n	80036b0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003642:	4b1f      	ldr	r3, [pc, #124]	; (80036c0 <HAL_RCC_OscConfig+0x65c>)
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003648:	f7fd fdce 	bl	80011e8 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003650:	f7fd fdca 	bl	80011e8 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e027      	b.n	80036b2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003662:	4b16      	ldr	r3, [pc, #88]	; (80036bc <HAL_RCC_OscConfig+0x658>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f0      	bne.n	8003650 <HAL_RCC_OscConfig+0x5ec>
 800366e:	e01f      	b.n	80036b0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e01a      	b.n	80036b2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800367c:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <HAL_RCC_OscConfig+0x658>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368c:	429a      	cmp	r2, r3
 800368e:	d10d      	bne.n	80036ac <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369a:	429a      	cmp	r2, r3
 800369c:	d106      	bne.n	80036ac <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d001      	beq.n	80036b0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e000      	b.n	80036b2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3720      	adds	r7, #32
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40023800 	.word	0x40023800
 80036c0:	42470060 	.word	0x42470060

080036c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e11a      	b.n	800390e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036d8:	4b8f      	ldr	r3, [pc, #572]	; (8003918 <HAL_RCC_ClockConfig+0x254>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d919      	bls.n	800371a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d105      	bne.n	80036f8 <HAL_RCC_ClockConfig+0x34>
 80036ec:	4b8a      	ldr	r3, [pc, #552]	; (8003918 <HAL_RCC_ClockConfig+0x254>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a89      	ldr	r2, [pc, #548]	; (8003918 <HAL_RCC_ClockConfig+0x254>)
 80036f2:	f043 0304 	orr.w	r3, r3, #4
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	4b87      	ldr	r3, [pc, #540]	; (8003918 <HAL_RCC_ClockConfig+0x254>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f023 0201 	bic.w	r2, r3, #1
 8003700:	4985      	ldr	r1, [pc, #532]	; (8003918 <HAL_RCC_ClockConfig+0x254>)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	4313      	orrs	r3, r2
 8003706:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003708:	4b83      	ldr	r3, [pc, #524]	; (8003918 <HAL_RCC_ClockConfig+0x254>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d001      	beq.n	800371a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e0f9      	b.n	800390e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d008      	beq.n	8003738 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003726:	4b7d      	ldr	r3, [pc, #500]	; (800391c <HAL_RCC_ClockConfig+0x258>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	497a      	ldr	r1, [pc, #488]	; (800391c <HAL_RCC_ClockConfig+0x258>)
 8003734:	4313      	orrs	r3, r2
 8003736:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 808e 	beq.w	8003862 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d107      	bne.n	800375e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800374e:	4b73      	ldr	r3, [pc, #460]	; (800391c <HAL_RCC_ClockConfig+0x258>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d121      	bne.n	800379e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e0d7      	b.n	800390e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b03      	cmp	r3, #3
 8003764:	d107      	bne.n	8003776 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003766:	4b6d      	ldr	r3, [pc, #436]	; (800391c <HAL_RCC_ClockConfig+0x258>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d115      	bne.n	800379e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e0cb      	b.n	800390e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d107      	bne.n	800378e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800377e:	4b67      	ldr	r3, [pc, #412]	; (800391c <HAL_RCC_ClockConfig+0x258>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d109      	bne.n	800379e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e0bf      	b.n	800390e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800378e:	4b63      	ldr	r3, [pc, #396]	; (800391c <HAL_RCC_ClockConfig+0x258>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e0b7      	b.n	800390e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800379e:	4b5f      	ldr	r3, [pc, #380]	; (800391c <HAL_RCC_ClockConfig+0x258>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f023 0203 	bic.w	r2, r3, #3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	495c      	ldr	r1, [pc, #368]	; (800391c <HAL_RCC_ClockConfig+0x258>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037b0:	f7fd fd1a 	bl	80011e8 <HAL_GetTick>
 80037b4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d112      	bne.n	80037e4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80037be:	e00a      	b.n	80037d6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c0:	f7fd fd12 	bl	80011e8 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e09b      	b.n	800390e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80037d6:	4b51      	ldr	r3, [pc, #324]	; (800391c <HAL_RCC_ClockConfig+0x258>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 030c 	and.w	r3, r3, #12
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d1ee      	bne.n	80037c0 <HAL_RCC_ClockConfig+0xfc>
 80037e2:	e03e      	b.n	8003862 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d112      	bne.n	8003812 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037ec:	e00a      	b.n	8003804 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ee:	f7fd fcfb 	bl	80011e8 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e084      	b.n	800390e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003804:	4b45      	ldr	r3, [pc, #276]	; (800391c <HAL_RCC_ClockConfig+0x258>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 030c 	and.w	r3, r3, #12
 800380c:	2b0c      	cmp	r3, #12
 800380e:	d1ee      	bne.n	80037ee <HAL_RCC_ClockConfig+0x12a>
 8003810:	e027      	b.n	8003862 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d11d      	bne.n	8003856 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800381a:	e00a      	b.n	8003832 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800381c:	f7fd fce4 	bl	80011e8 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	f241 3288 	movw	r2, #5000	; 0x1388
 800382a:	4293      	cmp	r3, r2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e06d      	b.n	800390e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003832:	4b3a      	ldr	r3, [pc, #232]	; (800391c <HAL_RCC_ClockConfig+0x258>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b04      	cmp	r3, #4
 800383c:	d1ee      	bne.n	800381c <HAL_RCC_ClockConfig+0x158>
 800383e:	e010      	b.n	8003862 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003840:	f7fd fcd2 	bl	80011e8 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f241 3288 	movw	r2, #5000	; 0x1388
 800384e:	4293      	cmp	r3, r2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e05b      	b.n	800390e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003856:	4b31      	ldr	r3, [pc, #196]	; (800391c <HAL_RCC_ClockConfig+0x258>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 030c 	and.w	r3, r3, #12
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1ee      	bne.n	8003840 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003862:	4b2d      	ldr	r3, [pc, #180]	; (8003918 <HAL_RCC_ClockConfig+0x254>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d219      	bcs.n	80038a4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d105      	bne.n	8003882 <HAL_RCC_ClockConfig+0x1be>
 8003876:	4b28      	ldr	r3, [pc, #160]	; (8003918 <HAL_RCC_ClockConfig+0x254>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a27      	ldr	r2, [pc, #156]	; (8003918 <HAL_RCC_ClockConfig+0x254>)
 800387c:	f043 0304 	orr.w	r3, r3, #4
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	4b25      	ldr	r3, [pc, #148]	; (8003918 <HAL_RCC_ClockConfig+0x254>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f023 0201 	bic.w	r2, r3, #1
 800388a:	4923      	ldr	r1, [pc, #140]	; (8003918 <HAL_RCC_ClockConfig+0x254>)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003892:	4b21      	ldr	r3, [pc, #132]	; (8003918 <HAL_RCC_ClockConfig+0x254>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d001      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e034      	b.n	800390e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d008      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038b0:	4b1a      	ldr	r3, [pc, #104]	; (800391c <HAL_RCC_ClockConfig+0x258>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	4917      	ldr	r1, [pc, #92]	; (800391c <HAL_RCC_ClockConfig+0x258>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d009      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ce:	4b13      	ldr	r3, [pc, #76]	; (800391c <HAL_RCC_ClockConfig+0x258>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	490f      	ldr	r1, [pc, #60]	; (800391c <HAL_RCC_ClockConfig+0x258>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038e2:	f000 f823 	bl	800392c <HAL_RCC_GetSysClockFreq>
 80038e6:	4602      	mov	r2, r0
 80038e8:	4b0c      	ldr	r3, [pc, #48]	; (800391c <HAL_RCC_ClockConfig+0x258>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	091b      	lsrs	r3, r3, #4
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	490b      	ldr	r1, [pc, #44]	; (8003920 <HAL_RCC_ClockConfig+0x25c>)
 80038f4:	5ccb      	ldrb	r3, [r1, r3]
 80038f6:	fa22 f303 	lsr.w	r3, r2, r3
 80038fa:	4a0a      	ldr	r2, [pc, #40]	; (8003924 <HAL_RCC_ClockConfig+0x260>)
 80038fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038fe:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <HAL_RCC_ClockConfig+0x264>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f7fd fc24 	bl	8001150 <HAL_InitTick>
 8003908:	4603      	mov	r3, r0
 800390a:	72fb      	strb	r3, [r7, #11]

  return status;
 800390c:	7afb      	ldrb	r3, [r7, #11]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40023c00 	.word	0x40023c00
 800391c:	40023800 	.word	0x40023800
 8003920:	0800b63c 	.word	0x0800b63c
 8003924:	20000164 	.word	0x20000164
 8003928:	20000168 	.word	0x20000168

0800392c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800392c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003930:	b092      	sub	sp, #72	; 0x48
 8003932:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003934:	4b79      	ldr	r3, [pc, #484]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800393a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800393c:	f003 030c 	and.w	r3, r3, #12
 8003940:	2b0c      	cmp	r3, #12
 8003942:	d00d      	beq.n	8003960 <HAL_RCC_GetSysClockFreq+0x34>
 8003944:	2b0c      	cmp	r3, #12
 8003946:	f200 80d5 	bhi.w	8003af4 <HAL_RCC_GetSysClockFreq+0x1c8>
 800394a:	2b04      	cmp	r3, #4
 800394c:	d002      	beq.n	8003954 <HAL_RCC_GetSysClockFreq+0x28>
 800394e:	2b08      	cmp	r3, #8
 8003950:	d003      	beq.n	800395a <HAL_RCC_GetSysClockFreq+0x2e>
 8003952:	e0cf      	b.n	8003af4 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003954:	4b72      	ldr	r3, [pc, #456]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003956:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003958:	e0da      	b.n	8003b10 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800395a:	4b72      	ldr	r3, [pc, #456]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800395c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800395e:	e0d7      	b.n	8003b10 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003962:	0c9b      	lsrs	r3, r3, #18
 8003964:	f003 020f 	and.w	r2, r3, #15
 8003968:	4b6f      	ldr	r3, [pc, #444]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800396a:	5c9b      	ldrb	r3, [r3, r2]
 800396c:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800396e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003970:	0d9b      	lsrs	r3, r3, #22
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	3301      	adds	r3, #1
 8003978:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800397a:	4b68      	ldr	r3, [pc, #416]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d05d      	beq.n	8003a42 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003988:	2200      	movs	r2, #0
 800398a:	4618      	mov	r0, r3
 800398c:	4611      	mov	r1, r2
 800398e:	4604      	mov	r4, r0
 8003990:	460d      	mov	r5, r1
 8003992:	4622      	mov	r2, r4
 8003994:	462b      	mov	r3, r5
 8003996:	f04f 0000 	mov.w	r0, #0
 800399a:	f04f 0100 	mov.w	r1, #0
 800399e:	0159      	lsls	r1, r3, #5
 80039a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039a4:	0150      	lsls	r0, r2, #5
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	4621      	mov	r1, r4
 80039ac:	1a51      	subs	r1, r2, r1
 80039ae:	6139      	str	r1, [r7, #16]
 80039b0:	4629      	mov	r1, r5
 80039b2:	eb63 0301 	sbc.w	r3, r3, r1
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039c4:	4659      	mov	r1, fp
 80039c6:	018b      	lsls	r3, r1, #6
 80039c8:	4651      	mov	r1, sl
 80039ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039ce:	4651      	mov	r1, sl
 80039d0:	018a      	lsls	r2, r1, #6
 80039d2:	46d4      	mov	ip, sl
 80039d4:	ebb2 080c 	subs.w	r8, r2, ip
 80039d8:	4659      	mov	r1, fp
 80039da:	eb63 0901 	sbc.w	r9, r3, r1
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	f04f 0300 	mov.w	r3, #0
 80039e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039f2:	4690      	mov	r8, r2
 80039f4:	4699      	mov	r9, r3
 80039f6:	4623      	mov	r3, r4
 80039f8:	eb18 0303 	adds.w	r3, r8, r3
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	462b      	mov	r3, r5
 8003a00:	eb49 0303 	adc.w	r3, r9, r3
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	f04f 0300 	mov.w	r3, #0
 8003a0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a12:	4629      	mov	r1, r5
 8003a14:	024b      	lsls	r3, r1, #9
 8003a16:	4620      	mov	r0, r4
 8003a18:	4629      	mov	r1, r5
 8003a1a:	4604      	mov	r4, r0
 8003a1c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003a20:	4601      	mov	r1, r0
 8003a22:	024a      	lsls	r2, r1, #9
 8003a24:	4610      	mov	r0, r2
 8003a26:	4619      	mov	r1, r3
 8003a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a34:	f7fc fbaa 	bl	800018c <__aeabi_uldivmod>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a40:	e055      	b.n	8003aee <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a44:	2200      	movs	r2, #0
 8003a46:	623b      	str	r3, [r7, #32]
 8003a48:	627a      	str	r2, [r7, #36]	; 0x24
 8003a4a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a4e:	4642      	mov	r2, r8
 8003a50:	464b      	mov	r3, r9
 8003a52:	f04f 0000 	mov.w	r0, #0
 8003a56:	f04f 0100 	mov.w	r1, #0
 8003a5a:	0159      	lsls	r1, r3, #5
 8003a5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a60:	0150      	lsls	r0, r2, #5
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	46c4      	mov	ip, r8
 8003a68:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003a6c:	4640      	mov	r0, r8
 8003a6e:	4649      	mov	r1, r9
 8003a70:	468c      	mov	ip, r1
 8003a72:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a82:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a86:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a8a:	ebb2 040a 	subs.w	r4, r2, sl
 8003a8e:	eb63 050b 	sbc.w	r5, r3, fp
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	00eb      	lsls	r3, r5, #3
 8003a9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aa0:	00e2      	lsls	r2, r4, #3
 8003aa2:	4614      	mov	r4, r2
 8003aa4:	461d      	mov	r5, r3
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	18e3      	adds	r3, r4, r3
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	460b      	mov	r3, r1
 8003aae:	eb45 0303 	adc.w	r3, r5, r3
 8003ab2:	607b      	str	r3, [r7, #4]
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	028b      	lsls	r3, r1, #10
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	4604      	mov	r4, r0
 8003aca:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003ace:	4601      	mov	r1, r0
 8003ad0:	028a      	lsls	r2, r1, #10
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad8:	2200      	movs	r2, #0
 8003ada:	61bb      	str	r3, [r7, #24]
 8003adc:	61fa      	str	r2, [r7, #28]
 8003ade:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ae2:	f7fc fb53 	bl	800018c <__aeabi_uldivmod>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4613      	mov	r3, r2
 8003aec:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8003aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003af0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003af2:	e00d      	b.n	8003b10 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003af4:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	0b5b      	lsrs	r3, r3, #13
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b02:	3301      	adds	r3, #1
 8003b04:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003b0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3748      	adds	r7, #72	; 0x48
 8003b16:	46bd      	mov	sp, r7
 8003b18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	00f42400 	.word	0x00f42400
 8003b24:	007a1200 	.word	0x007a1200
 8003b28:	0800b630 	.word	0x0800b630

08003b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b30:	4b02      	ldr	r3, [pc, #8]	; (8003b3c <HAL_RCC_GetHCLKFreq+0x10>)
 8003b32:	681b      	ldr	r3, [r3, #0]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr
 8003b3c:	20000164 	.word	0x20000164

08003b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b44:	f7ff fff2 	bl	8003b2c <HAL_RCC_GetHCLKFreq>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	0a1b      	lsrs	r3, r3, #8
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	4903      	ldr	r1, [pc, #12]	; (8003b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b56:	5ccb      	ldrb	r3, [r1, r3]
 8003b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40023800 	.word	0x40023800
 8003b64:	0800b64c 	.word	0x0800b64c

08003b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b6c:	f7ff ffde 	bl	8003b2c <HAL_RCC_GetHCLKFreq>
 8003b70:	4602      	mov	r2, r0
 8003b72:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	0adb      	lsrs	r3, r3, #11
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	4903      	ldr	r1, [pc, #12]	; (8003b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b7e:	5ccb      	ldrb	r3, [r1, r3]
 8003b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	0800b64c 	.word	0x0800b64c

08003b90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b98:	2300      	movs	r3, #0
 8003b9a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003b9c:	4b29      	ldr	r3, [pc, #164]	; (8003c44 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d12c      	bne.n	8003c02 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ba8:	4b26      	ldr	r3, [pc, #152]	; (8003c44 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003bb4:	4b24      	ldr	r3, [pc, #144]	; (8003c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	e016      	b.n	8003bee <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc0:	4b20      	ldr	r3, [pc, #128]	; (8003c44 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	4a1f      	ldr	r2, [pc, #124]	; (8003c44 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bca:	6253      	str	r3, [r2, #36]	; 0x24
 8003bcc:	4b1d      	ldr	r3, [pc, #116]	; (8003c44 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003bd8:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003be0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be2:	4b18      	ldr	r3, [pc, #96]	; (8003c44 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	4a17      	ldr	r2, [pc, #92]	; (8003c44 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bec:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003bf4:	d105      	bne.n	8003c02 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003bfc:	d101      	bne.n	8003c02 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003bfe:	2301      	movs	r3, #1
 8003c00:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d105      	bne.n	8003c14 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003c08:	4b10      	ldr	r3, [pc, #64]	; (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a0f      	ldr	r2, [pc, #60]	; (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c0e:	f043 0304 	orr.w	r3, r3, #4
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	4b0d      	ldr	r3, [pc, #52]	; (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f023 0201 	bic.w	r2, r3, #1
 8003c1c:	490b      	ldr	r1, [pc, #44]	; (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c24:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d001      	beq.n	8003c36 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	371c      	adds	r7, #28
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40023800 	.word	0x40023800
 8003c48:	40007000 	.word	0x40007000
 8003c4c:	40023c00 	.word	0x40023c00

08003c50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e07b      	b.n	8003d5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d108      	bne.n	8003c7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c72:	d009      	beq.n	8003c88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	61da      	str	r2, [r3, #28]
 8003c7a:	e005      	b.n	8003c88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7fd f88a 	bl	8000dbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0c:	ea42 0103 	orr.w	r1, r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	0c1b      	lsrs	r3, r3, #16
 8003d26:	f003 0104 	and.w	r1, r3, #4
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	f003 0210 	and.w	r2, r3, #16
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	69da      	ldr	r2, [r3, #28]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b08c      	sub	sp, #48	; 0x30
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	60f8      	str	r0, [r7, #12]
 8003d6a:	60b9      	str	r1, [r7, #8]
 8003d6c:	607a      	str	r2, [r7, #4]
 8003d6e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d70:	2301      	movs	r3, #1
 8003d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_SPI_TransmitReceive+0x26>
 8003d84:	2302      	movs	r3, #2
 8003d86:	e18a      	b.n	800409e <HAL_SPI_TransmitReceive+0x33c>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d90:	f7fd fa2a 	bl	80011e8 <HAL_GetTick>
 8003d94:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003da6:	887b      	ldrh	r3, [r7, #2]
 8003da8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003daa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d00f      	beq.n	8003dd2 <HAL_SPI_TransmitReceive+0x70>
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003db8:	d107      	bne.n	8003dca <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d103      	bne.n	8003dca <HAL_SPI_TransmitReceive+0x68>
 8003dc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d003      	beq.n	8003dd2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003dca:	2302      	movs	r3, #2
 8003dcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003dd0:	e15b      	b.n	800408a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d005      	beq.n	8003de4 <HAL_SPI_TransmitReceive+0x82>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <HAL_SPI_TransmitReceive+0x82>
 8003dde:	887b      	ldrh	r3, [r7, #2]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d103      	bne.n	8003dec <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003dea:	e14e      	b.n	800408a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d003      	beq.n	8003e00 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2205      	movs	r2, #5
 8003dfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	887a      	ldrh	r2, [r7, #2]
 8003e10:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	887a      	ldrh	r2, [r7, #2]
 8003e16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	887a      	ldrh	r2, [r7, #2]
 8003e22:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	887a      	ldrh	r2, [r7, #2]
 8003e28:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e40:	2b40      	cmp	r3, #64	; 0x40
 8003e42:	d007      	beq.n	8003e54 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e5c:	d178      	bne.n	8003f50 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <HAL_SPI_TransmitReceive+0x10a>
 8003e66:	8b7b      	ldrh	r3, [r7, #26]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d166      	bne.n	8003f3a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e70:	881a      	ldrh	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7c:	1c9a      	adds	r2, r3, #2
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e90:	e053      	b.n	8003f3a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d11b      	bne.n	8003ed8 <HAL_SPI_TransmitReceive+0x176>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d016      	beq.n	8003ed8 <HAL_SPI_TransmitReceive+0x176>
 8003eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d113      	bne.n	8003ed8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb4:	881a      	ldrh	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	1c9a      	adds	r2, r3, #2
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d119      	bne.n	8003f1a <HAL_SPI_TransmitReceive+0x1b8>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d014      	beq.n	8003f1a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efa:	b292      	uxth	r2, r2
 8003efc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f02:	1c9a      	adds	r2, r3, #2
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f16:	2301      	movs	r3, #1
 8003f18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f1a:	f7fd f965 	bl	80011e8 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d807      	bhi.n	8003f3a <HAL_SPI_TransmitReceive+0x1d8>
 8003f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f30:	d003      	beq.n	8003f3a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f38:	e0a7      	b.n	800408a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1a6      	bne.n	8003e92 <HAL_SPI_TransmitReceive+0x130>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1a1      	bne.n	8003e92 <HAL_SPI_TransmitReceive+0x130>
 8003f4e:	e07c      	b.n	800404a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <HAL_SPI_TransmitReceive+0x1fc>
 8003f58:	8b7b      	ldrh	r3, [r7, #26]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d16b      	bne.n	8004036 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	330c      	adds	r3, #12
 8003f68:	7812      	ldrb	r2, [r2, #0]
 8003f6a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f84:	e057      	b.n	8004036 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d11c      	bne.n	8003fce <HAL_SPI_TransmitReceive+0x26c>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d017      	beq.n	8003fce <HAL_SPI_TransmitReceive+0x26c>
 8003f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d114      	bne.n	8003fce <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	330c      	adds	r3, #12
 8003fae:	7812      	ldrb	r2, [r2, #0]
 8003fb0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb6:	1c5a      	adds	r2, r3, #1
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d119      	bne.n	8004010 <HAL_SPI_TransmitReceive+0x2ae>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d014      	beq.n	8004010 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff8:	1c5a      	adds	r2, r3, #1
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004002:	b29b      	uxth	r3, r3
 8004004:	3b01      	subs	r3, #1
 8004006:	b29a      	uxth	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800400c:	2301      	movs	r3, #1
 800400e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004010:	f7fd f8ea 	bl	80011e8 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800401c:	429a      	cmp	r2, r3
 800401e:	d803      	bhi.n	8004028 <HAL_SPI_TransmitReceive+0x2c6>
 8004020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004026:	d102      	bne.n	800402e <HAL_SPI_TransmitReceive+0x2cc>
 8004028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402a:	2b00      	cmp	r3, #0
 800402c:	d103      	bne.n	8004036 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004034:	e029      	b.n	800408a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1a2      	bne.n	8003f86 <HAL_SPI_TransmitReceive+0x224>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004044:	b29b      	uxth	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d19d      	bne.n	8003f86 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800404a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800404c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 f8b2 	bl	80041b8 <SPI_EndRxTxTransaction>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d006      	beq.n	8004068 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2220      	movs	r2, #32
 8004064:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004066:	e010      	b.n	800408a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10b      	bne.n	8004088 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004070:	2300      	movs	r3, #0
 8004072:	617b      	str	r3, [r7, #20]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	e000      	b.n	800408a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004088:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800409a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3730      	adds	r7, #48	; 0x30
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b088      	sub	sp, #32
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	603b      	str	r3, [r7, #0]
 80040b4:	4613      	mov	r3, r2
 80040b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040b8:	f7fd f896 	bl	80011e8 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c0:	1a9b      	subs	r3, r3, r2
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	4413      	add	r3, r2
 80040c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040c8:	f7fd f88e 	bl	80011e8 <HAL_GetTick>
 80040cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040ce:	4b39      	ldr	r3, [pc, #228]	; (80041b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	015b      	lsls	r3, r3, #5
 80040d4:	0d1b      	lsrs	r3, r3, #20
 80040d6:	69fa      	ldr	r2, [r7, #28]
 80040d8:	fb02 f303 	mul.w	r3, r2, r3
 80040dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040de:	e054      	b.n	800418a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e6:	d050      	beq.n	800418a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040e8:	f7fd f87e 	bl	80011e8 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	69fa      	ldr	r2, [r7, #28]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d902      	bls.n	80040fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d13d      	bne.n	800417a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800410c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004116:	d111      	bne.n	800413c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004120:	d004      	beq.n	800412c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412a:	d107      	bne.n	800413c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800413a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004140:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004144:	d10f      	bne.n	8004166 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004164:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e017      	b.n	80041aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	3b01      	subs	r3, #1
 8004188:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	4013      	ands	r3, r2
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	429a      	cmp	r2, r3
 8004198:	bf0c      	ite	eq
 800419a:	2301      	moveq	r3, #1
 800419c:	2300      	movne	r3, #0
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	461a      	mov	r2, r3
 80041a2:	79fb      	ldrb	r3, [r7, #7]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d19b      	bne.n	80040e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3720      	adds	r7, #32
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	20000164 	.word	0x20000164

080041b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af02      	add	r7, sp, #8
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041c4:	4b1b      	ldr	r3, [pc, #108]	; (8004234 <SPI_EndRxTxTransaction+0x7c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a1b      	ldr	r2, [pc, #108]	; (8004238 <SPI_EndRxTxTransaction+0x80>)
 80041ca:	fba2 2303 	umull	r2, r3, r2, r3
 80041ce:	0d5b      	lsrs	r3, r3, #21
 80041d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041d4:	fb02 f303 	mul.w	r3, r2, r3
 80041d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041e2:	d112      	bne.n	800420a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2200      	movs	r2, #0
 80041ec:	2180      	movs	r1, #128	; 0x80
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f7ff ff5a 	bl	80040a8 <SPI_WaitFlagStateUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d016      	beq.n	8004228 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fe:	f043 0220 	orr.w	r2, r3, #32
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e00f      	b.n	800422a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00a      	beq.n	8004226 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	3b01      	subs	r3, #1
 8004214:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004220:	2b80      	cmp	r3, #128	; 0x80
 8004222:	d0f2      	beq.n	800420a <SPI_EndRxTxTransaction+0x52>
 8004224:	e000      	b.n	8004228 <SPI_EndRxTxTransaction+0x70>
        break;
 8004226:	bf00      	nop
  }

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	20000164 	.word	0x20000164
 8004238:	165e9f81 	.word	0x165e9f81

0800423c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e03f      	b.n	80042ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fc fdee 	bl	8000e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2224      	movs	r2, #36	; 0x24
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800427e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f829 	bl	80042d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004294:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695a      	ldr	r2, [r3, #20]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2220      	movs	r2, #32
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	431a      	orrs	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	4313      	orrs	r3, r2
 800430c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004318:	f023 030c 	bic.w	r3, r3, #12
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6812      	ldr	r2, [r2, #0]
 8004320:	68b9      	ldr	r1, [r7, #8]
 8004322:	430b      	orrs	r3, r1
 8004324:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	699a      	ldr	r2, [r3, #24]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a55      	ldr	r2, [pc, #340]	; (8004498 <UART_SetConfig+0x1c0>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d103      	bne.n	800434e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004346:	f7ff fc0f 	bl	8003b68 <HAL_RCC_GetPCLK2Freq>
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	e002      	b.n	8004354 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800434e:	f7ff fbf7 	bl	8003b40 <HAL_RCC_GetPCLK1Freq>
 8004352:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800435c:	d14c      	bne.n	80043f8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	4613      	mov	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	009a      	lsls	r2, r3, #2
 8004368:	441a      	add	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	fbb2 f3f3 	udiv	r3, r2, r3
 8004374:	4a49      	ldr	r2, [pc, #292]	; (800449c <UART_SetConfig+0x1c4>)
 8004376:	fba2 2303 	umull	r2, r3, r2, r3
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	0119      	lsls	r1, r3, #4
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4613      	mov	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	009a      	lsls	r2, r3, #2
 8004388:	441a      	add	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	fbb2 f2f3 	udiv	r2, r2, r3
 8004394:	4b41      	ldr	r3, [pc, #260]	; (800449c <UART_SetConfig+0x1c4>)
 8004396:	fba3 0302 	umull	r0, r3, r3, r2
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	2064      	movs	r0, #100	; 0x64
 800439e:	fb00 f303 	mul.w	r3, r0, r3
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	3332      	adds	r3, #50	; 0x32
 80043a8:	4a3c      	ldr	r2, [pc, #240]	; (800449c <UART_SetConfig+0x1c4>)
 80043aa:	fba2 2303 	umull	r2, r3, r2, r3
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043b6:	4419      	add	r1, r3
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	4613      	mov	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	009a      	lsls	r2, r3, #2
 80043c2:	441a      	add	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80043ce:	4b33      	ldr	r3, [pc, #204]	; (800449c <UART_SetConfig+0x1c4>)
 80043d0:	fba3 0302 	umull	r0, r3, r3, r2
 80043d4:	095b      	lsrs	r3, r3, #5
 80043d6:	2064      	movs	r0, #100	; 0x64
 80043d8:	fb00 f303 	mul.w	r3, r0, r3
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	3332      	adds	r3, #50	; 0x32
 80043e2:	4a2e      	ldr	r2, [pc, #184]	; (800449c <UART_SetConfig+0x1c4>)
 80043e4:	fba2 2303 	umull	r2, r3, r2, r3
 80043e8:	095b      	lsrs	r3, r3, #5
 80043ea:	f003 0207 	and.w	r2, r3, #7
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	440a      	add	r2, r1
 80043f4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043f6:	e04a      	b.n	800448e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	4613      	mov	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	009a      	lsls	r2, r3, #2
 8004402:	441a      	add	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	fbb2 f3f3 	udiv	r3, r2, r3
 800440e:	4a23      	ldr	r2, [pc, #140]	; (800449c <UART_SetConfig+0x1c4>)
 8004410:	fba2 2303 	umull	r2, r3, r2, r3
 8004414:	095b      	lsrs	r3, r3, #5
 8004416:	0119      	lsls	r1, r3, #4
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	4613      	mov	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	009a      	lsls	r2, r3, #2
 8004422:	441a      	add	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	fbb2 f2f3 	udiv	r2, r2, r3
 800442e:	4b1b      	ldr	r3, [pc, #108]	; (800449c <UART_SetConfig+0x1c4>)
 8004430:	fba3 0302 	umull	r0, r3, r3, r2
 8004434:	095b      	lsrs	r3, r3, #5
 8004436:	2064      	movs	r0, #100	; 0x64
 8004438:	fb00 f303 	mul.w	r3, r0, r3
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	3332      	adds	r3, #50	; 0x32
 8004442:	4a16      	ldr	r2, [pc, #88]	; (800449c <UART_SetConfig+0x1c4>)
 8004444:	fba2 2303 	umull	r2, r3, r2, r3
 8004448:	095b      	lsrs	r3, r3, #5
 800444a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800444e:	4419      	add	r1, r3
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	4613      	mov	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	009a      	lsls	r2, r3, #2
 800445a:	441a      	add	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	fbb2 f2f3 	udiv	r2, r2, r3
 8004466:	4b0d      	ldr	r3, [pc, #52]	; (800449c <UART_SetConfig+0x1c4>)
 8004468:	fba3 0302 	umull	r0, r3, r3, r2
 800446c:	095b      	lsrs	r3, r3, #5
 800446e:	2064      	movs	r0, #100	; 0x64
 8004470:	fb00 f303 	mul.w	r3, r0, r3
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	011b      	lsls	r3, r3, #4
 8004478:	3332      	adds	r3, #50	; 0x32
 800447a:	4a08      	ldr	r2, [pc, #32]	; (800449c <UART_SetConfig+0x1c4>)
 800447c:	fba2 2303 	umull	r2, r3, r2, r3
 8004480:	095b      	lsrs	r3, r3, #5
 8004482:	f003 020f 	and.w	r2, r3, #15
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	440a      	add	r2, r1
 800448c:	609a      	str	r2, [r3, #8]
}
 800448e:	bf00      	nop
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	40013800 	.word	0x40013800
 800449c:	51eb851f 	.word	0x51eb851f

080044a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044b0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80044b4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr

080044cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044d4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80044d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	43db      	mvns	r3, r3
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	4013      	ands	r3, r2
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr

08004500 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004500:	b084      	sub	sp, #16
 8004502:	b480      	push	{r7}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	f107 0014 	add.w	r0, r7, #20
 800450e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	bc80      	pop	{r7}
 800453c:	b004      	add	sp, #16
 800453e:	4770      	bx	lr

08004540 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004540:	b480      	push	{r7}
 8004542:	b09b      	sub	sp, #108	; 0x6c
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	b29b      	uxth	r3, r3
 800455e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004566:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	78db      	ldrb	r3, [r3, #3]
 800456e:	2b03      	cmp	r3, #3
 8004570:	d81f      	bhi.n	80045b2 <USB_ActivateEndpoint+0x72>
 8004572:	a201      	add	r2, pc, #4	; (adr r2, 8004578 <USB_ActivateEndpoint+0x38>)
 8004574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004578:	08004589 	.word	0x08004589
 800457c:	080045a5 	.word	0x080045a5
 8004580:	080045bb 	.word	0x080045bb
 8004584:	08004597 	.word	0x08004597
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004588:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800458c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004590:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004594:	e012      	b.n	80045bc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004596:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800459a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800459e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80045a2:	e00b      	b.n	80045bc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80045a4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80045a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045ac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80045b0:	e004      	b.n	80045bc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80045b8:	e000      	b.n	80045bc <USB_ActivateEndpoint+0x7c>
      break;
 80045ba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	441a      	add	r2, r3
 80045c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80045ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045da:	b29b      	uxth	r3, r3
 80045dc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	441a      	add	r2, r3
 800460c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800461c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004620:	b29b      	uxth	r3, r3
 8004622:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	7b1b      	ldrb	r3, [r3, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	f040 8149 	bne.w	80048c0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	785b      	ldrb	r3, [r3, #1]
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 8084 	beq.w	8004740 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004642:	b29b      	uxth	r3, r3
 8004644:	461a      	mov	r2, r3
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	4413      	add	r3, r2
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	011a      	lsls	r2, r3, #4
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	4413      	add	r3, r2
 8004656:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800465a:	613b      	str	r3, [r7, #16]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	88db      	ldrh	r3, [r3, #6]
 8004660:	085b      	lsrs	r3, r3, #1
 8004662:	b29b      	uxth	r3, r3
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	81fb      	strh	r3, [r7, #14]
 800467a:	89fb      	ldrh	r3, [r7, #14]
 800467c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01b      	beq.n	80046bc <USB_ActivateEndpoint+0x17c>
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	b29b      	uxth	r3, r3
 8004692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469a:	81bb      	strh	r3, [r7, #12]
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	441a      	add	r2, r3
 80046a6:	89bb      	ldrh	r3, [r7, #12]
 80046a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	78db      	ldrb	r3, [r3, #3]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d020      	beq.n	8004706 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046da:	813b      	strh	r3, [r7, #8]
 80046dc:	893b      	ldrh	r3, [r7, #8]
 80046de:	f083 0320 	eor.w	r3, r3, #32
 80046e2:	813b      	strh	r3, [r7, #8]
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	441a      	add	r2, r3
 80046ee:	893b      	ldrh	r3, [r7, #8]
 80046f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004700:	b29b      	uxth	r3, r3
 8004702:	8013      	strh	r3, [r2, #0]
 8004704:	e27f      	b.n	8004c06 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	b29b      	uxth	r3, r3
 8004714:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800471c:	817b      	strh	r3, [r7, #10]
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	441a      	add	r2, r3
 8004728:	897b      	ldrh	r3, [r7, #10]
 800472a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800472e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800473a:	b29b      	uxth	r3, r3
 800473c:	8013      	strh	r3, [r2, #0]
 800473e:	e262      	b.n	8004c06 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800474a:	b29b      	uxth	r3, r3
 800474c:	461a      	mov	r2, r3
 800474e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004750:	4413      	add	r3, r2
 8004752:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	011a      	lsls	r2, r3, #4
 800475a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475c:	4413      	add	r3, r2
 800475e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004762:	62bb      	str	r3, [r7, #40]	; 0x28
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	88db      	ldrh	r3, [r3, #6]
 8004768:	085b      	lsrs	r3, r3, #1
 800476a:	b29b      	uxth	r3, r3
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	b29a      	uxth	r2, r3
 8004770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004772:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	627b      	str	r3, [r7, #36]	; 0x24
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800477e:	b29b      	uxth	r3, r3
 8004780:	461a      	mov	r2, r3
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	4413      	add	r3, r2
 8004786:	627b      	str	r3, [r7, #36]	; 0x24
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	011a      	lsls	r2, r3, #4
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	4413      	add	r3, r2
 8004792:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004796:	623b      	str	r3, [r7, #32]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d112      	bne.n	80047c6 <USB_ActivateEndpoint+0x286>
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	801a      	strh	r2, [r3, #0]
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047be:	b29a      	uxth	r2, r3
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	801a      	strh	r2, [r3, #0]
 80047c4:	e02f      	b.n	8004826 <USB_ActivateEndpoint+0x2e6>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	2b3e      	cmp	r3, #62	; 0x3e
 80047cc:	d813      	bhi.n	80047f6 <USB_ActivateEndpoint+0x2b6>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	085b      	lsrs	r3, r3, #1
 80047d4:	663b      	str	r3, [r7, #96]	; 0x60
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d002      	beq.n	80047e8 <USB_ActivateEndpoint+0x2a8>
 80047e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047e4:	3301      	adds	r3, #1
 80047e6:	663b      	str	r3, [r7, #96]	; 0x60
 80047e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	029b      	lsls	r3, r3, #10
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	801a      	strh	r2, [r3, #0]
 80047f4:	e017      	b.n	8004826 <USB_ActivateEndpoint+0x2e6>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	663b      	str	r3, [r7, #96]	; 0x60
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f003 031f 	and.w	r3, r3, #31
 8004806:	2b00      	cmp	r3, #0
 8004808:	d102      	bne.n	8004810 <USB_ActivateEndpoint+0x2d0>
 800480a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800480c:	3b01      	subs	r3, #1
 800480e:	663b      	str	r3, [r7, #96]	; 0x60
 8004810:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004812:	b29b      	uxth	r3, r3
 8004814:	029b      	lsls	r3, r3, #10
 8004816:	b29b      	uxth	r3, r3
 8004818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800481c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004820:	b29a      	uxth	r2, r3
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	83fb      	strh	r3, [r7, #30]
 8004834:	8bfb      	ldrh	r3, [r7, #30]
 8004836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d01b      	beq.n	8004876 <USB_ActivateEndpoint+0x336>
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	b29b      	uxth	r3, r3
 800484c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004854:	83bb      	strh	r3, [r7, #28]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	441a      	add	r2, r3
 8004860:	8bbb      	ldrh	r3, [r7, #28]
 8004862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800486a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800486e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004872:	b29b      	uxth	r3, r3
 8004874:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	b29b      	uxth	r3, r3
 8004884:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488c:	837b      	strh	r3, [r7, #26]
 800488e:	8b7b      	ldrh	r3, [r7, #26]
 8004890:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004894:	837b      	strh	r3, [r7, #26]
 8004896:	8b7b      	ldrh	r3, [r7, #26]
 8004898:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800489c:	837b      	strh	r3, [r7, #26]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	441a      	add	r2, r3
 80048a8:	8b7b      	ldrh	r3, [r7, #26]
 80048aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	8013      	strh	r3, [r2, #0]
 80048be:	e1a2      	b.n	8004c06 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	441a      	add	r2, r3
 80048e4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80048e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80048f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004906:	b29b      	uxth	r3, r3
 8004908:	461a      	mov	r2, r3
 800490a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800490c:	4413      	add	r3, r2
 800490e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	011a      	lsls	r2, r3, #4
 8004916:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004918:	4413      	add	r3, r2
 800491a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800491e:	657b      	str	r3, [r7, #84]	; 0x54
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	891b      	ldrh	r3, [r3, #8]
 8004924:	085b      	lsrs	r3, r3, #1
 8004926:	b29b      	uxth	r3, r3
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800492e:	801a      	strh	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	653b      	str	r3, [r7, #80]	; 0x50
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800493a:	b29b      	uxth	r3, r3
 800493c:	461a      	mov	r2, r3
 800493e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004940:	4413      	add	r3, r2
 8004942:	653b      	str	r3, [r7, #80]	; 0x50
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	011a      	lsls	r2, r3, #4
 800494a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800494c:	4413      	add	r3, r2
 800494e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004952:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	895b      	ldrh	r3, [r3, #10]
 8004958:	085b      	lsrs	r3, r3, #1
 800495a:	b29b      	uxth	r3, r3
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004962:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	785b      	ldrb	r3, [r3, #1]
 8004968:	2b00      	cmp	r3, #0
 800496a:	f040 8091 	bne.w	8004a90 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800497c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800497e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d01b      	beq.n	80049be <USB_ActivateEndpoint+0x47e>
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4413      	add	r3, r2
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	b29b      	uxth	r3, r3
 8004994:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	441a      	add	r2, r3
 80049a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80049aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	873b      	strh	r3, [r7, #56]	; 0x38
 80049cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80049ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d01b      	beq.n	8004a0e <USB_ActivateEndpoint+0x4ce>
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ec:	86fb      	strh	r3, [r7, #54]	; 0x36
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	441a      	add	r2, r3
 80049f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80049fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a24:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004a26:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004a28:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a2c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004a2e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004a30:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a34:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	441a      	add	r2, r3
 8004a40:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004a42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a6c:	867b      	strh	r3, [r7, #50]	; 0x32
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	441a      	add	r2, r3
 8004a78:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	8013      	strh	r3, [r2, #0]
 8004a8e:	e0ba      	b.n	8004c06 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004aa0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d01d      	beq.n	8004ae8 <USB_ActivateEndpoint+0x5a8>
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	881b      	ldrh	r3, [r3, #0]
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	441a      	add	r2, r3
 8004ad0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004adc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004af8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d01d      	beq.n	8004b40 <USB_ActivateEndpoint+0x600>
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	441a      	add	r2, r3
 8004b28:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004b2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	78db      	ldrb	r3, [r3, #3]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d024      	beq.n	8004b92 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b5e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004b62:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b66:	f083 0320 	eor.w	r3, r3, #32
 8004b6a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	441a      	add	r2, r3
 8004b78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	8013      	strh	r3, [r2, #0]
 8004b90:	e01d      	b.n	8004bce <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ba8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	441a      	add	r2, r3
 8004bb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	441a      	add	r2, r3
 8004bf0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004c06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	376c      	adds	r7, #108	; 0x6c
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bc80      	pop	{r7}
 8004c12:	4770      	bx	lr

08004c14 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b08d      	sub	sp, #52	; 0x34
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	7b1b      	ldrb	r3, [r3, #12]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f040 808e 	bne.w	8004d44 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	785b      	ldrb	r3, [r3, #1]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d044      	beq.n	8004cba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	81bb      	strh	r3, [r7, #12]
 8004c3e:	89bb      	ldrh	r3, [r7, #12]
 8004c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d01b      	beq.n	8004c80 <USB_DeactivateEndpoint+0x6c>
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5e:	817b      	strh	r3, [r7, #10]
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	441a      	add	r2, r3
 8004c6a:	897b      	ldrh	r3, [r7, #10]
 8004c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c96:	813b      	strh	r3, [r7, #8]
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	441a      	add	r2, r3
 8004ca2:	893b      	ldrh	r3, [r7, #8]
 8004ca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	8013      	strh	r3, [r2, #0]
 8004cb8:	e192      	b.n	8004fe0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	827b      	strh	r3, [r7, #18]
 8004cc8:	8a7b      	ldrh	r3, [r7, #18]
 8004cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d01b      	beq.n	8004d0a <USB_DeactivateEndpoint+0xf6>
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce8:	823b      	strh	r3, [r7, #16]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	441a      	add	r2, r3
 8004cf4:	8a3b      	ldrh	r3, [r7, #16]
 8004cf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d20:	81fb      	strh	r3, [r7, #14]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	441a      	add	r2, r3
 8004d2c:	89fb      	ldrh	r3, [r7, #14]
 8004d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	8013      	strh	r3, [r2, #0]
 8004d42:	e14d      	b.n	8004fe0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	785b      	ldrb	r3, [r3, #1]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f040 80a5 	bne.w	8004e98 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	843b      	strh	r3, [r7, #32]
 8004d5c:	8c3b      	ldrh	r3, [r7, #32]
 8004d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d01b      	beq.n	8004d9e <USB_DeactivateEndpoint+0x18a>
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7c:	83fb      	strh	r3, [r7, #30]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	441a      	add	r2, r3
 8004d88:	8bfb      	ldrh	r3, [r7, #30]
 8004d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	83bb      	strh	r3, [r7, #28]
 8004dac:	8bbb      	ldrh	r3, [r7, #28]
 8004dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d01b      	beq.n	8004dee <USB_DeactivateEndpoint+0x1da>
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	881b      	ldrh	r3, [r3, #0]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dcc:	837b      	strh	r3, [r7, #26]
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	441a      	add	r2, r3
 8004dd8:	8b7b      	ldrh	r3, [r7, #26]
 8004dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004de6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e04:	833b      	strh	r3, [r7, #24]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	441a      	add	r2, r3
 8004e10:	8b3b      	ldrh	r3, [r7, #24]
 8004e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3c:	82fb      	strh	r3, [r7, #22]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	441a      	add	r2, r3
 8004e48:	8afb      	ldrh	r3, [r7, #22]
 8004e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e74:	82bb      	strh	r3, [r7, #20]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	441a      	add	r2, r3
 8004e80:	8abb      	ldrh	r3, [r7, #20]
 8004e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	8013      	strh	r3, [r2, #0]
 8004e96:	e0a3      	b.n	8004fe0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004ea6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d01b      	beq.n	8004ee8 <USB_DeactivateEndpoint+0x2d4>
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	881b      	ldrh	r3, [r3, #0]
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	441a      	add	r2, r3
 8004ed2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004edc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004ef6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d01b      	beq.n	8004f38 <USB_DeactivateEndpoint+0x324>
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f16:	853b      	strh	r3, [r7, #40]	; 0x28
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	441a      	add	r2, r3
 8004f22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	441a      	add	r2, r3
 8004f5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f86:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	441a      	add	r2, r3
 8004f92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fbe:	847b      	strh	r3, [r7, #34]	; 0x22
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	441a      	add	r2, r3
 8004fca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004fcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3734      	adds	r7, #52	; 0x34
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bc80      	pop	{r7}
 8004fea:	4770      	bx	lr

08004fec <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b0cc      	sub	sp, #304	; 0x130
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ffa:	6018      	str	r0, [r3, #0]
 8004ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005000:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005004:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800500a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	785b      	ldrb	r3, [r3, #1]
 8005012:	2b01      	cmp	r3, #1
 8005014:	f041 817d 	bne.w	8006312 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800501c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	699a      	ldr	r2, [r3, #24]
 8005024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005028:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	429a      	cmp	r2, r3
 8005032:	d908      	bls.n	8005046 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005038:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005044:	e007      	b.n	8005056 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800504a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800505a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	7b1b      	ldrb	r3, [r3, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d152      	bne.n	800510c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800506a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6959      	ldr	r1, [r3, #20]
 8005072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005076:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	88da      	ldrh	r2, [r3, #6]
 800507e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005082:	b29b      	uxth	r3, r3
 8005084:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005088:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800508c:	6800      	ldr	r0, [r0, #0]
 800508e:	f001 ff0e 	bl	8006eae <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005096:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800509a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800509e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80050a2:	6812      	ldr	r2, [r2, #0]
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	4619      	mov	r1, r3
 80050b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050bc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80050c0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80050c4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80050c8:	6812      	ldr	r2, [r2, #0]
 80050ca:	440a      	add	r2, r1
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	011a      	lsls	r2, r3, #4
 80050dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050e0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4413      	add	r3, r2
 80050e8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80050ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050f0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005100:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	801a      	strh	r2, [r3, #0]
 8005108:	f001 b8b5 	b.w	8006276 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800510c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005110:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	78db      	ldrb	r3, [r3, #3]
 8005118:	2b02      	cmp	r3, #2
 800511a:	f040 84c6 	bne.w	8005aaa <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800511e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005122:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6a1a      	ldr	r2, [r3, #32]
 800512a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800512e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	429a      	cmp	r2, r3
 8005138:	f240 8443 	bls.w	80059c2 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800513c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005140:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800514a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	b29b      	uxth	r3, r3
 800515a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800515e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005162:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800516a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005174:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	441a      	add	r2, r3
 8005180:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800518c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005194:	b29b      	uxth	r3, r3
 8005196:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005198:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800519c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6a1a      	ldr	r2, [r3, #32]
 80051a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051a8:	1ad2      	subs	r2, r2, r3
 80051aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80051b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	881b      	ldrh	r3, [r3, #0]
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 823e 	beq.w	800565a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051e2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80051e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80051ea:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80051ee:	6812      	ldr	r2, [r2, #0]
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	785b      	ldrb	r3, [r3, #1]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f040 809a 	bne.w	8005338 <USB_EPStartXfer+0x34c>
 8005204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800520c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005210:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005214:	6812      	ldr	r2, [r2, #0]
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800521c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005226:	b29b      	uxth	r3, r3
 8005228:	4619      	mov	r1, r3
 800522a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800522e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005232:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005236:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800523a:	6812      	ldr	r2, [r2, #0]
 800523c:	440a      	add	r2, r1
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005244:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	011a      	lsls	r2, r3, #4
 800524e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4413      	add	r3, r2
 800525a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800525e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005262:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800526c:	2b00      	cmp	r3, #0
 800526e:	d122      	bne.n	80052b6 <USB_EPStartXfer+0x2ca>
 8005270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005274:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	881b      	ldrh	r3, [r3, #0]
 800527c:	b29b      	uxth	r3, r3
 800527e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005282:	b29a      	uxth	r2, r3
 8005284:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005288:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	801a      	strh	r2, [r3, #0]
 8005290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005294:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	b29b      	uxth	r3, r3
 800529e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	801a      	strh	r2, [r3, #0]
 80052b4:	e079      	b.n	80053aa <USB_EPStartXfer+0x3be>
 80052b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ba:	2b3e      	cmp	r3, #62	; 0x3e
 80052bc:	d81b      	bhi.n	80052f6 <USB_EPStartXfer+0x30a>
 80052be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052c2:	085b      	lsrs	r3, r3, #1
 80052c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80052c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d004      	beq.n	80052de <USB_EPStartXfer+0x2f2>
 80052d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80052d8:	3301      	adds	r3, #1
 80052da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80052de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	029b      	lsls	r3, r3, #10
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	801a      	strh	r2, [r3, #0]
 80052f4:	e059      	b.n	80053aa <USB_EPStartXfer+0x3be>
 80052f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052fa:	095b      	lsrs	r3, r3, #5
 80052fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005300:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005304:	f003 031f 	and.w	r3, r3, #31
 8005308:	2b00      	cmp	r3, #0
 800530a:	d104      	bne.n	8005316 <USB_EPStartXfer+0x32a>
 800530c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005310:	3b01      	subs	r3, #1
 8005312:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005316:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800531a:	b29b      	uxth	r3, r3
 800531c:	029b      	lsls	r3, r3, #10
 800531e:	b29b      	uxth	r3, r3
 8005320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005328:	b29a      	uxth	r2, r3
 800532a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800532e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	801a      	strh	r2, [r3, #0]
 8005336:	e038      	b.n	80053aa <USB_EPStartXfer+0x3be>
 8005338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800533c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	785b      	ldrb	r3, [r3, #1]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d130      	bne.n	80053aa <USB_EPStartXfer+0x3be>
 8005348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800534c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005356:	b29b      	uxth	r3, r3
 8005358:	4619      	mov	r1, r3
 800535a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800535e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005362:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005366:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800536a:	6812      	ldr	r2, [r2, #0]
 800536c:	440a      	add	r2, r1
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005374:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	011a      	lsls	r2, r3, #4
 800537e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005382:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4413      	add	r3, r2
 800538a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800538e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005392:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800539c:	b29a      	uxth	r2, r3
 800539e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80053aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	895b      	ldrh	r3, [r3, #10]
 80053b6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6959      	ldr	r1, [r3, #20]
 80053c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80053d0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80053d4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80053d8:	6800      	ldr	r0, [r0, #0]
 80053da:	f001 fd68 	bl	8006eae <USB_WritePMA>
            ep->xfer_buff += len;
 80053de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	695a      	ldr	r2, [r3, #20]
 80053ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ee:	441a      	add	r2, r3
 80053f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80053fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005400:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6a1a      	ldr	r2, [r3, #32]
 8005408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800540c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	429a      	cmp	r2, r3
 8005416:	d90f      	bls.n	8005438 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800541c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6a1a      	ldr	r2, [r3, #32]
 8005424:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005428:	1ad2      	subs	r2, r2, r3
 800542a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800542e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	621a      	str	r2, [r3, #32]
 8005436:	e00e      	b.n	8005456 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800543c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800544c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2200      	movs	r2, #0
 8005454:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800545a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	785b      	ldrb	r3, [r3, #1]
 8005462:	2b00      	cmp	r3, #0
 8005464:	f040 809a 	bne.w	800559c <USB_EPStartXfer+0x5b0>
 8005468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800546c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005470:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005474:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005478:	6812      	ldr	r2, [r2, #0]
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005480:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800548a:	b29b      	uxth	r3, r3
 800548c:	4619      	mov	r1, r3
 800548e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005492:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005496:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800549a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800549e:	6812      	ldr	r2, [r2, #0]
 80054a0:	440a      	add	r2, r1
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	011a      	lsls	r2, r3, #4
 80054b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4413      	add	r3, r2
 80054be:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80054c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d122      	bne.n	800551a <USB_EPStartXfer+0x52e>
 80054d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	801a      	strh	r2, [r3, #0]
 80054f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	b29b      	uxth	r3, r3
 8005502:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005506:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800550a:	b29a      	uxth	r2, r3
 800550c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005510:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	801a      	strh	r2, [r3, #0]
 8005518:	e083      	b.n	8005622 <USB_EPStartXfer+0x636>
 800551a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800551e:	2b3e      	cmp	r3, #62	; 0x3e
 8005520:	d81b      	bhi.n	800555a <USB_EPStartXfer+0x56e>
 8005522:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005526:	085b      	lsrs	r3, r3, #1
 8005528:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800552c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	d004      	beq.n	8005542 <USB_EPStartXfer+0x556>
 8005538:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800553c:	3301      	adds	r3, #1
 800553e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005542:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005546:	b29b      	uxth	r3, r3
 8005548:	029b      	lsls	r3, r3, #10
 800554a:	b29a      	uxth	r2, r3
 800554c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005550:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	801a      	strh	r2, [r3, #0]
 8005558:	e063      	b.n	8005622 <USB_EPStartXfer+0x636>
 800555a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800555e:	095b      	lsrs	r3, r3, #5
 8005560:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005564:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005568:	f003 031f 	and.w	r3, r3, #31
 800556c:	2b00      	cmp	r3, #0
 800556e:	d104      	bne.n	800557a <USB_EPStartXfer+0x58e>
 8005570:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005574:	3b01      	subs	r3, #1
 8005576:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800557a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800557e:	b29b      	uxth	r3, r3
 8005580:	029b      	lsls	r3, r3, #10
 8005582:	b29b      	uxth	r3, r3
 8005584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800558c:	b29a      	uxth	r2, r3
 800558e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005592:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	801a      	strh	r2, [r3, #0]
 800559a:	e042      	b.n	8005622 <USB_EPStartXfer+0x636>
 800559c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	785b      	ldrb	r3, [r3, #1]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d13a      	bne.n	8005622 <USB_EPStartXfer+0x636>
 80055ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80055b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055b8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80055bc:	6812      	ldr	r2, [r2, #0]
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	4619      	mov	r1, r3
 80055d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80055da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055de:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80055e2:	6812      	ldr	r2, [r2, #0]
 80055e4:	440a      	add	r2, r1
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	011a      	lsls	r2, r3, #4
 80055f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055fa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4413      	add	r3, r2
 8005602:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005614:	b29a      	uxth	r2, r3
 8005616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800561a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005626:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	891b      	ldrh	r3, [r3, #8]
 800562e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005636:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6959      	ldr	r1, [r3, #20]
 800563e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005642:	b29b      	uxth	r3, r3
 8005644:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005648:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800564c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005650:	6800      	ldr	r0, [r0, #0]
 8005652:	f001 fc2c 	bl	8006eae <USB_WritePMA>
 8005656:	f000 be0e 	b.w	8006276 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800565a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800565e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	785b      	ldrb	r3, [r3, #1]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d16d      	bne.n	8005746 <USB_EPStartXfer+0x75a>
 800566a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800566e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	64bb      	str	r3, [r7, #72]	; 0x48
 8005676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800567a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005684:	b29b      	uxth	r3, r3
 8005686:	461a      	mov	r2, r3
 8005688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800568a:	4413      	add	r3, r2
 800568c:	64bb      	str	r3, [r7, #72]	; 0x48
 800568e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	011a      	lsls	r2, r3, #4
 800569c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800569e:	4413      	add	r3, r2
 80056a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056a4:	647b      	str	r3, [r7, #68]	; 0x44
 80056a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d112      	bne.n	80056d4 <USB_EPStartXfer+0x6e8>
 80056ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056bc:	801a      	strh	r2, [r3, #0]
 80056be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056d0:	801a      	strh	r2, [r3, #0]
 80056d2:	e063      	b.n	800579c <USB_EPStartXfer+0x7b0>
 80056d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056d8:	2b3e      	cmp	r3, #62	; 0x3e
 80056da:	d817      	bhi.n	800570c <USB_EPStartXfer+0x720>
 80056dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056e0:	085b      	lsrs	r3, r3, #1
 80056e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80056e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d004      	beq.n	80056fc <USB_EPStartXfer+0x710>
 80056f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80056f6:	3301      	adds	r3, #1
 80056f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80056fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005700:	b29b      	uxth	r3, r3
 8005702:	029b      	lsls	r3, r3, #10
 8005704:	b29a      	uxth	r2, r3
 8005706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005708:	801a      	strh	r2, [r3, #0]
 800570a:	e047      	b.n	800579c <USB_EPStartXfer+0x7b0>
 800570c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005710:	095b      	lsrs	r3, r3, #5
 8005712:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005716:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800571a:	f003 031f 	and.w	r3, r3, #31
 800571e:	2b00      	cmp	r3, #0
 8005720:	d104      	bne.n	800572c <USB_EPStartXfer+0x740>
 8005722:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005726:	3b01      	subs	r3, #1
 8005728:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800572c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005730:	b29b      	uxth	r3, r3
 8005732:	029b      	lsls	r3, r3, #10
 8005734:	b29b      	uxth	r3, r3
 8005736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800573a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800573e:	b29a      	uxth	r2, r3
 8005740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005742:	801a      	strh	r2, [r3, #0]
 8005744:	e02a      	b.n	800579c <USB_EPStartXfer+0x7b0>
 8005746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800574a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	785b      	ldrb	r3, [r3, #1]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d122      	bne.n	800579c <USB_EPStartXfer+0x7b0>
 8005756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800575a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	653b      	str	r3, [r7, #80]	; 0x50
 8005762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005766:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005770:	b29b      	uxth	r3, r3
 8005772:	461a      	mov	r2, r3
 8005774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005776:	4413      	add	r3, r2
 8005778:	653b      	str	r3, [r7, #80]	; 0x50
 800577a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800577e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	011a      	lsls	r2, r3, #4
 8005788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800578a:	4413      	add	r3, r2
 800578c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005790:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005792:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005796:	b29a      	uxth	r2, r3
 8005798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800579a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800579c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	891b      	ldrh	r3, [r3, #8]
 80057a8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6959      	ldr	r1, [r3, #20]
 80057b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057bc:	b29b      	uxth	r3, r3
 80057be:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80057c2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80057c6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80057ca:	6800      	ldr	r0, [r0, #0]
 80057cc:	f001 fb6f 	bl	8006eae <USB_WritePMA>
            ep->xfer_buff += len;
 80057d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	695a      	ldr	r2, [r3, #20]
 80057dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e0:	441a      	add	r2, r3
 80057e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80057ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6a1a      	ldr	r2, [r3, #32]
 80057fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	429a      	cmp	r2, r3
 8005808:	d90f      	bls.n	800582a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800580a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800580e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6a1a      	ldr	r2, [r3, #32]
 8005816:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800581a:	1ad2      	subs	r2, r2, r3
 800581c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005820:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	621a      	str	r2, [r3, #32]
 8005828:	e00e      	b.n	8005848 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800582a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800582e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800583a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800583e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2200      	movs	r2, #0
 8005846:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800584c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	643b      	str	r3, [r7, #64]	; 0x40
 8005854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005858:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	785b      	ldrb	r3, [r3, #1]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d16d      	bne.n	8005940 <USB_EPStartXfer+0x954>
 8005864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005868:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005874:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800587e:	b29b      	uxth	r3, r3
 8005880:	461a      	mov	r2, r3
 8005882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005884:	4413      	add	r3, r2
 8005886:	63bb      	str	r3, [r7, #56]	; 0x38
 8005888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	011a      	lsls	r2, r3, #4
 8005896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005898:	4413      	add	r3, r2
 800589a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800589e:	637b      	str	r3, [r7, #52]	; 0x34
 80058a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d112      	bne.n	80058ce <USB_EPStartXfer+0x8e2>
 80058a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b6:	801a      	strh	r2, [r3, #0]
 80058b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	b29b      	uxth	r3, r3
 80058be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ca:	801a      	strh	r2, [r3, #0]
 80058cc:	e05d      	b.n	800598a <USB_EPStartXfer+0x99e>
 80058ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058d2:	2b3e      	cmp	r3, #62	; 0x3e
 80058d4:	d817      	bhi.n	8005906 <USB_EPStartXfer+0x91a>
 80058d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058da:	085b      	lsrs	r3, r3, #1
 80058dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80058e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d004      	beq.n	80058f6 <USB_EPStartXfer+0x90a>
 80058ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058f0:	3301      	adds	r3, #1
 80058f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80058f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	029b      	lsls	r3, r3, #10
 80058fe:	b29a      	uxth	r2, r3
 8005900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005902:	801a      	strh	r2, [r3, #0]
 8005904:	e041      	b.n	800598a <USB_EPStartXfer+0x99e>
 8005906:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800590a:	095b      	lsrs	r3, r3, #5
 800590c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005914:	f003 031f 	and.w	r3, r3, #31
 8005918:	2b00      	cmp	r3, #0
 800591a:	d104      	bne.n	8005926 <USB_EPStartXfer+0x93a>
 800591c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005920:	3b01      	subs	r3, #1
 8005922:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005926:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800592a:	b29b      	uxth	r3, r3
 800592c:	029b      	lsls	r3, r3, #10
 800592e:	b29b      	uxth	r3, r3
 8005930:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005934:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005938:	b29a      	uxth	r2, r3
 800593a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800593c:	801a      	strh	r2, [r3, #0]
 800593e:	e024      	b.n	800598a <USB_EPStartXfer+0x99e>
 8005940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005944:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	785b      	ldrb	r3, [r3, #1]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d11c      	bne.n	800598a <USB_EPStartXfer+0x99e>
 8005950:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005954:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800595e:	b29b      	uxth	r3, r3
 8005960:	461a      	mov	r2, r3
 8005962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005964:	4413      	add	r3, r2
 8005966:	643b      	str	r3, [r7, #64]	; 0x40
 8005968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800596c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	011a      	lsls	r2, r3, #4
 8005976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005978:	4413      	add	r3, r2
 800597a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800597e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005984:	b29a      	uxth	r2, r3
 8005986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005988:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800598a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	895b      	ldrh	r3, [r3, #10]
 8005996:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800599a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800599e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6959      	ldr	r1, [r3, #20]
 80059a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80059b0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80059b4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80059b8:	6800      	ldr	r0, [r0, #0]
 80059ba:	f001 fa78 	bl	8006eae <USB_WritePMA>
 80059be:	f000 bc5a 	b.w	8006276 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80059c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80059d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80059f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80059fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	441a      	add	r2, r3
 8005a16:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a4e:	4413      	add	r3, r2
 8005a50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	011a      	lsls	r2, r3, #4
 8005a60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a62:	4413      	add	r3, r2
 8005a64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a68:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a72:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	891b      	ldrh	r3, [r3, #8]
 8005a80:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6959      	ldr	r1, [r3, #20]
 8005a90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a9a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005a9e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005aa2:	6800      	ldr	r0, [r0, #0]
 8005aa4:	f001 fa03 	bl	8006eae <USB_WritePMA>
 8005aa8:	e3e5      	b.n	8006276 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	4413      	add	r3, r2
 8005ac4:	881b      	ldrh	r3, [r3, #0]
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	441a      	add	r2, r3
 8005aee:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005afa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6a1a      	ldr	r2, [r3, #32]
 8005b12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b16:	1ad2      	subs	r2, r2, r3
 8005b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 81bc 	beq.w	8005ec4 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	785b      	ldrb	r3, [r3, #1]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d16d      	bne.n	8005c46 <USB_EPStartXfer+0xc5a>
 8005b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	461a      	mov	r2, r3
 8005b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b8a:	4413      	add	r3, r2
 8005b8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	011a      	lsls	r2, r3, #4
 8005b9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ba4:	677b      	str	r3, [r7, #116]	; 0x74
 8005ba6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d112      	bne.n	8005bd4 <USB_EPStartXfer+0xbe8>
 8005bae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bbc:	801a      	strh	r2, [r3, #0]
 8005bbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bd0:	801a      	strh	r2, [r3, #0]
 8005bd2:	e060      	b.n	8005c96 <USB_EPStartXfer+0xcaa>
 8005bd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bd8:	2b3e      	cmp	r3, #62	; 0x3e
 8005bda:	d817      	bhi.n	8005c0c <USB_EPStartXfer+0xc20>
 8005bdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be0:	085b      	lsrs	r3, r3, #1
 8005be2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005be6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d004      	beq.n	8005bfc <USB_EPStartXfer+0xc10>
 8005bf2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005bfc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	029b      	lsls	r3, r3, #10
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c08:	801a      	strh	r2, [r3, #0]
 8005c0a:	e044      	b.n	8005c96 <USB_EPStartXfer+0xcaa>
 8005c0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c10:	095b      	lsrs	r3, r3, #5
 8005c12:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005c16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c1a:	f003 031f 	and.w	r3, r3, #31
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d104      	bne.n	8005c2c <USB_EPStartXfer+0xc40>
 8005c22:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005c26:	3b01      	subs	r3, #1
 8005c28:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005c2c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	029b      	lsls	r3, r3, #10
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c42:	801a      	strh	r2, [r3, #0]
 8005c44:	e027      	b.n	8005c96 <USB_EPStartXfer+0xcaa>
 8005c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	785b      	ldrb	r3, [r3, #1]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d11f      	bne.n	8005c96 <USB_EPStartXfer+0xcaa>
 8005c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	461a      	mov	r2, r3
 8005c68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	011a      	lsls	r2, r3, #4
 8005c80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c84:	4413      	add	r3, r2
 8005c86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c94:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	895b      	ldrh	r3, [r3, #10]
 8005ca2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005caa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6959      	ldr	r1, [r3, #20]
 8005cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005cbc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005cc0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005cc4:	6800      	ldr	r0, [r0, #0]
 8005cc6:	f001 f8f2 	bl	8006eae <USB_WritePMA>
          ep->xfer_buff += len;
 8005cca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	695a      	ldr	r2, [r3, #20]
 8005cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cda:	441a      	add	r2, r3
 8005cdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ce0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6a1a      	ldr	r2, [r3, #32]
 8005cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d90f      	bls.n	8005d24 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005d04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6a1a      	ldr	r2, [r3, #32]
 8005d10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d14:	1ad2      	subs	r2, r2, r3
 8005d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	621a      	str	r2, [r3, #32]
 8005d22:	e00e      	b.n	8005d42 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005d24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005d42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 8295 	beq.w	8006276 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	785b      	ldrb	r3, [r3, #1]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d16d      	bne.n	8005e38 <USB_EPStartXfer+0xe4c>
 8005d5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	461a      	mov	r2, r3
 8005d7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d7c:	4413      	add	r3, r2
 8005d7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	011a      	lsls	r2, r3, #4
 8005d8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d90:	4413      	add	r3, r2
 8005d92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d96:	667b      	str	r3, [r7, #100]	; 0x64
 8005d98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d112      	bne.n	8005dc6 <USB_EPStartXfer+0xdda>
 8005da0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dae:	801a      	strh	r2, [r3, #0]
 8005db0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dc2:	801a      	strh	r2, [r3, #0]
 8005dc4:	e063      	b.n	8005e8e <USB_EPStartXfer+0xea2>
 8005dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dca:	2b3e      	cmp	r3, #62	; 0x3e
 8005dcc:	d817      	bhi.n	8005dfe <USB_EPStartXfer+0xe12>
 8005dce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dd2:	085b      	lsrs	r3, r3, #1
 8005dd4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005dd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d004      	beq.n	8005dee <USB_EPStartXfer+0xe02>
 8005de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005de8:	3301      	adds	r3, #1
 8005dea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	029b      	lsls	r3, r3, #10
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dfa:	801a      	strh	r2, [r3, #0]
 8005dfc:	e047      	b.n	8005e8e <USB_EPStartXfer+0xea2>
 8005dfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005e08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e0c:	f003 031f 	and.w	r3, r3, #31
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d104      	bne.n	8005e1e <USB_EPStartXfer+0xe32>
 8005e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	029b      	lsls	r3, r3, #10
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e34:	801a      	strh	r2, [r3, #0]
 8005e36:	e02a      	b.n	8005e8e <USB_EPStartXfer+0xea2>
 8005e38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	785b      	ldrb	r3, [r3, #1]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d122      	bne.n	8005e8e <USB_EPStartXfer+0xea2>
 8005e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	673b      	str	r3, [r7, #112]	; 0x70
 8005e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	461a      	mov	r2, r3
 8005e66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e68:	4413      	add	r3, r2
 8005e6a:	673b      	str	r3, [r7, #112]	; 0x70
 8005e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	011a      	lsls	r2, r3, #4
 8005e7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	891b      	ldrh	r3, [r3, #8]
 8005e9a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ea2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6959      	ldr	r1, [r3, #20]
 8005eaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005eb4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005eb8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005ebc:	6800      	ldr	r0, [r0, #0]
 8005ebe:	f000 fff6 	bl	8006eae <USB_WritePMA>
 8005ec2:	e1d8      	b.n	8006276 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ec4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	785b      	ldrb	r3, [r3, #1]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d178      	bne.n	8005fc6 <USB_EPStartXfer+0xfda>
 8005ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ef8:	4413      	add	r3, r2
 8005efa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	011a      	lsls	r2, r3, #4
 8005f0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f10:	4413      	add	r3, r2
 8005f12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d116      	bne.n	8005f50 <USB_EPStartXfer+0xf64>
 8005f22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f26:	881b      	ldrh	r3, [r3, #0]
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f34:	801a      	strh	r2, [r3, #0]
 8005f36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f3a:	881b      	ldrh	r3, [r3, #0]
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f4c:	801a      	strh	r2, [r3, #0]
 8005f4e:	e06b      	b.n	8006028 <USB_EPStartXfer+0x103c>
 8005f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f54:	2b3e      	cmp	r3, #62	; 0x3e
 8005f56:	d818      	bhi.n	8005f8a <USB_EPStartXfer+0xf9e>
 8005f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f5c:	085b      	lsrs	r3, r3, #1
 8005f5e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d004      	beq.n	8005f78 <USB_EPStartXfer+0xf8c>
 8005f6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005f72:	3301      	adds	r3, #1
 8005f74:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005f78:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	029b      	lsls	r3, r3, #10
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f86:	801a      	strh	r2, [r3, #0]
 8005f88:	e04e      	b.n	8006028 <USB_EPStartXfer+0x103c>
 8005f8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f8e:	095b      	lsrs	r3, r3, #5
 8005f90:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f98:	f003 031f 	and.w	r3, r3, #31
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d104      	bne.n	8005faa <USB_EPStartXfer+0xfbe>
 8005fa0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005faa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	029b      	lsls	r3, r3, #10
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fc2:	801a      	strh	r2, [r3, #0]
 8005fc4:	e030      	b.n	8006028 <USB_EPStartXfer+0x103c>
 8005fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	785b      	ldrb	r3, [r3, #1]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d128      	bne.n	8006028 <USB_EPStartXfer+0x103c>
 8005fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006004:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	011a      	lsls	r2, r3, #4
 800600e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006012:	4413      	add	r3, r2
 8006014:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006018:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800601c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006020:	b29a      	uxth	r2, r3
 8006022:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006026:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800602c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	891b      	ldrh	r3, [r3, #8]
 8006034:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800603c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6959      	ldr	r1, [r3, #20]
 8006044:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006048:	b29b      	uxth	r3, r3
 800604a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800604e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006052:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006056:	6800      	ldr	r0, [r0, #0]
 8006058:	f000 ff29 	bl	8006eae <USB_WritePMA>
          ep->xfer_buff += len;
 800605c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006060:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	695a      	ldr	r2, [r3, #20]
 8006068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800606c:	441a      	add	r2, r3
 800606e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006072:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800607a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6a1a      	ldr	r2, [r3, #32]
 8006086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800608a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	429a      	cmp	r2, r3
 8006094:	d90f      	bls.n	80060b6 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8006096:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800609a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6a1a      	ldr	r2, [r3, #32]
 80060a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060a6:	1ad2      	subs	r2, r2, r3
 80060a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	621a      	str	r2, [r3, #32]
 80060b4:	e00e      	b.n	80060d4 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80060b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80060c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2200      	movs	r2, #0
 80060d2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80060d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 80cc 	beq.w	8006276 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80060de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	785b      	ldrb	r3, [r3, #1]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d178      	bne.n	80061ee <USB_EPStartXfer+0x1202>
 80060fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006100:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800610a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800610e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006118:	b29b      	uxth	r3, r3
 800611a:	461a      	mov	r2, r3
 800611c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006120:	4413      	add	r3, r2
 8006122:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800612a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	011a      	lsls	r2, r3, #4
 8006134:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006138:	4413      	add	r3, r2
 800613a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800613e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006146:	2b00      	cmp	r3, #0
 8006148:	d116      	bne.n	8006178 <USB_EPStartXfer+0x118c>
 800614a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	b29b      	uxth	r3, r3
 8006152:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006156:	b29a      	uxth	r2, r3
 8006158:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800615c:	801a      	strh	r2, [r3, #0]
 800615e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006162:	881b      	ldrh	r3, [r3, #0]
 8006164:	b29b      	uxth	r3, r3
 8006166:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800616a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800616e:	b29a      	uxth	r2, r3
 8006170:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006174:	801a      	strh	r2, [r3, #0]
 8006176:	e064      	b.n	8006242 <USB_EPStartXfer+0x1256>
 8006178:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800617c:	2b3e      	cmp	r3, #62	; 0x3e
 800617e:	d818      	bhi.n	80061b2 <USB_EPStartXfer+0x11c6>
 8006180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006184:	085b      	lsrs	r3, r3, #1
 8006186:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800618a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b00      	cmp	r3, #0
 8006194:	d004      	beq.n	80061a0 <USB_EPStartXfer+0x11b4>
 8006196:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800619a:	3301      	adds	r3, #1
 800619c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80061a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	029b      	lsls	r3, r3, #10
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061ae:	801a      	strh	r2, [r3, #0]
 80061b0:	e047      	b.n	8006242 <USB_EPStartXfer+0x1256>
 80061b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061b6:	095b      	lsrs	r3, r3, #5
 80061b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80061bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c0:	f003 031f 	and.w	r3, r3, #31
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d104      	bne.n	80061d2 <USB_EPStartXfer+0x11e6>
 80061c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061cc:	3b01      	subs	r3, #1
 80061ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80061d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	029b      	lsls	r3, r3, #10
 80061da:	b29b      	uxth	r3, r3
 80061dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061ea:	801a      	strh	r2, [r3, #0]
 80061ec:	e029      	b.n	8006242 <USB_EPStartXfer+0x1256>
 80061ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	785b      	ldrb	r3, [r3, #1]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d121      	bne.n	8006242 <USB_EPStartXfer+0x1256>
 80061fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006202:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800620c:	b29b      	uxth	r3, r3
 800620e:	461a      	mov	r2, r3
 8006210:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006214:	4413      	add	r3, r2
 8006216:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800621a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800621e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	011a      	lsls	r2, r3, #4
 8006228:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800622c:	4413      	add	r3, r2
 800622e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006232:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006236:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800623a:	b29a      	uxth	r2, r3
 800623c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006240:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006246:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	895b      	ldrh	r3, [r3, #10]
 800624e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006256:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6959      	ldr	r1, [r3, #20]
 800625e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006262:	b29b      	uxth	r3, r3
 8006264:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006268:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800626c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006270:	6800      	ldr	r0, [r0, #0]
 8006272:	f000 fe1c 	bl	8006eae <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800627a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006284:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	b29b      	uxth	r3, r3
 8006294:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006298:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800629c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062a4:	8013      	strh	r3, [r2, #0]
 80062a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062aa:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80062ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80062b2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80062b6:	8812      	ldrh	r2, [r2, #0]
 80062b8:	f082 0210 	eor.w	r2, r2, #16
 80062bc:	801a      	strh	r2, [r3, #0]
 80062be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062c2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80062c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80062ca:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80062ce:	8812      	ldrh	r2, [r2, #0]
 80062d0:	f082 0220 	eor.w	r2, r2, #32
 80062d4:	801a      	strh	r2, [r3, #0]
 80062d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	441a      	add	r2, r3
 80062f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062f4:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80062f8:	881b      	ldrh	r3, [r3, #0]
 80062fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800630a:	b29b      	uxth	r3, r3
 800630c:	8013      	strh	r3, [r2, #0]
 800630e:	f000 bc9f 	b.w	8006c50 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006316:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	7b1b      	ldrb	r3, [r3, #12]
 800631e:	2b00      	cmp	r3, #0
 8006320:	f040 80ae 	bne.w	8006480 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006328:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	699a      	ldr	r2, [r3, #24]
 8006330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006334:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	429a      	cmp	r2, r3
 800633e:	d917      	bls.n	8006370 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006344:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006354:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	699a      	ldr	r2, [r3, #24]
 800635c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006360:	1ad2      	subs	r2, r2, r3
 8006362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006366:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	619a      	str	r2, [r3, #24]
 800636e:	e00e      	b.n	800638e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006370:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006374:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006380:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006384:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2200      	movs	r2, #0
 800638c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800638e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006392:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800639c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	461a      	mov	r2, r3
 80063ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80063b2:	4413      	add	r3, r2
 80063b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	011a      	lsls	r2, r3, #4
 80063c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80063ca:	4413      	add	r3, r2
 80063cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d116      	bne.n	800640a <USB_EPStartXfer+0x141e>
 80063dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063ee:	801a      	strh	r2, [r3, #0]
 80063f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063f4:	881b      	ldrh	r3, [r3, #0]
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006400:	b29a      	uxth	r2, r3
 8006402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006406:	801a      	strh	r2, [r3, #0]
 8006408:	e3e8      	b.n	8006bdc <USB_EPStartXfer+0x1bf0>
 800640a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800640e:	2b3e      	cmp	r3, #62	; 0x3e
 8006410:	d818      	bhi.n	8006444 <USB_EPStartXfer+0x1458>
 8006412:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006416:	085b      	lsrs	r3, r3, #1
 8006418:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800641c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006420:	f003 0301 	and.w	r3, r3, #1
 8006424:	2b00      	cmp	r3, #0
 8006426:	d004      	beq.n	8006432 <USB_EPStartXfer+0x1446>
 8006428:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800642c:	3301      	adds	r3, #1
 800642e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006432:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006436:	b29b      	uxth	r3, r3
 8006438:	029b      	lsls	r3, r3, #10
 800643a:	b29a      	uxth	r2, r3
 800643c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006440:	801a      	strh	r2, [r3, #0]
 8006442:	e3cb      	b.n	8006bdc <USB_EPStartXfer+0x1bf0>
 8006444:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006448:	095b      	lsrs	r3, r3, #5
 800644a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800644e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006452:	f003 031f 	and.w	r3, r3, #31
 8006456:	2b00      	cmp	r3, #0
 8006458:	d104      	bne.n	8006464 <USB_EPStartXfer+0x1478>
 800645a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800645e:	3b01      	subs	r3, #1
 8006460:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006464:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006468:	b29b      	uxth	r3, r3
 800646a:	029b      	lsls	r3, r3, #10
 800646c:	b29b      	uxth	r3, r3
 800646e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006476:	b29a      	uxth	r2, r3
 8006478:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800647c:	801a      	strh	r2, [r3, #0]
 800647e:	e3ad      	b.n	8006bdc <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006484:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	78db      	ldrb	r3, [r3, #3]
 800648c:	2b02      	cmp	r3, #2
 800648e:	f040 8200 	bne.w	8006892 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006496:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	785b      	ldrb	r3, [r3, #1]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f040 8091 	bne.w	80065c6 <USB_EPStartXfer+0x15da>
 80064a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	461a      	mov	r2, r3
 80064c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064c8:	4413      	add	r3, r2
 80064ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	011a      	lsls	r2, r3, #4
 80064dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064e0:	4413      	add	r3, r2
 80064e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d116      	bne.n	8006528 <USB_EPStartXfer+0x153c>
 80064fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	b29b      	uxth	r3, r3
 8006502:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006506:	b29a      	uxth	r2, r3
 8006508:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800650c:	801a      	strh	r2, [r3, #0]
 800650e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006512:	881b      	ldrh	r3, [r3, #0]
 8006514:	b29b      	uxth	r3, r3
 8006516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800651a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800651e:	b29a      	uxth	r2, r3
 8006520:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006524:	801a      	strh	r2, [r3, #0]
 8006526:	e083      	b.n	8006630 <USB_EPStartXfer+0x1644>
 8006528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800652c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	2b3e      	cmp	r3, #62	; 0x3e
 8006536:	d820      	bhi.n	800657a <USB_EPStartXfer+0x158e>
 8006538:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800653c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	085b      	lsrs	r3, r3, #1
 8006546:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800654a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800654e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d004      	beq.n	8006568 <USB_EPStartXfer+0x157c>
 800655e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006562:	3301      	adds	r3, #1
 8006564:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800656c:	b29b      	uxth	r3, r3
 800656e:	029b      	lsls	r3, r3, #10
 8006570:	b29a      	uxth	r2, r3
 8006572:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006576:	801a      	strh	r2, [r3, #0]
 8006578:	e05a      	b.n	8006630 <USB_EPStartXfer+0x1644>
 800657a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800657e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	095b      	lsrs	r3, r3, #5
 8006588:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800658c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006590:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	f003 031f 	and.w	r3, r3, #31
 800659c:	2b00      	cmp	r3, #0
 800659e:	d104      	bne.n	80065aa <USB_EPStartXfer+0x15be>
 80065a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065a4:	3b01      	subs	r3, #1
 80065a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80065aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	029b      	lsls	r3, r3, #10
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065bc:	b29a      	uxth	r2, r3
 80065be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065c2:	801a      	strh	r2, [r3, #0]
 80065c4:	e034      	b.n	8006630 <USB_EPStartXfer+0x1644>
 80065c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	785b      	ldrb	r3, [r3, #1]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d12c      	bne.n	8006630 <USB_EPStartXfer+0x1644>
 80065d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80065e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	461a      	mov	r2, r3
 80065f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065fa:	4413      	add	r3, r2
 80065fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006604:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	011a      	lsls	r2, r3, #4
 800660e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006612:	4413      	add	r3, r2
 8006614:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006618:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800661c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006620:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	b29a      	uxth	r2, r3
 800662a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800662e:	801a      	strh	r2, [r3, #0]
 8006630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006634:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800663e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006642:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	785b      	ldrb	r3, [r3, #1]
 800664a:	2b00      	cmp	r3, #0
 800664c:	f040 8091 	bne.w	8006772 <USB_EPStartXfer+0x1786>
 8006650:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006654:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800665e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006662:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800666c:	b29b      	uxth	r3, r3
 800666e:	461a      	mov	r2, r3
 8006670:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006674:	4413      	add	r3, r2
 8006676:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800667a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800667e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	011a      	lsls	r2, r3, #4
 8006688:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800668c:	4413      	add	r3, r2
 800668e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006692:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800669a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d116      	bne.n	80066d4 <USB_EPStartXfer+0x16e8>
 80066a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066aa:	881b      	ldrh	r3, [r3, #0]
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066b8:	801a      	strh	r2, [r3, #0]
 80066ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066be:	881b      	ldrh	r3, [r3, #0]
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066d0:	801a      	strh	r2, [r3, #0]
 80066d2:	e07c      	b.n	80067ce <USB_EPStartXfer+0x17e2>
 80066d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	2b3e      	cmp	r3, #62	; 0x3e
 80066e2:	d820      	bhi.n	8006726 <USB_EPStartXfer+0x173a>
 80066e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	085b      	lsrs	r3, r3, #1
 80066f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80066f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b00      	cmp	r3, #0
 8006708:	d004      	beq.n	8006714 <USB_EPStartXfer+0x1728>
 800670a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800670e:	3301      	adds	r3, #1
 8006710:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006714:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006718:	b29b      	uxth	r3, r3
 800671a:	029b      	lsls	r3, r3, #10
 800671c:	b29a      	uxth	r2, r3
 800671e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006722:	801a      	strh	r2, [r3, #0]
 8006724:	e053      	b.n	80067ce <USB_EPStartXfer+0x17e2>
 8006726:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800672a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	095b      	lsrs	r3, r3, #5
 8006734:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800673c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	f003 031f 	and.w	r3, r3, #31
 8006748:	2b00      	cmp	r3, #0
 800674a:	d104      	bne.n	8006756 <USB_EPStartXfer+0x176a>
 800674c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006750:	3b01      	subs	r3, #1
 8006752:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006756:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800675a:	b29b      	uxth	r3, r3
 800675c:	029b      	lsls	r3, r3, #10
 800675e:	b29b      	uxth	r3, r3
 8006760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006768:	b29a      	uxth	r2, r3
 800676a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800676e:	801a      	strh	r2, [r3, #0]
 8006770:	e02d      	b.n	80067ce <USB_EPStartXfer+0x17e2>
 8006772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006776:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	785b      	ldrb	r3, [r3, #1]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d125      	bne.n	80067ce <USB_EPStartXfer+0x17e2>
 8006782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006786:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006790:	b29b      	uxth	r3, r3
 8006792:	461a      	mov	r2, r3
 8006794:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006798:	4413      	add	r3, r2
 800679a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800679e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	011a      	lsls	r2, r3, #4
 80067ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067b0:	4413      	add	r3, r2
 80067b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067cc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80067ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 81fe 	beq.w	8006bdc <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80067e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006800:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d005      	beq.n	8006818 <USB_EPStartXfer+0x182c>
 800680c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10d      	bne.n	8006834 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006818:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800681c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006820:	2b00      	cmp	r3, #0
 8006822:	f040 81db 	bne.w	8006bdc <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006826:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800682a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682e:	2b00      	cmp	r3, #0
 8006830:	f040 81d4 	bne.w	8006bdc <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006838:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006842:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	b29b      	uxth	r3, r3
 8006852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800685e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006862:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800686c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	441a      	add	r2, r3
 8006878:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800687c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006880:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006884:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006888:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800688c:	b29b      	uxth	r3, r3
 800688e:	8013      	strh	r3, [r2, #0]
 8006890:	e1a4      	b.n	8006bdc <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006896:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	78db      	ldrb	r3, [r3, #3]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	f040 819a 	bne.w	8006bd8 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80068a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	699a      	ldr	r2, [r3, #24]
 80068b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d917      	bls.n	80068f0 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80068c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80068d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	699a      	ldr	r2, [r3, #24]
 80068dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068e0:	1ad2      	subs	r2, r2, r3
 80068e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	619a      	str	r2, [r3, #24]
 80068ee:	e00e      	b.n	800690e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80068f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006904:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2200      	movs	r2, #0
 800690c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800690e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006912:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	785b      	ldrb	r3, [r3, #1]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d178      	bne.n	8006a10 <USB_EPStartXfer+0x1a24>
 800691e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006922:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800692c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006930:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800693a:	b29b      	uxth	r3, r3
 800693c:	461a      	mov	r2, r3
 800693e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006942:	4413      	add	r3, r2
 8006944:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800694c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	011a      	lsls	r2, r3, #4
 8006956:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800695a:	4413      	add	r3, r2
 800695c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006960:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006968:	2b00      	cmp	r3, #0
 800696a:	d116      	bne.n	800699a <USB_EPStartXfer+0x19ae>
 800696c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	b29b      	uxth	r3, r3
 8006974:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006978:	b29a      	uxth	r2, r3
 800697a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800697e:	801a      	strh	r2, [r3, #0]
 8006980:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006984:	881b      	ldrh	r3, [r3, #0]
 8006986:	b29b      	uxth	r3, r3
 8006988:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800698c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006990:	b29a      	uxth	r2, r3
 8006992:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006996:	801a      	strh	r2, [r3, #0]
 8006998:	e06b      	b.n	8006a72 <USB_EPStartXfer+0x1a86>
 800699a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800699e:	2b3e      	cmp	r3, #62	; 0x3e
 80069a0:	d818      	bhi.n	80069d4 <USB_EPStartXfer+0x19e8>
 80069a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069a6:	085b      	lsrs	r3, r3, #1
 80069a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d004      	beq.n	80069c2 <USB_EPStartXfer+0x19d6>
 80069b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069bc:	3301      	adds	r3, #1
 80069be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	029b      	lsls	r3, r3, #10
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069d0:	801a      	strh	r2, [r3, #0]
 80069d2:	e04e      	b.n	8006a72 <USB_EPStartXfer+0x1a86>
 80069d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069d8:	095b      	lsrs	r3, r3, #5
 80069da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069e2:	f003 031f 	and.w	r3, r3, #31
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d104      	bne.n	80069f4 <USB_EPStartXfer+0x1a08>
 80069ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069ee:	3b01      	subs	r3, #1
 80069f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	029b      	lsls	r3, r3, #10
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a0c:	801a      	strh	r2, [r3, #0]
 8006a0e:	e030      	b.n	8006a72 <USB_EPStartXfer+0x1a86>
 8006a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	785b      	ldrb	r3, [r3, #1]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d128      	bne.n	8006a72 <USB_EPStartXfer+0x1a86>
 8006a20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	461a      	mov	r2, r3
 8006a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a44:	4413      	add	r3, r2
 8006a46:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	011a      	lsls	r2, r3, #4
 8006a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a62:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006a66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006a70:	801a      	strh	r2, [r3, #0]
 8006a72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	785b      	ldrb	r3, [r3, #1]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d178      	bne.n	8006b82 <USB_EPStartXfer+0x1b96>
 8006a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	461a      	mov	r2, r3
 8006ab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006abe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	011a      	lsls	r2, r3, #4
 8006ac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006acc:	4413      	add	r3, r2
 8006ace:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ad2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ad6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d116      	bne.n	8006b0c <USB_EPStartXfer+0x1b20>
 8006ade:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ae2:	881b      	ldrh	r3, [r3, #0]
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006af0:	801a      	strh	r2, [r3, #0]
 8006af2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b08:	801a      	strh	r2, [r3, #0]
 8006b0a:	e067      	b.n	8006bdc <USB_EPStartXfer+0x1bf0>
 8006b0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b10:	2b3e      	cmp	r3, #62	; 0x3e
 8006b12:	d818      	bhi.n	8006b46 <USB_EPStartXfer+0x1b5a>
 8006b14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b18:	085b      	lsrs	r3, r3, #1
 8006b1a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d004      	beq.n	8006b34 <USB_EPStartXfer+0x1b48>
 8006b2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b2e:	3301      	adds	r3, #1
 8006b30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	029b      	lsls	r3, r3, #10
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b42:	801a      	strh	r2, [r3, #0]
 8006b44:	e04a      	b.n	8006bdc <USB_EPStartXfer+0x1bf0>
 8006b46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b4a:	095b      	lsrs	r3, r3, #5
 8006b4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b54:	f003 031f 	and.w	r3, r3, #31
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d104      	bne.n	8006b66 <USB_EPStartXfer+0x1b7a>
 8006b5c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b60:	3b01      	subs	r3, #1
 8006b62:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	029b      	lsls	r3, r3, #10
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b7e:	801a      	strh	r2, [r3, #0]
 8006b80:	e02c      	b.n	8006bdc <USB_EPStartXfer+0x1bf0>
 8006b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	785b      	ldrb	r3, [r3, #1]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d124      	bne.n	8006bdc <USB_EPStartXfer+0x1bf0>
 8006b92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba8:	4413      	add	r3, r2
 8006baa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	011a      	lsls	r2, r3, #4
 8006bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bc6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006bca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bd4:	801a      	strh	r2, [r3, #0]
 8006bd6:	e001      	b.n	8006bdc <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e03a      	b.n	8006c52 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	881b      	ldrh	r3, [r3, #0]
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c02:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006c06:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006c0a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c0e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006c12:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006c16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c1a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	441a      	add	r2, r3
 8006c38:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	785b      	ldrb	r3, [r3, #1]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d020      	beq.n	8006cb0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	881b      	ldrh	r3, [r3, #0]
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c84:	81bb      	strh	r3, [r7, #12]
 8006c86:	89bb      	ldrh	r3, [r7, #12]
 8006c88:	f083 0310 	eor.w	r3, r3, #16
 8006c8c:	81bb      	strh	r3, [r7, #12]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	441a      	add	r2, r3
 8006c98:	89bb      	ldrh	r3, [r7, #12]
 8006c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	8013      	strh	r3, [r2, #0]
 8006cae:	e01f      	b.n	8006cf0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	4413      	add	r3, r2
 8006cba:	881b      	ldrh	r3, [r3, #0]
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc6:	81fb      	strh	r3, [r7, #14]
 8006cc8:	89fb      	ldrh	r3, [r7, #14]
 8006cca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006cce:	81fb      	strh	r3, [r7, #14]
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	441a      	add	r2, r3
 8006cda:	89fb      	ldrh	r3, [r7, #14]
 8006cdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ce0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3714      	adds	r7, #20
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bc80      	pop	{r7}
 8006cfa:	4770      	bx	lr

08006cfc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b087      	sub	sp, #28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	7b1b      	ldrb	r3, [r3, #12]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f040 809d 	bne.w	8006e4a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	785b      	ldrb	r3, [r3, #1]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d04c      	beq.n	8006db2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	823b      	strh	r3, [r7, #16]
 8006d26:	8a3b      	ldrh	r3, [r7, #16]
 8006d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d01b      	beq.n	8006d68 <USB_EPClearStall+0x6c>
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	4413      	add	r3, r2
 8006d3a:	881b      	ldrh	r3, [r3, #0]
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d46:	81fb      	strh	r3, [r7, #14]
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	441a      	add	r2, r3
 8006d52:	89fb      	ldrh	r3, [r7, #14]
 8006d54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	78db      	ldrb	r3, [r3, #3]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d06c      	beq.n	8006e4a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d86:	81bb      	strh	r3, [r7, #12]
 8006d88:	89bb      	ldrh	r3, [r7, #12]
 8006d8a:	f083 0320 	eor.w	r3, r3, #32
 8006d8e:	81bb      	strh	r3, [r7, #12]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	441a      	add	r2, r3
 8006d9a:	89bb      	ldrh	r3, [r7, #12]
 8006d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006da4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	8013      	strh	r3, [r2, #0]
 8006db0:	e04b      	b.n	8006e4a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	881b      	ldrh	r3, [r3, #0]
 8006dbe:	82fb      	strh	r3, [r7, #22]
 8006dc0:	8afb      	ldrh	r3, [r7, #22]
 8006dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d01b      	beq.n	8006e02 <USB_EPClearStall+0x106>
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	881b      	ldrh	r3, [r3, #0]
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de0:	82bb      	strh	r3, [r7, #20]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	441a      	add	r2, r3
 8006dec:	8abb      	ldrh	r3, [r7, #20]
 8006dee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006df2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006df6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e18:	827b      	strh	r3, [r7, #18]
 8006e1a:	8a7b      	ldrh	r3, [r7, #18]
 8006e1c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e20:	827b      	strh	r3, [r7, #18]
 8006e22:	8a7b      	ldrh	r3, [r7, #18]
 8006e24:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e28:	827b      	strh	r3, [r7, #18]
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	441a      	add	r2, r3
 8006e34:	8a7b      	ldrh	r3, [r7, #18]
 8006e36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	371c      	adds	r7, #28
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bc80      	pop	{r7}
 8006e54:	4770      	bx	lr

08006e56 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b083      	sub	sp, #12
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	460b      	mov	r3, r1
 8006e60:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006e62:	78fb      	ldrb	r3, [r7, #3]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d103      	bne.n	8006e70 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2280      	movs	r2, #128	; 0x80
 8006e6c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bc80      	pop	{r7}
 8006e7a:	4770      	bx	lr

08006e7c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bc80      	pop	{r7}
 8006e8e:	4770      	bx	lr

08006e90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bc80      	pop	{r7}
 8006eac:	4770      	bx	lr

08006eae <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b08d      	sub	sp, #52	; 0x34
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	60f8      	str	r0, [r7, #12]
 8006eb6:	60b9      	str	r1, [r7, #8]
 8006eb8:	4611      	mov	r1, r2
 8006eba:	461a      	mov	r2, r3
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	80fb      	strh	r3, [r7, #6]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ec4:	88bb      	ldrh	r3, [r7, #4]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	085b      	lsrs	r3, r3, #1
 8006eca:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ed4:	88fb      	ldrh	r3, [r7, #6]
 8006ed6:	005a      	lsls	r2, r3, #1
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ee0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ee6:	e01e      	b.n	8006f26 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	021b      	lsls	r3, r3, #8
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	461a      	mov	r2, r3
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f10:	3302      	adds	r3, #2
 8006f12:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f16:	3302      	adds	r3, #2
 8006f18:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f22:	3b01      	subs	r3, #1
 8006f24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1dd      	bne.n	8006ee8 <USB_WritePMA+0x3a>
  }
}
 8006f2c:	bf00      	nop
 8006f2e:	bf00      	nop
 8006f30:	3734      	adds	r7, #52	; 0x34
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bc80      	pop	{r7}
 8006f36:	4770      	bx	lr

08006f38 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b08b      	sub	sp, #44	; 0x2c
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	4611      	mov	r1, r2
 8006f44:	461a      	mov	r2, r3
 8006f46:	460b      	mov	r3, r1
 8006f48:	80fb      	strh	r3, [r7, #6]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006f4e:	88bb      	ldrh	r3, [r7, #4]
 8006f50:	085b      	lsrs	r3, r3, #1
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f5e:	88fb      	ldrh	r3, [r7, #6]
 8006f60:	005a      	lsls	r2, r3, #1
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	4413      	add	r3, r2
 8006f66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f6a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f70:	e01b      	b.n	8006faa <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006f72:	6a3b      	ldr	r3, [r7, #32]
 8006f74:	881b      	ldrh	r3, [r3, #0]
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006f7a:	6a3b      	ldr	r3, [r7, #32]
 8006f7c:	3302      	adds	r3, #2
 8006f7e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	b2da      	uxtb	r2, r3
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	0a1b      	lsrs	r3, r3, #8
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006f9e:	6a3b      	ldr	r3, [r7, #32]
 8006fa0:	3302      	adds	r3, #2
 8006fa2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1e0      	bne.n	8006f72 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006fb0:	88bb      	ldrh	r3, [r7, #4]
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d007      	beq.n	8006fcc <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006fbc:	6a3b      	ldr	r3, [r7, #32]
 8006fbe:	881b      	ldrh	r3, [r3, #0]
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	701a      	strb	r2, [r3, #0]
  }
}
 8006fcc:	bf00      	nop
 8006fce:	372c      	adds	r7, #44	; 0x2c
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bc80      	pop	{r7}
 8006fd4:	4770      	bx	lr

08006fd6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b084      	sub	sp, #16
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
 8006fde:	460b      	mov	r3, r1
 8006fe0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	7c1b      	ldrb	r3, [r3, #16]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d115      	bne.n	800701a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006fee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	2181      	movs	r1, #129	; 0x81
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f002 fc19 	bl	800982e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007002:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007006:	2202      	movs	r2, #2
 8007008:	2101      	movs	r1, #1
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f002 fc0f 	bl	800982e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8007018:	e012      	b.n	8007040 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800701a:	2340      	movs	r3, #64	; 0x40
 800701c:	2202      	movs	r2, #2
 800701e:	2181      	movs	r1, #129	; 0x81
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f002 fc04 	bl	800982e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800702c:	2340      	movs	r3, #64	; 0x40
 800702e:	2202      	movs	r2, #2
 8007030:	2101      	movs	r1, #1
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f002 fbfb 	bl	800982e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007040:	2308      	movs	r3, #8
 8007042:	2203      	movs	r2, #3
 8007044:	2182      	movs	r1, #130	; 0x82
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f002 fbf1 	bl	800982e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8007052:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007056:	f002 fd11 	bl	8009a7c <USBD_static_malloc>
 800705a:	4602      	mov	r2, r0
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007068:	2b00      	cmp	r3, #0
 800706a:	d102      	bne.n	8007072 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800706c:	2301      	movs	r3, #1
 800706e:	73fb      	strb	r3, [r7, #15]
 8007070:	e026      	b.n	80070c0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007078:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	2200      	movs	r2, #0
 8007088:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	2200      	movs	r2, #0
 8007090:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	7c1b      	ldrb	r3, [r3, #16]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d109      	bne.n	80070b0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070a6:	2101      	movs	r1, #1
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f002 fcb1 	bl	8009a10 <USBD_LL_PrepareReceive>
 80070ae:	e007      	b.n	80070c0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070b6:	2340      	movs	r3, #64	; 0x40
 80070b8:	2101      	movs	r1, #1
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f002 fca8 	bl	8009a10 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80070c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b084      	sub	sp, #16
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
 80070d2:	460b      	mov	r3, r1
 80070d4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80070d6:	2300      	movs	r3, #0
 80070d8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80070da:	2181      	movs	r1, #129	; 0x81
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f002 fbcc 	bl	800987a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80070e8:	2101      	movs	r1, #1
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f002 fbc5 	bl	800987a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80070f8:	2182      	movs	r1, #130	; 0x82
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f002 fbbd 	bl	800987a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00e      	beq.n	800712e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007120:	4618      	mov	r0, r3
 8007122:	f002 fcb7 	bl	8009a94 <USBD_static_free>
    pdev->pClassData = NULL;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800712e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007148:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800714a:	2300      	movs	r3, #0
 800714c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800714e:	2300      	movs	r3, #0
 8007150:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007152:	2300      	movs	r3, #0
 8007154:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800715e:	2b00      	cmp	r3, #0
 8007160:	d039      	beq.n	80071d6 <USBD_CDC_Setup+0x9e>
 8007162:	2b20      	cmp	r3, #32
 8007164:	d17f      	bne.n	8007266 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	88db      	ldrh	r3, [r3, #6]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d029      	beq.n	80071c2 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	b25b      	sxtb	r3, r3
 8007174:	2b00      	cmp	r3, #0
 8007176:	da11      	bge.n	800719c <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	683a      	ldr	r2, [r7, #0]
 8007182:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8007184:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	88d2      	ldrh	r2, [r2, #6]
 800718a:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800718c:	6939      	ldr	r1, [r7, #16]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	88db      	ldrh	r3, [r3, #6]
 8007192:	461a      	mov	r2, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f001 f994 	bl	80084c2 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800719a:	e06b      	b.n	8007274 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	785a      	ldrb	r2, [r3, #1]
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	88db      	ldrh	r3, [r3, #6]
 80071aa:	b2da      	uxtb	r2, r3
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80071b2:	6939      	ldr	r1, [r7, #16]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	88db      	ldrh	r3, [r3, #6]
 80071b8:	461a      	mov	r2, r3
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f001 f9af 	bl	800851e <USBD_CtlPrepareRx>
    break;
 80071c0:	e058      	b.n	8007274 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	7850      	ldrb	r0, [r2, #1]
 80071ce:	2200      	movs	r2, #0
 80071d0:	6839      	ldr	r1, [r7, #0]
 80071d2:	4798      	blx	r3
    break;
 80071d4:	e04e      	b.n	8007274 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	785b      	ldrb	r3, [r3, #1]
 80071da:	2b0b      	cmp	r3, #11
 80071dc:	d02e      	beq.n	800723c <USBD_CDC_Setup+0x104>
 80071de:	2b0b      	cmp	r3, #11
 80071e0:	dc38      	bgt.n	8007254 <USBD_CDC_Setup+0x11c>
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d002      	beq.n	80071ec <USBD_CDC_Setup+0xb4>
 80071e6:	2b0a      	cmp	r3, #10
 80071e8:	d014      	beq.n	8007214 <USBD_CDC_Setup+0xdc>
 80071ea:	e033      	b.n	8007254 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	d107      	bne.n	8007206 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80071f6:	f107 030c 	add.w	r3, r7, #12
 80071fa:	2202      	movs	r2, #2
 80071fc:	4619      	mov	r1, r3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f001 f95f 	bl	80084c2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007204:	e02e      	b.n	8007264 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8007206:	6839      	ldr	r1, [r7, #0]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f001 f8f0 	bl	80083ee <USBD_CtlError>
			  ret = USBD_FAIL;
 800720e:	2302      	movs	r3, #2
 8007210:	75fb      	strb	r3, [r7, #23]
      break;
 8007212:	e027      	b.n	8007264 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800721a:	2b03      	cmp	r3, #3
 800721c:	d107      	bne.n	800722e <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800721e:	f107 030f 	add.w	r3, r7, #15
 8007222:	2201      	movs	r2, #1
 8007224:	4619      	mov	r1, r3
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f001 f94b 	bl	80084c2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800722c:	e01a      	b.n	8007264 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800722e:	6839      	ldr	r1, [r7, #0]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f001 f8dc 	bl	80083ee <USBD_CtlError>
			  ret = USBD_FAIL;
 8007236:	2302      	movs	r3, #2
 8007238:	75fb      	strb	r3, [r7, #23]
      break;
 800723a:	e013      	b.n	8007264 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007242:	2b03      	cmp	r3, #3
 8007244:	d00d      	beq.n	8007262 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 8007246:	6839      	ldr	r1, [r7, #0]
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f001 f8d0 	bl	80083ee <USBD_CtlError>
			  ret = USBD_FAIL;
 800724e:	2302      	movs	r3, #2
 8007250:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007252:	e006      	b.n	8007262 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 8007254:	6839      	ldr	r1, [r7, #0]
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f001 f8c9 	bl	80083ee <USBD_CtlError>
      ret = USBD_FAIL;
 800725c:	2302      	movs	r3, #2
 800725e:	75fb      	strb	r3, [r7, #23]
      break;
 8007260:	e000      	b.n	8007264 <USBD_CDC_Setup+0x12c>
      break;
 8007262:	bf00      	nop
    }
    break;
 8007264:	e006      	b.n	8007274 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 8007266:	6839      	ldr	r1, [r7, #0]
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f001 f8c0 	bl	80083ee <USBD_CtlError>
    ret = USBD_FAIL;
 800726e:	2302      	movs	r3, #2
 8007270:	75fb      	strb	r3, [r7, #23]
    break;
 8007272:	bf00      	nop
  }

  return ret;
 8007274:	7dfb      	ldrb	r3, [r7, #23]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3718      	adds	r7, #24
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b084      	sub	sp, #16
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	460b      	mov	r3, r1
 8007288:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007290:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007298:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d03a      	beq.n	800731a <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80072a4:	78fa      	ldrb	r2, [r7, #3]
 80072a6:	6879      	ldr	r1, [r7, #4]
 80072a8:	4613      	mov	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	440b      	add	r3, r1
 80072b2:	331c      	adds	r3, #28
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d029      	beq.n	800730e <USBD_CDC_DataIn+0x90>
 80072ba:	78fa      	ldrb	r2, [r7, #3]
 80072bc:	6879      	ldr	r1, [r7, #4]
 80072be:	4613      	mov	r3, r2
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4413      	add	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	440b      	add	r3, r1
 80072c8:	331c      	adds	r3, #28
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	78f9      	ldrb	r1, [r7, #3]
 80072ce:	68b8      	ldr	r0, [r7, #8]
 80072d0:	460b      	mov	r3, r1
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	440b      	add	r3, r1
 80072d6:	00db      	lsls	r3, r3, #3
 80072d8:	4403      	add	r3, r0
 80072da:	3338      	adds	r3, #56	; 0x38
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	fbb2 f1f3 	udiv	r1, r2, r3
 80072e2:	fb01 f303 	mul.w	r3, r1, r3
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d110      	bne.n	800730e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80072ec:	78fa      	ldrb	r2, [r7, #3]
 80072ee:	6879      	ldr	r1, [r7, #4]
 80072f0:	4613      	mov	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	4413      	add	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	440b      	add	r3, r1
 80072fa:	331c      	adds	r3, #28
 80072fc:	2200      	movs	r2, #0
 80072fe:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8007300:	78f9      	ldrb	r1, [r7, #3]
 8007302:	2300      	movs	r3, #0
 8007304:	2200      	movs	r2, #0
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f002 fb5f 	bl	80099ca <USBD_LL_Transmit>
 800730c:	e003      	b.n	8007316 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007316:	2300      	movs	r3, #0
 8007318:	e000      	b.n	800731c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800731a:	2302      	movs	r3, #2
  }
}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	460b      	mov	r3, r1
 800732e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007336:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8007338:	78fb      	ldrb	r3, [r7, #3]
 800733a:	4619      	mov	r1, r3
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f002 fb8a 	bl	8009a56 <USBD_LL_GetRxDataSize>
 8007342:	4602      	mov	r2, r0
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00d      	beq.n	8007370 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007368:	4611      	mov	r1, r2
 800736a:	4798      	blx	r3

    return USBD_OK;
 800736c:	2300      	movs	r3, #0
 800736e:	e000      	b.n	8007372 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007370:	2302      	movs	r3, #2
  }
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b084      	sub	sp, #16
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007388:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007390:	2b00      	cmp	r3, #0
 8007392:	d015      	beq.n	80073c0 <USBD_CDC_EP0_RxReady+0x46>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800739a:	2bff      	cmp	r3, #255	; 0xff
 800739c:	d010      	beq.n	80073c0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80073ac:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80073b4:	b292      	uxth	r2, r2
 80073b6:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	22ff      	movs	r2, #255	; 0xff
 80073bc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
	...

080073cc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2243      	movs	r2, #67	; 0x43
 80073d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80073da:	4b03      	ldr	r3, [pc, #12]	; (80073e8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80073dc:	4618      	mov	r0, r3
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bc80      	pop	{r7}
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	200001f8 	.word	0x200001f8

080073ec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2243      	movs	r2, #67	; 0x43
 80073f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80073fa:	4b03      	ldr	r3, [pc, #12]	; (8007408 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	bc80      	pop	{r7}
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	200001b4 	.word	0x200001b4

0800740c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2243      	movs	r2, #67	; 0x43
 8007418:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800741a:	4b03      	ldr	r3, [pc, #12]	; (8007428 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800741c:	4618      	mov	r0, r3
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	bc80      	pop	{r7}
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	2000023c 	.word	0x2000023c

0800742c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	220a      	movs	r2, #10
 8007438:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800743a:	4b03      	ldr	r3, [pc, #12]	; (8007448 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800743c:	4618      	mov	r0, r3
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	bc80      	pop	{r7}
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	20000170 	.word	0x20000170

0800744c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007456:	2302      	movs	r3, #2
 8007458:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d005      	beq.n	800746c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8007468:	2300      	movs	r3, #0
 800746a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800746c:	7bfb      	ldrb	r3, [r7, #15]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	bc80      	pop	{r7}
 8007476:	4770      	bx	lr

08007478 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8007478:	b480      	push	{r7}
 800747a:	b087      	sub	sp, #28
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	4613      	mov	r3, r2
 8007484:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800748c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007496:	88fa      	ldrh	r2, [r7, #6]
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	371c      	adds	r7, #28
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bc80      	pop	{r7}
 80074a8:	4770      	bx	lr

080074aa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80074aa:	b480      	push	{r7}
 80074ac:	b085      	sub	sp, #20
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
 80074b2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80074ba:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bc80      	pop	{r7}
 80074ce:	4770      	bx	lr

080074d0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80074de:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d01c      	beq.n	8007524 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d115      	bne.n	8007520 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007512:	b29b      	uxth	r3, r3
 8007514:	2181      	movs	r1, #129	; 0x81
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f002 fa57 	bl	80099ca <USBD_LL_Transmit>

      return USBD_OK;
 800751c:	2300      	movs	r3, #0
 800751e:	e002      	b.n	8007526 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007520:	2301      	movs	r3, #1
 8007522:	e000      	b.n	8007526 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007524:	2302      	movs	r3, #2
  }
}
 8007526:	4618      	mov	r0, r3
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b084      	sub	sp, #16
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800753c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007544:	2b00      	cmp	r3, #0
 8007546:	d017      	beq.n	8007578 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	7c1b      	ldrb	r3, [r3, #16]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d109      	bne.n	8007564 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007556:	f44f 7300 	mov.w	r3, #512	; 0x200
 800755a:	2101      	movs	r1, #1
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f002 fa57 	bl	8009a10 <USBD_LL_PrepareReceive>
 8007562:	e007      	b.n	8007574 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800756a:	2340      	movs	r3, #64	; 0x40
 800756c:	2101      	movs	r1, #1
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f002 fa4e 	bl	8009a10 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007574:	2300      	movs	r3, #0
 8007576:	e000      	b.n	800757a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007578:	2302      	movs	r3, #2
  }
}
 800757a:	4618      	mov	r0, r3
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b084      	sub	sp, #16
 8007586:	af00      	add	r7, sp, #0
 8007588:	60f8      	str	r0, [r7, #12]
 800758a:	60b9      	str	r1, [r7, #8]
 800758c:	4613      	mov	r3, r2
 800758e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007596:	2302      	movs	r3, #2
 8007598:	e01a      	b.n	80075d0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d003      	beq.n	80075ac <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d003      	beq.n	80075ba <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	68ba      	ldr	r2, [r7, #8]
 80075b6:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	79fa      	ldrb	r2, [r7, #7]
 80075c6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f002 f8bb 	bl	8009744 <USBD_LL_Init>

  return USBD_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d006      	beq.n	80075fa <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80075f4:	2300      	movs	r3, #0
 80075f6:	73fb      	strb	r3, [r7, #15]
 80075f8:	e001      	b.n	80075fe <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80075fa:	2302      	movs	r3, #2
 80075fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	bc80      	pop	{r7}
 8007608:	4770      	bx	lr

0800760a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b082      	sub	sp, #8
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f002 f8f0 	bl	80097f8 <USBD_LL_Start>

  return USBD_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8007622:	b480      	push	{r7}
 8007624:	b083      	sub	sp, #12
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	bc80      	pop	{r7}
 8007634:	4770      	bx	lr

08007636 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b084      	sub	sp, #16
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	460b      	mov	r3, r1
 8007640:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007642:	2302      	movs	r3, #2
 8007644:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00c      	beq.n	800766a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	78fa      	ldrb	r2, [r7, #3]
 800765a:	4611      	mov	r1, r2
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	4798      	blx	r3
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007666:	2300      	movs	r3, #0
 8007668:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800766a:	7bfb      	ldrb	r3, [r7, #15]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	460b      	mov	r3, r1
 800767e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	78fa      	ldrb	r2, [r7, #3]
 800768a:	4611      	mov	r1, r2
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	4798      	blx	r3
  return USBD_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3708      	adds	r7, #8
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b082      	sub	sp, #8
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f000 fe62 	bl	8008376 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80076c0:	461a      	mov	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80076ce:	f003 031f 	and.w	r3, r3, #31
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d016      	beq.n	8007704 <USBD_LL_SetupStage+0x6a>
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d81c      	bhi.n	8007714 <USBD_LL_SetupStage+0x7a>
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d002      	beq.n	80076e4 <USBD_LL_SetupStage+0x4a>
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d008      	beq.n	80076f4 <USBD_LL_SetupStage+0x5a>
 80076e2:	e017      	b.n	8007714 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80076ea:	4619      	mov	r1, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 f9c5 	bl	8007a7c <USBD_StdDevReq>
    break;
 80076f2:	e01a      	b.n	800772a <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80076fa:	4619      	mov	r1, r3
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fa27 	bl	8007b50 <USBD_StdItfReq>
    break;
 8007702:	e012      	b.n	800772a <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800770a:	4619      	mov	r1, r3
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fa67 	bl	8007be0 <USBD_StdEPReq>
    break;
 8007712:	e00a      	b.n	800772a <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800771a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800771e:	b2db      	uxtb	r3, r3
 8007720:	4619      	mov	r1, r3
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f002 f8c8 	bl	80098b8 <USBD_LL_StallEP>
    break;
 8007728:	bf00      	nop
  }

  return USBD_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	460b      	mov	r3, r1
 800773e:	607a      	str	r2, [r7, #4]
 8007740:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8007742:	7afb      	ldrb	r3, [r7, #11]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d14b      	bne.n	80077e0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800774e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007756:	2b03      	cmp	r3, #3
 8007758:	d134      	bne.n	80077c4 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	68da      	ldr	r2, [r3, #12]
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	429a      	cmp	r2, r3
 8007764:	d919      	bls.n	800779a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	68da      	ldr	r2, [r3, #12]
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	1ad2      	subs	r2, r2, r3
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	68da      	ldr	r2, [r3, #12]
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800777c:	429a      	cmp	r2, r3
 800777e:	d203      	bcs.n	8007788 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8007784:	b29b      	uxth	r3, r3
 8007786:	e002      	b.n	800778e <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800778c:	b29b      	uxth	r3, r3
 800778e:	461a      	mov	r2, r3
 8007790:	6879      	ldr	r1, [r7, #4]
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f000 fee1 	bl	800855a <USBD_CtlContinueRx>
 8007798:	e038      	b.n	800780c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00a      	beq.n	80077bc <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80077ac:	2b03      	cmp	r3, #3
 80077ae:	d105      	bne.n	80077bc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f000 fede 	bl	800857e <USBD_CtlSendStatus>
 80077c2:	e023      	b.n	800780c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80077ca:	2b05      	cmp	r3, #5
 80077cc:	d11e      	bne.n	800780c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80077d6:	2100      	movs	r1, #0
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f002 f86d 	bl	80098b8 <USBD_LL_StallEP>
 80077de:	e015      	b.n	800780c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00d      	beq.n	8007808 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80077f2:	2b03      	cmp	r3, #3
 80077f4:	d108      	bne.n	8007808 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80077fc:	699b      	ldr	r3, [r3, #24]
 80077fe:	7afa      	ldrb	r2, [r7, #11]
 8007800:	4611      	mov	r1, r2
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	4798      	blx	r3
 8007806:	e001      	b.n	800780c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007808:	2302      	movs	r3, #2
 800780a:	e000      	b.n	800780e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3718      	adds	r7, #24
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b086      	sub	sp, #24
 800781a:	af00      	add	r7, sp, #0
 800781c:	60f8      	str	r0, [r7, #12]
 800781e:	460b      	mov	r3, r1
 8007820:	607a      	str	r2, [r7, #4]
 8007822:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007824:	7afb      	ldrb	r3, [r7, #11]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d17f      	bne.n	800792a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	3314      	adds	r3, #20
 800782e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007836:	2b02      	cmp	r3, #2
 8007838:	d15c      	bne.n	80078f4 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	68da      	ldr	r2, [r3, #12]
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	429a      	cmp	r2, r3
 8007844:	d915      	bls.n	8007872 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	68da      	ldr	r2, [r3, #12]
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	1ad2      	subs	r2, r2, r3
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	b29b      	uxth	r3, r3
 800785a:	461a      	mov	r2, r3
 800785c:	6879      	ldr	r1, [r7, #4]
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f000 fe4b 	bl	80084fa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007864:	2300      	movs	r3, #0
 8007866:	2200      	movs	r2, #0
 8007868:	2100      	movs	r1, #0
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f002 f8d0 	bl	8009a10 <USBD_LL_PrepareReceive>
 8007870:	e04e      	b.n	8007910 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	6912      	ldr	r2, [r2, #16]
 800787a:	fbb3 f1f2 	udiv	r1, r3, r2
 800787e:	fb01 f202 	mul.w	r2, r1, r2
 8007882:	1a9b      	subs	r3, r3, r2
 8007884:	2b00      	cmp	r3, #0
 8007886:	d11c      	bne.n	80078c2 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	689a      	ldr	r2, [r3, #8]
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007890:	429a      	cmp	r2, r3
 8007892:	d316      	bcc.n	80078c2 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	689a      	ldr	r2, [r3, #8]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800789e:	429a      	cmp	r2, r3
 80078a0:	d20f      	bcs.n	80078c2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80078a2:	2200      	movs	r2, #0
 80078a4:	2100      	movs	r1, #0
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f000 fe27 	bl	80084fa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80078b4:	2300      	movs	r3, #0
 80078b6:	2200      	movs	r2, #0
 80078b8:	2100      	movs	r1, #0
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f002 f8a8 	bl	8009a10 <USBD_LL_PrepareReceive>
 80078c0:	e026      	b.n	8007910 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00a      	beq.n	80078e4 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80078d4:	2b03      	cmp	r3, #3
 80078d6:	d105      	bne.n	80078e4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80078e4:	2180      	movs	r1, #128	; 0x80
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f001 ffe6 	bl	80098b8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f000 fe59 	bl	80085a4 <USBD_CtlReceiveStatus>
 80078f2:	e00d      	b.n	8007910 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80078fa:	2b04      	cmp	r3, #4
 80078fc:	d004      	beq.n	8007908 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007904:	2b00      	cmp	r3, #0
 8007906:	d103      	bne.n	8007910 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007908:	2180      	movs	r1, #128	; 0x80
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f001 ffd4 	bl	80098b8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8007916:	2b01      	cmp	r3, #1
 8007918:	d11d      	bne.n	8007956 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	f7ff fe81 	bl	8007622 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8007928:	e015      	b.n	8007956 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00d      	beq.n	8007952 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800793c:	2b03      	cmp	r3, #3
 800793e:	d108      	bne.n	8007952 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007946:	695b      	ldr	r3, [r3, #20]
 8007948:	7afa      	ldrb	r2, [r7, #11]
 800794a:	4611      	mov	r1, r2
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	4798      	blx	r3
 8007950:	e001      	b.n	8007956 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007952:	2302      	movs	r3, #2
 8007954:	e000      	b.n	8007958 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3718      	adds	r7, #24
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007968:	2340      	movs	r3, #64	; 0x40
 800796a:	2200      	movs	r2, #0
 800796c:	2100      	movs	r1, #0
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f001 ff5d 	bl	800982e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2240      	movs	r2, #64	; 0x40
 8007980:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007984:	2340      	movs	r3, #64	; 0x40
 8007986:	2200      	movs	r2, #0
 8007988:	2180      	movs	r1, #128	; 0x80
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f001 ff4f 	bl	800982e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2240      	movs	r2, #64	; 0x40
 800799a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d009      	beq.n	80079d8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	6852      	ldr	r2, [r2, #4]
 80079d0:	b2d2      	uxtb	r2, r2
 80079d2:	4611      	mov	r1, r2
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	4798      	blx	r3
  }

  return USBD_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b083      	sub	sp, #12
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	460b      	mov	r3, r1
 80079ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	78fa      	ldrb	r2, [r7, #3]
 80079f2:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bc80      	pop	{r7}
 80079fe:	4770      	bx	lr

08007a00 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2204      	movs	r2, #4
 8007a18:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	370c      	adds	r7, #12
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bc80      	pop	{r7}
 8007a26:	4770      	bx	lr

08007a28 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	370c      	adds	r7, #12
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bc80      	pop	{r7}
 8007a46:	4770      	bx	lr

08007a48 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007a56:	2b03      	cmp	r3, #3
 8007a58:	d10b      	bne.n	8007a72 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a60:	69db      	ldr	r3, [r3, #28]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d005      	beq.n	8007a72 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a6c:	69db      	ldr	r3, [r3, #28]
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a86:	2300      	movs	r3, #0
 8007a88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a92:	2b40      	cmp	r3, #64	; 0x40
 8007a94:	d005      	beq.n	8007aa2 <USBD_StdDevReq+0x26>
 8007a96:	2b40      	cmp	r3, #64	; 0x40
 8007a98:	d84f      	bhi.n	8007b3a <USBD_StdDevReq+0xbe>
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d009      	beq.n	8007ab2 <USBD_StdDevReq+0x36>
 8007a9e:	2b20      	cmp	r3, #32
 8007aa0:	d14b      	bne.n	8007b3a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	4798      	blx	r3
    break;
 8007ab0:	e048      	b.n	8007b44 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	785b      	ldrb	r3, [r3, #1]
 8007ab6:	2b09      	cmp	r3, #9
 8007ab8:	d839      	bhi.n	8007b2e <USBD_StdDevReq+0xb2>
 8007aba:	a201      	add	r2, pc, #4	; (adr r2, 8007ac0 <USBD_StdDevReq+0x44>)
 8007abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac0:	08007b11 	.word	0x08007b11
 8007ac4:	08007b25 	.word	0x08007b25
 8007ac8:	08007b2f 	.word	0x08007b2f
 8007acc:	08007b1b 	.word	0x08007b1b
 8007ad0:	08007b2f 	.word	0x08007b2f
 8007ad4:	08007af3 	.word	0x08007af3
 8007ad8:	08007ae9 	.word	0x08007ae9
 8007adc:	08007b2f 	.word	0x08007b2f
 8007ae0:	08007b07 	.word	0x08007b07
 8007ae4:	08007afd 	.word	0x08007afd
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8007ae8:	6839      	ldr	r1, [r7, #0]
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f9da 	bl	8007ea4 <USBD_GetDescriptor>
      break;
 8007af0:	e022      	b.n	8007b38 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8007af2:	6839      	ldr	r1, [r7, #0]
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 facf 	bl	8008098 <USBD_SetAddress>
      break;
 8007afa:	e01d      	b.n	8007b38 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fb0e 	bl	8008120 <USBD_SetConfig>
      break;
 8007b04:	e018      	b.n	8007b38 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8007b06:	6839      	ldr	r1, [r7, #0]
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fb97 	bl	800823c <USBD_GetConfig>
      break;
 8007b0e:	e013      	b.n	8007b38 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007b10:	6839      	ldr	r1, [r7, #0]
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fbc7 	bl	80082a6 <USBD_GetStatus>
      break;
 8007b18:	e00e      	b.n	8007b38 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 fbf5 	bl	800830c <USBD_SetFeature>
      break;
 8007b22:	e009      	b.n	8007b38 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fc04 	bl	8008334 <USBD_ClrFeature>
      break;
 8007b2c:	e004      	b.n	8007b38 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fc5c 	bl	80083ee <USBD_CtlError>
      break;
 8007b36:	bf00      	nop
    }
    break;
 8007b38:	e004      	b.n	8007b44 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8007b3a:	6839      	ldr	r1, [r7, #0]
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 fc56 	bl	80083ee <USBD_CtlError>
    break;
 8007b42:	bf00      	nop
  }

  return ret;
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop

08007b50 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b66:	2b40      	cmp	r3, #64	; 0x40
 8007b68:	d005      	beq.n	8007b76 <USBD_StdItfReq+0x26>
 8007b6a:	2b40      	cmp	r3, #64	; 0x40
 8007b6c:	d82e      	bhi.n	8007bcc <USBD_StdItfReq+0x7c>
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <USBD_StdItfReq+0x26>
 8007b72:	2b20      	cmp	r3, #32
 8007b74:	d12a      	bne.n	8007bcc <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d81d      	bhi.n	8007bbe <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	889b      	ldrh	r3, [r3, #4]
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d813      	bhi.n	8007bb4 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	6839      	ldr	r1, [r7, #0]
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	4798      	blx	r3
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	88db      	ldrh	r3, [r3, #6]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d110      	bne.n	8007bc8 <USBD_StdItfReq+0x78>
 8007ba6:	7bfb      	ldrb	r3, [r7, #15]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10d      	bne.n	8007bc8 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fce6 	bl	800857e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007bb2:	e009      	b.n	8007bc8 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8007bb4:	6839      	ldr	r1, [r7, #0]
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fc19 	bl	80083ee <USBD_CtlError>
      break;
 8007bbc:	e004      	b.n	8007bc8 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8007bbe:	6839      	ldr	r1, [r7, #0]
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fc14 	bl	80083ee <USBD_CtlError>
      break;
 8007bc6:	e000      	b.n	8007bca <USBD_StdItfReq+0x7a>
      break;
 8007bc8:	bf00      	nop
    }
    break;
 8007bca:	e004      	b.n	8007bd6 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fc0d 	bl	80083ee <USBD_CtlError>
    break;
 8007bd4:	bf00      	nop
  }

  return USBD_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	889b      	ldrh	r3, [r3, #4]
 8007bf2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bfc:	2b40      	cmp	r3, #64	; 0x40
 8007bfe:	d007      	beq.n	8007c10 <USBD_StdEPReq+0x30>
 8007c00:	2b40      	cmp	r3, #64	; 0x40
 8007c02:	f200 8144 	bhi.w	8007e8e <USBD_StdEPReq+0x2ae>
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00a      	beq.n	8007c20 <USBD_StdEPReq+0x40>
 8007c0a:	2b20      	cmp	r3, #32
 8007c0c:	f040 813f 	bne.w	8007e8e <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	6839      	ldr	r1, [r7, #0]
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	4798      	blx	r3
    break;
 8007c1e:	e13b      	b.n	8007e98 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c28:	2b20      	cmp	r3, #32
 8007c2a:	d10a      	bne.n	8007c42 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	6839      	ldr	r1, [r7, #0]
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	4798      	blx	r3
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	73fb      	strb	r3, [r7, #15]

      return ret;
 8007c3e:	7bfb      	ldrb	r3, [r7, #15]
 8007c40:	e12b      	b.n	8007e9a <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	785b      	ldrb	r3, [r3, #1]
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	d007      	beq.n	8007c5a <USBD_StdEPReq+0x7a>
 8007c4a:	2b03      	cmp	r3, #3
 8007c4c:	f300 8119 	bgt.w	8007e82 <USBD_StdEPReq+0x2a2>
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d072      	beq.n	8007d3a <USBD_StdEPReq+0x15a>
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d03a      	beq.n	8007cce <USBD_StdEPReq+0xee>
 8007c58:	e113      	b.n	8007e82 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d002      	beq.n	8007c6a <USBD_StdEPReq+0x8a>
 8007c64:	2b03      	cmp	r3, #3
 8007c66:	d015      	beq.n	8007c94 <USBD_StdEPReq+0xb4>
 8007c68:	e02b      	b.n	8007cc2 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c6a:	7bbb      	ldrb	r3, [r7, #14]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00c      	beq.n	8007c8a <USBD_StdEPReq+0xaa>
 8007c70:	7bbb      	ldrb	r3, [r7, #14]
 8007c72:	2b80      	cmp	r3, #128	; 0x80
 8007c74:	d009      	beq.n	8007c8a <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007c76:	7bbb      	ldrb	r3, [r7, #14]
 8007c78:	4619      	mov	r1, r3
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f001 fe1c 	bl	80098b8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007c80:	2180      	movs	r1, #128	; 0x80
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f001 fe18 	bl	80098b8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007c88:	e020      	b.n	8007ccc <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 8007c8a:	6839      	ldr	r1, [r7, #0]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fbae 	bl	80083ee <USBD_CtlError>
        break;
 8007c92:	e01b      	b.n	8007ccc <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	885b      	ldrh	r3, [r3, #2]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d10e      	bne.n	8007cba <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007c9c:	7bbb      	ldrb	r3, [r7, #14]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00b      	beq.n	8007cba <USBD_StdEPReq+0xda>
 8007ca2:	7bbb      	ldrb	r3, [r7, #14]
 8007ca4:	2b80      	cmp	r3, #128	; 0x80
 8007ca6:	d008      	beq.n	8007cba <USBD_StdEPReq+0xda>
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	88db      	ldrh	r3, [r3, #6]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d104      	bne.n	8007cba <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007cb0:	7bbb      	ldrb	r3, [r7, #14]
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f001 fdff 	bl	80098b8 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fc5f 	bl	800857e <USBD_CtlSendStatus>

        break;
 8007cc0:	e004      	b.n	8007ccc <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fb92 	bl	80083ee <USBD_CtlError>
        break;
 8007cca:	bf00      	nop
      }
      break;
 8007ccc:	e0de      	b.n	8007e8c <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d002      	beq.n	8007cde <USBD_StdEPReq+0xfe>
 8007cd8:	2b03      	cmp	r3, #3
 8007cda:	d015      	beq.n	8007d08 <USBD_StdEPReq+0x128>
 8007cdc:	e026      	b.n	8007d2c <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cde:	7bbb      	ldrb	r3, [r7, #14]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00c      	beq.n	8007cfe <USBD_StdEPReq+0x11e>
 8007ce4:	7bbb      	ldrb	r3, [r7, #14]
 8007ce6:	2b80      	cmp	r3, #128	; 0x80
 8007ce8:	d009      	beq.n	8007cfe <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007cea:	7bbb      	ldrb	r3, [r7, #14]
 8007cec:	4619      	mov	r1, r3
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f001 fde2 	bl	80098b8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007cf4:	2180      	movs	r1, #128	; 0x80
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f001 fdde 	bl	80098b8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007cfc:	e01c      	b.n	8007d38 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 fb74 	bl	80083ee <USBD_CtlError>
        break;
 8007d06:	e017      	b.n	8007d38 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	885b      	ldrh	r3, [r3, #2]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d112      	bne.n	8007d36 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007d10:	7bbb      	ldrb	r3, [r7, #14]
 8007d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d004      	beq.n	8007d24 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8007d1a:	7bbb      	ldrb	r3, [r7, #14]
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f001 fde9 	bl	80098f6 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fc2a 	bl	800857e <USBD_CtlSendStatus>
        }
        break;
 8007d2a:	e004      	b.n	8007d36 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fb5d 	bl	80083ee <USBD_CtlError>
        break;
 8007d34:	e000      	b.n	8007d38 <USBD_StdEPReq+0x158>
        break;
 8007d36:	bf00      	nop
      }
      break;
 8007d38:	e0a8      	b.n	8007e8c <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d002      	beq.n	8007d4a <USBD_StdEPReq+0x16a>
 8007d44:	2b03      	cmp	r3, #3
 8007d46:	d031      	beq.n	8007dac <USBD_StdEPReq+0x1cc>
 8007d48:	e095      	b.n	8007e76 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d4a:	7bbb      	ldrb	r3, [r7, #14]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d007      	beq.n	8007d60 <USBD_StdEPReq+0x180>
 8007d50:	7bbb      	ldrb	r3, [r7, #14]
 8007d52:	2b80      	cmp	r3, #128	; 0x80
 8007d54:	d004      	beq.n	8007d60 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fb48 	bl	80083ee <USBD_CtlError>
          break;
 8007d5e:	e08f      	b.n	8007e80 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007d60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	da0b      	bge.n	8007d80 <USBD_StdEPReq+0x1a0>
 8007d68:	7bbb      	ldrb	r3, [r7, #14]
 8007d6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d6e:	4613      	mov	r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4413      	add	r3, r2
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	3310      	adds	r3, #16
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	e00a      	b.n	8007d96 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007d80:	7bbb      	ldrb	r3, [r7, #14]
 8007d82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007d86:	4613      	mov	r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	4413      	add	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	4413      	add	r3, r2
 8007d96:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	2202      	movs	r2, #2
 8007da2:	4619      	mov	r1, r3
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fb8c 	bl	80084c2 <USBD_CtlSendData>
          break;
 8007daa:	e069      	b.n	8007e80 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8007dac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	da11      	bge.n	8007dd8 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007db4:	7bbb      	ldrb	r3, [r7, #14]
 8007db6:	f003 020f 	and.w	r2, r3, #15
 8007dba:	6879      	ldr	r1, [r7, #4]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4413      	add	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	440b      	add	r3, r1
 8007dc6:	3318      	adds	r3, #24
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d117      	bne.n	8007dfe <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8007dce:	6839      	ldr	r1, [r7, #0]
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 fb0c 	bl	80083ee <USBD_CtlError>
            break;
 8007dd6:	e053      	b.n	8007e80 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007dd8:	7bbb      	ldrb	r3, [r7, #14]
 8007dda:	f003 020f 	and.w	r2, r3, #15
 8007dde:	6879      	ldr	r1, [r7, #4]
 8007de0:	4613      	mov	r3, r2
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	4413      	add	r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	440b      	add	r3, r1
 8007dea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d104      	bne.n	8007dfe <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8007df4:	6839      	ldr	r1, [r7, #0]
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 faf9 	bl	80083ee <USBD_CtlError>
            break;
 8007dfc:	e040      	b.n	8007e80 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007dfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	da0b      	bge.n	8007e1e <USBD_StdEPReq+0x23e>
 8007e06:	7bbb      	ldrb	r3, [r7, #14]
 8007e08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4413      	add	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	3310      	adds	r3, #16
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	4413      	add	r3, r2
 8007e1a:	3304      	adds	r3, #4
 8007e1c:	e00a      	b.n	8007e34 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007e1e:	7bbb      	ldrb	r3, [r7, #14]
 8007e20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007e24:	4613      	mov	r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	4413      	add	r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	4413      	add	r3, r2
 8007e34:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007e36:	7bbb      	ldrb	r3, [r7, #14]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d002      	beq.n	8007e42 <USBD_StdEPReq+0x262>
 8007e3c:	7bbb      	ldrb	r3, [r7, #14]
 8007e3e:	2b80      	cmp	r3, #128	; 0x80
 8007e40:	d103      	bne.n	8007e4a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	2200      	movs	r2, #0
 8007e46:	601a      	str	r2, [r3, #0]
 8007e48:	e00e      	b.n	8007e68 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007e4a:	7bbb      	ldrb	r3, [r7, #14]
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f001 fd70 	bl	8009934 <USBD_LL_IsStallEP>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d003      	beq.n	8007e62 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	601a      	str	r2, [r3, #0]
 8007e60:	e002      	b.n	8007e68 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	2200      	movs	r2, #0
 8007e66:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fb27 	bl	80084c2 <USBD_CtlSendData>
          break;
 8007e74:	e004      	b.n	8007e80 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 8007e76:	6839      	ldr	r1, [r7, #0]
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fab8 	bl	80083ee <USBD_CtlError>
        break;
 8007e7e:	bf00      	nop
      }
      break;
 8007e80:	e004      	b.n	8007e8c <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8007e82:	6839      	ldr	r1, [r7, #0]
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fab2 	bl	80083ee <USBD_CtlError>
      break;
 8007e8a:	bf00      	nop
    }
    break;
 8007e8c:	e004      	b.n	8007e98 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8007e8e:	6839      	ldr	r1, [r7, #0]
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 faac 	bl	80083ee <USBD_CtlError>
    break;
 8007e96:	bf00      	nop
  }

  return ret;
 8007e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
	...

08007ea4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	885b      	ldrh	r3, [r3, #2]
 8007eb2:	0a1b      	lsrs	r3, r3, #8
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	2b06      	cmp	r3, #6
 8007eba:	f200 80c9 	bhi.w	8008050 <USBD_GetDescriptor+0x1ac>
 8007ebe:	a201      	add	r2, pc, #4	; (adr r2, 8007ec4 <USBD_GetDescriptor+0x20>)
 8007ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec4:	08007ee1 	.word	0x08007ee1
 8007ec8:	08007ef9 	.word	0x08007ef9
 8007ecc:	08007f39 	.word	0x08007f39
 8007ed0:	08008051 	.word	0x08008051
 8007ed4:	08008051 	.word	0x08008051
 8007ed8:	08007ffd 	.word	0x08007ffd
 8007edc:	08008023 	.word	0x08008023
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	7c12      	ldrb	r2, [r2, #16]
 8007eec:	f107 010a 	add.w	r1, r7, #10
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	4798      	blx	r3
 8007ef4:	60f8      	str	r0, [r7, #12]
    break;
 8007ef6:	e0b0      	b.n	800805a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	7c1b      	ldrb	r3, [r3, #16]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10d      	bne.n	8007f1c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f08:	f107 020a 	add.w	r2, r7, #10
 8007f0c:	4610      	mov	r0, r2
 8007f0e:	4798      	blx	r3
 8007f10:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	3301      	adds	r3, #1
 8007f16:	2202      	movs	r2, #2
 8007f18:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007f1a:	e09e      	b.n	800805a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f24:	f107 020a 	add.w	r2, r7, #10
 8007f28:	4610      	mov	r0, r2
 8007f2a:	4798      	blx	r3
 8007f2c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	3301      	adds	r3, #1
 8007f32:	2202      	movs	r2, #2
 8007f34:	701a      	strb	r2, [r3, #0]
    break;
 8007f36:	e090      	b.n	800805a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	885b      	ldrh	r3, [r3, #2]
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b05      	cmp	r3, #5
 8007f40:	d856      	bhi.n	8007ff0 <USBD_GetDescriptor+0x14c>
 8007f42:	a201      	add	r2, pc, #4	; (adr r2, 8007f48 <USBD_GetDescriptor+0xa4>)
 8007f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f48:	08007f61 	.word	0x08007f61
 8007f4c:	08007f79 	.word	0x08007f79
 8007f50:	08007f91 	.word	0x08007f91
 8007f54:	08007fa9 	.word	0x08007fa9
 8007f58:	08007fc1 	.word	0x08007fc1
 8007f5c:	08007fd9 	.word	0x08007fd9
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	7c12      	ldrb	r2, [r2, #16]
 8007f6c:	f107 010a 	add.w	r1, r7, #10
 8007f70:	4610      	mov	r0, r2
 8007f72:	4798      	blx	r3
 8007f74:	60f8      	str	r0, [r7, #12]
      break;
 8007f76:	e040      	b.n	8007ffa <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	7c12      	ldrb	r2, [r2, #16]
 8007f84:	f107 010a 	add.w	r1, r7, #10
 8007f88:	4610      	mov	r0, r2
 8007f8a:	4798      	blx	r3
 8007f8c:	60f8      	str	r0, [r7, #12]
      break;
 8007f8e:	e034      	b.n	8007ffa <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	7c12      	ldrb	r2, [r2, #16]
 8007f9c:	f107 010a 	add.w	r1, r7, #10
 8007fa0:	4610      	mov	r0, r2
 8007fa2:	4798      	blx	r3
 8007fa4:	60f8      	str	r0, [r7, #12]
      break;
 8007fa6:	e028      	b.n	8007ffa <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	7c12      	ldrb	r2, [r2, #16]
 8007fb4:	f107 010a 	add.w	r1, r7, #10
 8007fb8:	4610      	mov	r0, r2
 8007fba:	4798      	blx	r3
 8007fbc:	60f8      	str	r0, [r7, #12]
      break;
 8007fbe:	e01c      	b.n	8007ffa <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007fc6:	695b      	ldr	r3, [r3, #20]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	7c12      	ldrb	r2, [r2, #16]
 8007fcc:	f107 010a 	add.w	r1, r7, #10
 8007fd0:	4610      	mov	r0, r2
 8007fd2:	4798      	blx	r3
 8007fd4:	60f8      	str	r0, [r7, #12]
      break;
 8007fd6:	e010      	b.n	8007ffa <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	7c12      	ldrb	r2, [r2, #16]
 8007fe4:	f107 010a 	add.w	r1, r7, #10
 8007fe8:	4610      	mov	r0, r2
 8007fea:	4798      	blx	r3
 8007fec:	60f8      	str	r0, [r7, #12]
      break;
 8007fee:	e004      	b.n	8007ffa <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007ff0:	6839      	ldr	r1, [r7, #0]
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f9fb 	bl	80083ee <USBD_CtlError>
      return;
 8007ff8:	e04b      	b.n	8008092 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8007ffa:	e02e      	b.n	800805a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	7c1b      	ldrb	r3, [r3, #16]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d109      	bne.n	8008018 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800800a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800800c:	f107 020a 	add.w	r2, r7, #10
 8008010:	4610      	mov	r0, r2
 8008012:	4798      	blx	r3
 8008014:	60f8      	str	r0, [r7, #12]
      break;
 8008016:	e020      	b.n	800805a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008018:	6839      	ldr	r1, [r7, #0]
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f9e7 	bl	80083ee <USBD_CtlError>
      return;
 8008020:	e037      	b.n	8008092 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	7c1b      	ldrb	r3, [r3, #16]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d10d      	bne.n	8008046 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008032:	f107 020a 	add.w	r2, r7, #10
 8008036:	4610      	mov	r0, r2
 8008038:	4798      	blx	r3
 800803a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	3301      	adds	r3, #1
 8008040:	2207      	movs	r2, #7
 8008042:	701a      	strb	r2, [r3, #0]
      break;
 8008044:	e009      	b.n	800805a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f9d0 	bl	80083ee <USBD_CtlError>
      return;
 800804e:	e020      	b.n	8008092 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8008050:	6839      	ldr	r1, [r7, #0]
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f9cb 	bl	80083ee <USBD_CtlError>
    return;
 8008058:	e01b      	b.n	8008092 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800805a:	897b      	ldrh	r3, [r7, #10]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d011      	beq.n	8008084 <USBD_GetDescriptor+0x1e0>
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	88db      	ldrh	r3, [r3, #6]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00d      	beq.n	8008084 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	88da      	ldrh	r2, [r3, #6]
 800806c:	897b      	ldrh	r3, [r7, #10]
 800806e:	4293      	cmp	r3, r2
 8008070:	bf28      	it	cs
 8008072:	4613      	movcs	r3, r2
 8008074:	b29b      	uxth	r3, r3
 8008076:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8008078:	897b      	ldrh	r3, [r7, #10]
 800807a:	461a      	mov	r2, r3
 800807c:	68f9      	ldr	r1, [r7, #12]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fa1f 	bl	80084c2 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	88db      	ldrh	r3, [r3, #6]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d102      	bne.n	8008092 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fa76 	bl	800857e <USBD_CtlSendStatus>
  }
}
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	889b      	ldrh	r3, [r3, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d130      	bne.n	800810c <USBD_SetAddress+0x74>
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	88db      	ldrh	r3, [r3, #6]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d12c      	bne.n	800810c <USBD_SetAddress+0x74>
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	885b      	ldrh	r3, [r3, #2]
 80080b6:	2b7f      	cmp	r3, #127	; 0x7f
 80080b8:	d828      	bhi.n	800810c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	885b      	ldrh	r3, [r3, #2]
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80080cc:	2b03      	cmp	r3, #3
 80080ce:	d104      	bne.n	80080da <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80080d0:	6839      	ldr	r1, [r7, #0]
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f98b 	bl	80083ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080d8:	e01d      	b.n	8008116 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	7bfa      	ldrb	r2, [r7, #15]
 80080de:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
 80080e4:	4619      	mov	r1, r3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f001 fc50 	bl	800998c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 fa46 	bl	800857e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80080f2:	7bfb      	ldrb	r3, [r7, #15]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d004      	beq.n	8008102 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2202      	movs	r2, #2
 80080fc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008100:	e009      	b.n	8008116 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2201      	movs	r2, #1
 8008106:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800810a:	e004      	b.n	8008116 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f96d 	bl	80083ee <USBD_CtlError>
  }
}
 8008114:	bf00      	nop
 8008116:	bf00      	nop
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
	...

08008120 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	885b      	ldrh	r3, [r3, #2]
 800812e:	b2da      	uxtb	r2, r3
 8008130:	4b41      	ldr	r3, [pc, #260]	; (8008238 <USBD_SetConfig+0x118>)
 8008132:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008134:	4b40      	ldr	r3, [pc, #256]	; (8008238 <USBD_SetConfig+0x118>)
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d904      	bls.n	8008146 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800813c:	6839      	ldr	r1, [r7, #0]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 f955 	bl	80083ee <USBD_CtlError>
 8008144:	e075      	b.n	8008232 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800814c:	2b02      	cmp	r3, #2
 800814e:	d002      	beq.n	8008156 <USBD_SetConfig+0x36>
 8008150:	2b03      	cmp	r3, #3
 8008152:	d023      	beq.n	800819c <USBD_SetConfig+0x7c>
 8008154:	e062      	b.n	800821c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8008156:	4b38      	ldr	r3, [pc, #224]	; (8008238 <USBD_SetConfig+0x118>)
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d01a      	beq.n	8008194 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800815e:	4b36      	ldr	r3, [pc, #216]	; (8008238 <USBD_SetConfig+0x118>)
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	461a      	mov	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2203      	movs	r2, #3
 800816c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008170:	4b31      	ldr	r3, [pc, #196]	; (8008238 <USBD_SetConfig+0x118>)
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	4619      	mov	r1, r3
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f7ff fa5d 	bl	8007636 <USBD_SetClassConfig>
 800817c:	4603      	mov	r3, r0
 800817e:	2b02      	cmp	r3, #2
 8008180:	d104      	bne.n	800818c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f932 	bl	80083ee <USBD_CtlError>
          return;
 800818a:	e052      	b.n	8008232 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 f9f6 	bl	800857e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008192:	e04e      	b.n	8008232 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f9f2 	bl	800857e <USBD_CtlSendStatus>
      break;
 800819a:	e04a      	b.n	8008232 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800819c:	4b26      	ldr	r3, [pc, #152]	; (8008238 <USBD_SetConfig+0x118>)
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d112      	bne.n	80081ca <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2202      	movs	r2, #2
 80081a8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80081ac:	4b22      	ldr	r3, [pc, #136]	; (8008238 <USBD_SetConfig+0x118>)
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	461a      	mov	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80081b6:	4b20      	ldr	r3, [pc, #128]	; (8008238 <USBD_SetConfig+0x118>)
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	4619      	mov	r1, r3
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f7ff fa59 	bl	8007674 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f9db 	bl	800857e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80081c8:	e033      	b.n	8008232 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80081ca:	4b1b      	ldr	r3, [pc, #108]	; (8008238 <USBD_SetConfig+0x118>)
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	461a      	mov	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d01d      	beq.n	8008214 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	4619      	mov	r1, r3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f7ff fa47 	bl	8007674 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80081e6:	4b14      	ldr	r3, [pc, #80]	; (8008238 <USBD_SetConfig+0x118>)
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	461a      	mov	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80081f0:	4b11      	ldr	r3, [pc, #68]	; (8008238 <USBD_SetConfig+0x118>)
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	4619      	mov	r1, r3
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f7ff fa1d 	bl	8007636 <USBD_SetClassConfig>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d104      	bne.n	800820c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8008202:	6839      	ldr	r1, [r7, #0]
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 f8f2 	bl	80083ee <USBD_CtlError>
          return;
 800820a:	e012      	b.n	8008232 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 f9b6 	bl	800857e <USBD_CtlSendStatus>
      break;
 8008212:	e00e      	b.n	8008232 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 f9b2 	bl	800857e <USBD_CtlSendStatus>
      break;
 800821a:	e00a      	b.n	8008232 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800821c:	6839      	ldr	r1, [r7, #0]
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f8e5 	bl	80083ee <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8008224:	4b04      	ldr	r3, [pc, #16]	; (8008238 <USBD_SetConfig+0x118>)
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	4619      	mov	r1, r3
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f7ff fa22 	bl	8007674 <USBD_ClrClassConfig>
      break;
 8008230:	bf00      	nop
    }
  }
}
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	20000418 	.word	0x20000418

0800823c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	88db      	ldrh	r3, [r3, #6]
 800824a:	2b01      	cmp	r3, #1
 800824c:	d004      	beq.n	8008258 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800824e:	6839      	ldr	r1, [r7, #0]
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 f8cc 	bl	80083ee <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8008256:	e022      	b.n	800829e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800825e:	2b02      	cmp	r3, #2
 8008260:	dc02      	bgt.n	8008268 <USBD_GetConfig+0x2c>
 8008262:	2b00      	cmp	r3, #0
 8008264:	dc03      	bgt.n	800826e <USBD_GetConfig+0x32>
 8008266:	e015      	b.n	8008294 <USBD_GetConfig+0x58>
 8008268:	2b03      	cmp	r3, #3
 800826a:	d00b      	beq.n	8008284 <USBD_GetConfig+0x48>
 800826c:	e012      	b.n	8008294 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	3308      	adds	r3, #8
 8008278:	2201      	movs	r2, #1
 800827a:	4619      	mov	r1, r3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 f920 	bl	80084c2 <USBD_CtlSendData>
      break;
 8008282:	e00c      	b.n	800829e <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	3304      	adds	r3, #4
 8008288:	2201      	movs	r2, #1
 800828a:	4619      	mov	r1, r3
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 f918 	bl	80084c2 <USBD_CtlSendData>
      break;
 8008292:	e004      	b.n	800829e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8008294:	6839      	ldr	r1, [r7, #0]
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f8a9 	bl	80083ee <USBD_CtlError>
      break;
 800829c:	bf00      	nop
}
 800829e:	bf00      	nop
 80082a0:	3708      	adds	r7, #8
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b082      	sub	sp, #8
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80082b6:	3b01      	subs	r3, #1
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d81e      	bhi.n	80082fa <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	88db      	ldrh	r3, [r3, #6]
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d004      	beq.n	80082ce <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80082c4:	6839      	ldr	r1, [r7, #0]
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f891 	bl	80083ee <USBD_CtlError>
      break;
 80082cc:	e01a      	b.n	8008304 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d005      	beq.n	80082ea <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	f043 0202 	orr.w	r2, r3, #2
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	330c      	adds	r3, #12
 80082ee:	2202      	movs	r2, #2
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f8e5 	bl	80084c2 <USBD_CtlSendData>
    break;
 80082f8:	e004      	b.n	8008304 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f876 	bl	80083ee <USBD_CtlError>
    break;
 8008302:	bf00      	nop
  }
}
 8008304:	bf00      	nop
 8008306:	3708      	adds	r7, #8
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	885b      	ldrh	r3, [r3, #2]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d106      	bne.n	800832c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2201      	movs	r2, #1
 8008322:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f929 	bl	800857e <USBD_CtlSendStatus>
  }

}
 800832c:	bf00      	nop
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008344:	3b01      	subs	r3, #1
 8008346:	2b02      	cmp	r3, #2
 8008348:	d80b      	bhi.n	8008362 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	885b      	ldrh	r3, [r3, #2]
 800834e:	2b01      	cmp	r3, #1
 8008350:	d10c      	bne.n	800836c <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f90f 	bl	800857e <USBD_CtlSendStatus>
    }
    break;
 8008360:	e004      	b.n	800836c <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8008362:	6839      	ldr	r1, [r7, #0]
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f842 	bl	80083ee <USBD_CtlError>
    break;
 800836a:	e000      	b.n	800836e <USBD_ClrFeature+0x3a>
    break;
 800836c:	bf00      	nop
  }
}
 800836e:	bf00      	nop
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008376:	b480      	push	{r7}
 8008378:	b083      	sub	sp, #12
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
 800837e:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	781a      	ldrb	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	785a      	ldrb	r2, [r3, #1]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	3302      	adds	r3, #2
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	b29a      	uxth	r2, r3
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	3303      	adds	r3, #3
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	b29b      	uxth	r3, r3
 80083a0:	021b      	lsls	r3, r3, #8
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	4413      	add	r3, r2
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	3304      	adds	r3, #4
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	3305      	adds	r3, #5
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	021b      	lsls	r3, r3, #8
 80083be:	b29b      	uxth	r3, r3
 80083c0:	4413      	add	r3, r2
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	3306      	adds	r3, #6
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	3307      	adds	r3, #7
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	021b      	lsls	r3, r3, #8
 80083da:	b29b      	uxth	r3, r3
 80083dc:	4413      	add	r3, r2
 80083de:	b29a      	uxth	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	80da      	strh	r2, [r3, #6]

}
 80083e4:	bf00      	nop
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bc80      	pop	{r7}
 80083ec:	4770      	bx	lr

080083ee <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b082      	sub	sp, #8
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
 80083f6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 80083f8:	2180      	movs	r1, #128	; 0x80
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f001 fa5c 	bl	80098b8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008400:	2100      	movs	r1, #0
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f001 fa58 	bl	80098b8 <USBD_LL_StallEP>
}
 8008408:	bf00      	nop
 800840a:	3708      	adds	r7, #8
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800841c:	2300      	movs	r3, #0
 800841e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d032      	beq.n	800848c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f000 f834 	bl	8008494 <USBD_GetLen>
 800842c:	4603      	mov	r3, r0
 800842e:	3301      	adds	r3, #1
 8008430:	b29b      	uxth	r3, r3
 8008432:	005b      	lsls	r3, r3, #1
 8008434:	b29a      	uxth	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800843a:	7dfb      	ldrb	r3, [r7, #23]
 800843c:	1c5a      	adds	r2, r3, #1
 800843e:	75fa      	strb	r2, [r7, #23]
 8008440:	461a      	mov	r2, r3
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	4413      	add	r3, r2
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	7812      	ldrb	r2, [r2, #0]
 800844a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800844c:	7dfb      	ldrb	r3, [r7, #23]
 800844e:	1c5a      	adds	r2, r3, #1
 8008450:	75fa      	strb	r2, [r7, #23]
 8008452:	461a      	mov	r2, r3
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	4413      	add	r3, r2
 8008458:	2203      	movs	r2, #3
 800845a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800845c:	e012      	b.n	8008484 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	1c5a      	adds	r2, r3, #1
 8008462:	60fa      	str	r2, [r7, #12]
 8008464:	7dfa      	ldrb	r2, [r7, #23]
 8008466:	1c51      	adds	r1, r2, #1
 8008468:	75f9      	strb	r1, [r7, #23]
 800846a:	4611      	mov	r1, r2
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	440a      	add	r2, r1
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008474:	7dfb      	ldrb	r3, [r7, #23]
 8008476:	1c5a      	adds	r2, r3, #1
 8008478:	75fa      	strb	r2, [r7, #23]
 800847a:	461a      	mov	r2, r3
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	4413      	add	r3, r2
 8008480:	2200      	movs	r2, #0
 8008482:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1e8      	bne.n	800845e <USBD_GetString+0x4e>
    }
  }
}
 800848c:	bf00      	nop
 800848e:	3718      	adds	r7, #24
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800849c:	2300      	movs	r3, #0
 800849e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80084a0:	e005      	b.n	80084ae <USBD_GetLen+0x1a>
    {
        len++;
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
 80084a4:	3301      	adds	r3, #1
 80084a6:	73fb      	strb	r3, [r7, #15]
        buf++;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3301      	adds	r3, #1
 80084ac:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1f5      	bne.n	80084a2 <USBD_GetLen+0xe>
    }

    return len;
 80084b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3714      	adds	r7, #20
 80084bc:	46bd      	mov	sp, r7
 80084be:	bc80      	pop	{r7}
 80084c0:	4770      	bx	lr

080084c2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b084      	sub	sp, #16
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	60f8      	str	r0, [r7, #12]
 80084ca:	60b9      	str	r1, [r7, #8]
 80084cc:	4613      	mov	r3, r2
 80084ce:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2202      	movs	r2, #2
 80084d4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80084d8:	88fa      	ldrh	r2, [r7, #6]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80084de:	88fa      	ldrh	r2, [r7, #6]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80084e4:	88fb      	ldrh	r3, [r7, #6]
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	2100      	movs	r1, #0
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f001 fa6d 	bl	80099ca <USBD_LL_Transmit>

  return USBD_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b084      	sub	sp, #16
 80084fe:	af00      	add	r7, sp, #0
 8008500:	60f8      	str	r0, [r7, #12]
 8008502:	60b9      	str	r1, [r7, #8]
 8008504:	4613      	mov	r3, r2
 8008506:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008508:	88fb      	ldrh	r3, [r7, #6]
 800850a:	68ba      	ldr	r2, [r7, #8]
 800850c:	2100      	movs	r1, #0
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f001 fa5b 	bl	80099ca <USBD_LL_Transmit>

  return USBD_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3710      	adds	r7, #16
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b084      	sub	sp, #16
 8008522:	af00      	add	r7, sp, #0
 8008524:	60f8      	str	r0, [r7, #12]
 8008526:	60b9      	str	r1, [r7, #8]
 8008528:	4613      	mov	r3, r2
 800852a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2203      	movs	r2, #3
 8008530:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8008534:	88fa      	ldrh	r2, [r7, #6]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800853c:	88fa      	ldrh	r2, [r7, #6]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008544:	88fb      	ldrh	r3, [r7, #6]
 8008546:	68ba      	ldr	r2, [r7, #8]
 8008548:	2100      	movs	r1, #0
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f001 fa60 	bl	8009a10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b084      	sub	sp, #16
 800855e:	af00      	add	r7, sp, #0
 8008560:	60f8      	str	r0, [r7, #12]
 8008562:	60b9      	str	r1, [r7, #8]
 8008564:	4613      	mov	r3, r2
 8008566:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008568:	88fb      	ldrh	r3, [r7, #6]
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	2100      	movs	r1, #0
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f001 fa4e 	bl	8009a10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b082      	sub	sp, #8
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2204      	movs	r2, #4
 800858a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800858e:	2300      	movs	r3, #0
 8008590:	2200      	movs	r2, #0
 8008592:	2100      	movs	r1, #0
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f001 fa18 	bl	80099ca <USBD_LL_Transmit>

  return USBD_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3708      	adds	r7, #8
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2205      	movs	r2, #5
 80085b0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80085b4:	2300      	movs	r3, #0
 80085b6:	2200      	movs	r2, #0
 80085b8:	2100      	movs	r1, #0
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f001 fa28 	bl	8009a10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
	...

080085cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80085d0:	2200      	movs	r2, #0
 80085d2:	4912      	ldr	r1, [pc, #72]	; (800861c <MX_USB_DEVICE_Init+0x50>)
 80085d4:	4812      	ldr	r0, [pc, #72]	; (8008620 <MX_USB_DEVICE_Init+0x54>)
 80085d6:	f7fe ffd4 	bl	8007582 <USBD_Init>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d001      	beq.n	80085e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80085e0:	f7f8 fbb6 	bl	8000d50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80085e4:	490f      	ldr	r1, [pc, #60]	; (8008624 <MX_USB_DEVICE_Init+0x58>)
 80085e6:	480e      	ldr	r0, [pc, #56]	; (8008620 <MX_USB_DEVICE_Init+0x54>)
 80085e8:	f7fe fff6 	bl	80075d8 <USBD_RegisterClass>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d001      	beq.n	80085f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80085f2:	f7f8 fbad 	bl	8000d50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80085f6:	490c      	ldr	r1, [pc, #48]	; (8008628 <MX_USB_DEVICE_Init+0x5c>)
 80085f8:	4809      	ldr	r0, [pc, #36]	; (8008620 <MX_USB_DEVICE_Init+0x54>)
 80085fa:	f7fe ff27 	bl	800744c <USBD_CDC_RegisterInterface>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d001      	beq.n	8008608 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008604:	f7f8 fba4 	bl	8000d50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008608:	4805      	ldr	r0, [pc, #20]	; (8008620 <MX_USB_DEVICE_Init+0x54>)
 800860a:	f7fe fffe 	bl	800760a <USBD_Start>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d001      	beq.n	8008618 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008614:	f7f8 fb9c 	bl	8000d50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008618:	bf00      	nop
 800861a:	bd80      	pop	{r7, pc}
 800861c:	20000290 	.word	0x20000290
 8008620:	2000041c 	.word	0x2000041c
 8008624:	2000017c 	.word	0x2000017c
 8008628:	20000280 	.word	0x20000280

0800862c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008630:	2200      	movs	r2, #0
 8008632:	4905      	ldr	r1, [pc, #20]	; (8008648 <CDC_Init_FS+0x1c>)
 8008634:	4805      	ldr	r0, [pc, #20]	; (800864c <CDC_Init_FS+0x20>)
 8008636:	f7fe ff1f 	bl	8007478 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800863a:	4905      	ldr	r1, [pc, #20]	; (8008650 <CDC_Init_FS+0x24>)
 800863c:	4803      	ldr	r0, [pc, #12]	; (800864c <CDC_Init_FS+0x20>)
 800863e:	f7fe ff34 	bl	80074aa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008642:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008644:	4618      	mov	r0, r3
 8008646:	bd80      	pop	{r7, pc}
 8008648:	20000f88 	.word	0x20000f88
 800864c:	2000041c 	.word	0x2000041c
 8008650:	20000788 	.word	0x20000788

08008654 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008654:	b480      	push	{r7}
 8008656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008658:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800865a:	4618      	mov	r0, r3
 800865c:	46bd      	mov	sp, r7
 800865e:	bc80      	pop	{r7}
 8008660:	4770      	bx	lr
	...

08008664 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	4603      	mov	r3, r0
 800866c:	6039      	str	r1, [r7, #0]
 800866e:	71fb      	strb	r3, [r7, #7]
 8008670:	4613      	mov	r3, r2
 8008672:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008674:	79fb      	ldrb	r3, [r7, #7]
 8008676:	2b23      	cmp	r3, #35	; 0x23
 8008678:	d84a      	bhi.n	8008710 <CDC_Control_FS+0xac>
 800867a:	a201      	add	r2, pc, #4	; (adr r2, 8008680 <CDC_Control_FS+0x1c>)
 800867c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008680:	08008711 	.word	0x08008711
 8008684:	08008711 	.word	0x08008711
 8008688:	08008711 	.word	0x08008711
 800868c:	08008711 	.word	0x08008711
 8008690:	08008711 	.word	0x08008711
 8008694:	08008711 	.word	0x08008711
 8008698:	08008711 	.word	0x08008711
 800869c:	08008711 	.word	0x08008711
 80086a0:	08008711 	.word	0x08008711
 80086a4:	08008711 	.word	0x08008711
 80086a8:	08008711 	.word	0x08008711
 80086ac:	08008711 	.word	0x08008711
 80086b0:	08008711 	.word	0x08008711
 80086b4:	08008711 	.word	0x08008711
 80086b8:	08008711 	.word	0x08008711
 80086bc:	08008711 	.word	0x08008711
 80086c0:	08008711 	.word	0x08008711
 80086c4:	08008711 	.word	0x08008711
 80086c8:	08008711 	.word	0x08008711
 80086cc:	08008711 	.word	0x08008711
 80086d0:	08008711 	.word	0x08008711
 80086d4:	08008711 	.word	0x08008711
 80086d8:	08008711 	.word	0x08008711
 80086dc:	08008711 	.word	0x08008711
 80086e0:	08008711 	.word	0x08008711
 80086e4:	08008711 	.word	0x08008711
 80086e8:	08008711 	.word	0x08008711
 80086ec:	08008711 	.word	0x08008711
 80086f0:	08008711 	.word	0x08008711
 80086f4:	08008711 	.word	0x08008711
 80086f8:	08008711 	.word	0x08008711
 80086fc:	08008711 	.word	0x08008711
 8008700:	08008711 	.word	0x08008711
 8008704:	08008711 	.word	0x08008711
 8008708:	08008711 	.word	0x08008711
 800870c:	08008711 	.word	0x08008711
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008710:	bf00      	nop
  }

  return (USBD_OK);
 8008712:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008714:	4618      	mov	r0, r3
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	bc80      	pop	{r7}
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop

08008720 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	// Copy the received data to the buffer
	for (int i = 0; i < *Len; i++)
 800872a:	2300      	movs	r3, #0
 800872c:	60fb      	str	r3, [r7, #12]
 800872e:	e013      	b.n	8008758 <CDC_Receive_FS+0x38>
	{
	if (rx_buffer_len < MAX_RX_BUFFER_SIZE)
 8008730:	4b22      	ldr	r3, [pc, #136]	; (80087bc <CDC_Receive_FS+0x9c>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2b63      	cmp	r3, #99	; 0x63
 8008736:	d80c      	bhi.n	8008752 <CDC_Receive_FS+0x32>
	{
	  rx_buffer[rx_buffer_len] = Buf[i];
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	441a      	add	r2, r3
 800873e:	4b1f      	ldr	r3, [pc, #124]	; (80087bc <CDC_Receive_FS+0x9c>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	7811      	ldrb	r1, [r2, #0]
 8008744:	4a1e      	ldr	r2, [pc, #120]	; (80087c0 <CDC_Receive_FS+0xa0>)
 8008746:	54d1      	strb	r1, [r2, r3]
	  rx_buffer_len = rx_buffer_len + 1;
 8008748:	4b1c      	ldr	r3, [pc, #112]	; (80087bc <CDC_Receive_FS+0x9c>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	3301      	adds	r3, #1
 800874e:	4a1b      	ldr	r2, [pc, #108]	; (80087bc <CDC_Receive_FS+0x9c>)
 8008750:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < *Len; i++)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	3301      	adds	r3, #1
 8008756:	60fb      	str	r3, [r7, #12]
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	429a      	cmp	r2, r3
 8008760:	d8e6      	bhi.n	8008730 <CDC_Receive_FS+0x10>
	  // The receive buffer is full, discard the received data
	}
	}

	// Check if a complete message has been received
	if (rx_buffer_len > 0 && rx_buffer[rx_buffer_len - 1] == '\n')
 8008762:	4b16      	ldr	r3, [pc, #88]	; (80087bc <CDC_Receive_FS+0x9c>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d01b      	beq.n	80087a2 <CDC_Receive_FS+0x82>
 800876a:	4b14      	ldr	r3, [pc, #80]	; (80087bc <CDC_Receive_FS+0x9c>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	3b01      	subs	r3, #1
 8008770:	4a13      	ldr	r2, [pc, #76]	; (80087c0 <CDC_Receive_FS+0xa0>)
 8008772:	5cd3      	ldrb	r3, [r2, r3]
 8008774:	2b0a      	cmp	r3, #10
 8008776:	d114      	bne.n	80087a2 <CDC_Receive_FS+0x82>
	{
		// Process the received message
		memcpy(User_Input_Buffer, rx_buffer, rx_buffer_len);
 8008778:	4b10      	ldr	r3, [pc, #64]	; (80087bc <CDC_Receive_FS+0x9c>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	461a      	mov	r2, r3
 800877e:	4910      	ldr	r1, [pc, #64]	; (80087c0 <CDC_Receive_FS+0xa0>)
 8008780:	4810      	ldr	r0, [pc, #64]	; (80087c4 <CDC_Receive_FS+0xa4>)
 8008782:	f001 f9e7 	bl	8009b54 <memcpy>
		User_Input_Buffer_Len = rx_buffer_len;
 8008786:	4b0d      	ldr	r3, [pc, #52]	; (80087bc <CDC_Receive_FS+0x9c>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	b2da      	uxtb	r2, r3
 800878c:	4b0e      	ldr	r3, [pc, #56]	; (80087c8 <CDC_Receive_FS+0xa8>)
 800878e:	701a      	strb	r2, [r3, #0]
		Process_Received_Message(rx_buffer, rx_buffer_len);
 8008790:	4b0a      	ldr	r3, [pc, #40]	; (80087bc <CDC_Receive_FS+0x9c>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4619      	mov	r1, r3
 8008796:	480a      	ldr	r0, [pc, #40]	; (80087c0 <CDC_Receive_FS+0xa0>)
 8008798:	f000 f840 	bl	800881c <Process_Received_Message>
		// Clear the receive buffer
		rx_buffer_len = 0;
 800879c:	4b07      	ldr	r3, [pc, #28]	; (80087bc <CDC_Receive_FS+0x9c>)
 800879e:	2200      	movs	r2, #0
 80087a0:	601a      	str	r2, [r3, #0]
	}

	// Set up the USB device to receive a new packet
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80087a2:	6879      	ldr	r1, [r7, #4]
 80087a4:	4809      	ldr	r0, [pc, #36]	; (80087cc <CDC_Receive_FS+0xac>)
 80087a6:	f7fe fe80 	bl	80074aa <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80087aa:	4808      	ldr	r0, [pc, #32]	; (80087cc <CDC_Receive_FS+0xac>)
 80087ac:	f7fe febf 	bl	800752e <USBD_CDC_ReceivePacket>

	return (USBD_OK);
 80087b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	2000071c 	.word	0x2000071c
 80087c0:	200006b8 	.word	0x200006b8
 80087c4:	20000720 	.word	0x20000720
 80087c8:	20000784 	.word	0x20000784
 80087cc:	2000041c 	.word	0x2000041c

080087d0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	460b      	mov	r3, r1
 80087da:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80087dc:	2300      	movs	r3, #0
 80087de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80087e0:	4b0d      	ldr	r3, [pc, #52]	; (8008818 <CDC_Transmit_FS+0x48>)
 80087e2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80087e6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e00b      	b.n	800880e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80087f6:	887b      	ldrh	r3, [r7, #2]
 80087f8:	461a      	mov	r2, r3
 80087fa:	6879      	ldr	r1, [r7, #4]
 80087fc:	4806      	ldr	r0, [pc, #24]	; (8008818 <CDC_Transmit_FS+0x48>)
 80087fe:	f7fe fe3b 	bl	8007478 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008802:	4805      	ldr	r0, [pc, #20]	; (8008818 <CDC_Transmit_FS+0x48>)
 8008804:	f7fe fe64 	bl	80074d0 <USBD_CDC_TransmitPacket>
 8008808:	4603      	mov	r3, r0
 800880a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800880c:	7bfb      	ldrb	r3, [r7, #15]
}
 800880e:	4618      	mov	r0, r3
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	2000041c 	.word	0x2000041c

0800881c <Process_Received_Message>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t Process_Received_Message(uint8_t* rx_buffer, uint32_t rx_buffer_len)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	f6ad 0d88 	subw	sp, sp, #2184	; 0x888
 8008822:	af04      	add	r7, sp, #16
 8008824:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8008828:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 800882c:	6018      	str	r0, [r3, #0]
 800882e:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8008832:	f6a3 0378 	subw	r3, r3, #2168	; 0x878
 8008836:	6019      	str	r1, [r3, #0]
	uint8_t RX_Packet[128]; // add null character
	uint8_t RX_Packet_Length; // max 127
	char RX_String[128]; // convert uint8_t to char


	if(strncmp((char*) rx_buffer, "Start", strlen("Start")) == 0)
 8008838:	f607 0378 	addw	r3, r7, #2168	; 0x878
 800883c:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 8008840:	2205      	movs	r2, #5
 8008842:	49ce      	ldr	r1, [pc, #824]	; (8008b7c <Process_Received_Message+0x360>)
 8008844:	6818      	ldr	r0, [r3, #0]
 8008846:	f001 f9bb 	bl	8009bc0 <strncmp>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d129      	bne.n	80088a4 <Process_Received_Message+0x88>
	{
		sprintf(str1, "User Input: Start\r\n");
 8008850:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8008854:	49ca      	ldr	r1, [pc, #808]	; (8008b80 <Process_Received_Message+0x364>)
 8008856:	4618      	mov	r0, r3
 8008858:	f001 f992 	bl	8009b80 <siprintf>
		sprintf(str2, "Initialized the CC1200 for Operation\r\n");
 800885c:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8008860:	49c8      	ldr	r1, [pc, #800]	; (8008b84 <Process_Received_Message+0x368>)
 8008862:	4618      	mov	r0, r3
 8008864:	f001 f98c 	bl	8009b80 <siprintf>
		CC1200_Init(&SPI_Info, MISO_Data, GPIOB, GPIO_PIN_6, &hspi1);
 8008868:	4bc7      	ldr	r3, [pc, #796]	; (8008b88 <Process_Received_Message+0x36c>)
 800886a:	9300      	str	r3, [sp, #0]
 800886c:	2340      	movs	r3, #64	; 0x40
 800886e:	4ac7      	ldr	r2, [pc, #796]	; (8008b8c <Process_Received_Message+0x370>)
 8008870:	49c7      	ldr	r1, [pc, #796]	; (8008b90 <Process_Received_Message+0x374>)
 8008872:	48c8      	ldr	r0, [pc, #800]	; (8008b94 <Process_Received_Message+0x378>)
 8008874:	f7f7 fe0e 	bl	8000494 <CC1200_Init>
		Message_Length = sprintf(Message, "%s%s", str1, str2);
 8008878:	f507 7355 	add.w	r3, r7, #852	; 0x354
 800887c:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 8008880:	f207 4084 	addw	r0, r7, #1156	; 0x484
 8008884:	49c4      	ldr	r1, [pc, #784]	; (8008b98 <Process_Received_Message+0x37c>)
 8008886:	f001 f97b 	bl	8009b80 <siprintf>
 800888a:	4603      	mov	r3, r0
 800888c:	f8a7 3876 	strh.w	r3, [r7, #2166]	; 0x876
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008890:	f8b7 2876 	ldrh.w	r2, [r7, #2166]	; 0x876
 8008894:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8008898:	4611      	mov	r1, r2
 800889a:	4618      	mov	r0, r3
 800889c:	f7ff ff98 	bl	80087d0 <CDC_Transmit_FS>
 80088a0:	f000 bd45 	b.w	800932e <Process_Received_Message+0xb12>
	}
	else if (strncmp((char*) rx_buffer, "Configure:", strlen("Configure:")) == 0)
 80088a4:	f607 0378 	addw	r3, r7, #2168	; 0x878
 80088a8:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 80088ac:	220a      	movs	r2, #10
 80088ae:	49bb      	ldr	r1, [pc, #748]	; (8008b9c <Process_Received_Message+0x380>)
 80088b0:	6818      	ldr	r0, [r3, #0]
 80088b2:	f001 f985 	bl	8009bc0 <strncmp>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d16d      	bne.n	8008998 <Process_Received_Message+0x17c>
	{
		sprintf(str1, "User Input: Configure\r\n");
 80088bc:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 80088c0:	49b7      	ldr	r1, [pc, #732]	; (8008ba0 <Process_Received_Message+0x384>)
 80088c2:	4618      	mov	r0, r3
 80088c4:	f001 f95c 	bl	8009b80 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Configure:"
 80088c8:	f607 0378 	addw	r3, r7, #2168	; 0x878
 80088cc:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 80088d0:	49b4      	ldr	r1, [pc, #720]	; (8008ba4 <Process_Received_Message+0x388>)
 80088d2:	6818      	ldr	r0, [r3, #0]
 80088d4:	f001 f988 	bl	8009be8 <strtok>
 80088d8:	f8c7 0870 	str.w	r0, [r7, #2160]	; 0x870
		Token = strtok(NULL, "\r\n"); // second token "[mode]"
 80088dc:	49b2      	ldr	r1, [pc, #712]	; (8008ba8 <Process_Received_Message+0x38c>)
 80088de:	2000      	movs	r0, #0
 80088e0:	f001 f982 	bl	8009be8 <strtok>
 80088e4:	f8c7 0870 	str.w	r0, [r7, #2160]	; 0x870
		if (strncmp(Token, "Default", strlen("Default")) == 0)
 80088e8:	2207      	movs	r2, #7
 80088ea:	49b0      	ldr	r1, [pc, #704]	; (8008bac <Process_Received_Message+0x390>)
 80088ec:	f8d7 0870 	ldr.w	r0, [r7, #2160]	; 0x870
 80088f0:	f001 f966 	bl	8009bc0 <strncmp>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d126      	bne.n	8008948 <Process_Received_Message+0x12c>
		{
			sprintf(str2, "Selected Mode: %s\r\n", Token);
 80088fa:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80088fe:	f8d7 2870 	ldr.w	r2, [r7, #2160]	; 0x870
 8008902:	49ab      	ldr	r1, [pc, #684]	; (8008bb0 <Process_Received_Message+0x394>)
 8008904:	4618      	mov	r0, r3
 8008906:	f001 f93b 	bl	8009b80 <siprintf>
			sprintf(str3, "Configured the CC1200 with Default Register Settings\r\n");
 800890a:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 800890e:	49a9      	ldr	r1, [pc, #676]	; (8008bb4 <Process_Received_Message+0x398>)
 8008910:	4618      	mov	r0, r3
 8008912:	f001 f935 	bl	8009b80 <siprintf>
			check = CC1200_Configure(&SPI_Info, Preferred_Register_Settings, Preferred_Extended_Register_Settings);
 8008916:	4aa8      	ldr	r2, [pc, #672]	; (8008bb8 <Process_Received_Message+0x39c>)
 8008918:	49a8      	ldr	r1, [pc, #672]	; (8008bbc <Process_Received_Message+0x3a0>)
 800891a:	489e      	ldr	r0, [pc, #632]	; (8008b94 <Process_Received_Message+0x378>)
 800891c:	f7f7 fdd9 	bl	80004d2 <CC1200_Configure>
 8008920:	4603      	mov	r3, r0
 8008922:	f887 386e 	strb.w	r3, [r7, #2158]	; 0x86e
//			}
//			else // check == 0
//			{
//				sprintf(str4, "No Error Occurred\r\n");
//			}
			Message_Length = sprintf(Message, "%s%s%s", str1, str2, str3); // include str4
 8008926:	f507 7155 	add.w	r1, r7, #852	; 0x354
 800892a:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 800892e:	f207 4084 	addw	r0, r7, #1156	; 0x484
 8008932:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	460b      	mov	r3, r1
 800893a:	49a1      	ldr	r1, [pc, #644]	; (8008bc0 <Process_Received_Message+0x3a4>)
 800893c:	f001 f920 	bl	8009b80 <siprintf>
 8008940:	4603      	mov	r3, r0
 8008942:	f8a7 3876 	strh.w	r3, [r7, #2166]	; 0x876
 8008946:	e01d      	b.n	8008984 <Process_Received_Message+0x168>
		}
		else
		{
			sprintf(str2, "Invalid Mode: %s\r\n", Token);
 8008948:	f507 7355 	add.w	r3, r7, #852	; 0x354
 800894c:	f8d7 2870 	ldr.w	r2, [r7, #2160]	; 0x870
 8008950:	499c      	ldr	r1, [pc, #624]	; (8008bc4 <Process_Received_Message+0x3a8>)
 8008952:	4618      	mov	r0, r3
 8008954:	f001 f914 	bl	8009b80 <siprintf>
			sprintf(str3, "Could Not Configure the CC1200\r\n");
 8008958:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 800895c:	499a      	ldr	r1, [pc, #616]	; (8008bc8 <Process_Received_Message+0x3ac>)
 800895e:	4618      	mov	r0, r3
 8008960:	f001 f90e 	bl	8009b80 <siprintf>
			Message_Length = sprintf(Message, "%s%s%s", str1, str2, str3);
 8008964:	f507 7155 	add.w	r1, r7, #852	; 0x354
 8008968:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 800896c:	f207 4084 	addw	r0, r7, #1156	; 0x484
 8008970:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	460b      	mov	r3, r1
 8008978:	4991      	ldr	r1, [pc, #580]	; (8008bc0 <Process_Received_Message+0x3a4>)
 800897a:	f001 f901 	bl	8009b80 <siprintf>
 800897e:	4603      	mov	r3, r0
 8008980:	f8a7 3876 	strh.w	r3, [r7, #2166]	; 0x876
		}

		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008984:	f8b7 2876 	ldrh.w	r2, [r7, #2166]	; 0x876
 8008988:	f207 4384 	addw	r3, r7, #1156	; 0x484
 800898c:	4611      	mov	r1, r2
 800898e:	4618      	mov	r0, r3
 8008990:	f7ff ff1e 	bl	80087d0 <CDC_Transmit_FS>
 8008994:	f000 bccb 	b.w	800932e <Process_Received_Message+0xb12>
	}
	else if (strncmp((char*) rx_buffer, "Transmit:", strlen("Transmit:")) == 0)
 8008998:	f607 0378 	addw	r3, r7, #2168	; 0x878
 800899c:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 80089a0:	2209      	movs	r2, #9
 80089a2:	498a      	ldr	r1, [pc, #552]	; (8008bcc <Process_Received_Message+0x3b0>)
 80089a4:	6818      	ldr	r0, [r3, #0]
 80089a6:	f001 f90b 	bl	8009bc0 <strncmp>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d171      	bne.n	8008a94 <Process_Received_Message+0x278>
	{
		sprintf(str1, "User Input: Transmit\r\n");
 80089b0:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 80089b4:	4986      	ldr	r1, [pc, #536]	; (8008bd0 <Process_Received_Message+0x3b4>)
 80089b6:	4618      	mov	r0, r3
 80089b8:	f001 f8e2 	bl	8009b80 <siprintf>
		sprintf(str2, "Set the CC1200 into Transmit Mode\r\n");
 80089bc:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80089c0:	4984      	ldr	r1, [pc, #528]	; (8008bd4 <Process_Received_Message+0x3b8>)
 80089c2:	4618      	mov	r0, r3
 80089c4:	f001 f8dc 	bl	8009b80 <siprintf>
		sprintf(str3, "Transmitted the Following Message: ");
 80089c8:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 80089cc:	4982      	ldr	r1, [pc, #520]	; (8008bd8 <Process_Received_Message+0x3bc>)
 80089ce:	4618      	mov	r0, r3
 80089d0:	f001 f8d6 	bl	8009b80 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Transmit:"
 80089d4:	f607 0378 	addw	r3, r7, #2168	; 0x878
 80089d8:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 80089dc:	4971      	ldr	r1, [pc, #452]	; (8008ba4 <Process_Received_Message+0x388>)
 80089de:	6818      	ldr	r0, [r3, #0]
 80089e0:	f001 f902 	bl	8009be8 <strtok>
 80089e4:	f8c7 0870 	str.w	r0, [r7, #2160]	; 0x870
		Token = strtok(NULL, "\r\n"); // second token "[message to send]"
 80089e8:	496f      	ldr	r1, [pc, #444]	; (8008ba8 <Process_Received_Message+0x38c>)
 80089ea:	2000      	movs	r0, #0
 80089ec:	f001 f8fc 	bl	8009be8 <strtok>
 80089f0:	f8c7 0870 	str.w	r0, [r7, #2160]	; 0x870
		TX_Packet_Length = strlen(Token);
 80089f4:	f8d7 0870 	ldr.w	r0, [r7, #2160]	; 0x870
 80089f8:	f7f7 fbc0 	bl	800017c <strlen>
 80089fc:	4603      	mov	r3, r0
 80089fe:	f887 386c 	strb.w	r3, [r7, #2156]	; 0x86c
		sprintf(str4, "%s\r\n", Token);
 8008a02:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8008a06:	f8d7 2870 	ldr.w	r2, [r7, #2160]	; 0x870
 8008a0a:	4974      	ldr	r1, [pc, #464]	; (8008bdc <Process_Received_Message+0x3c0>)
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f001 f8b7 	bl	8009b80 <siprintf>
		for (i = 0; i < TX_Packet_Length; i++)
 8008a12:	2300      	movs	r3, #0
 8008a14:	f887 3875 	strb.w	r3, [r7, #2165]	; 0x875
 8008a18:	e011      	b.n	8008a3e <Process_Received_Message+0x222>
		{
			TX_Packet[i] = (uint8_t) (Token[i]);
 8008a1a:	f897 3875 	ldrb.w	r3, [r7, #2165]	; 0x875
 8008a1e:	f8d7 2870 	ldr.w	r2, [r7, #2160]	; 0x870
 8008a22:	441a      	add	r2, r3
 8008a24:	f897 3875 	ldrb.w	r3, [r7, #2165]	; 0x875
 8008a28:	7811      	ldrb	r1, [r2, #0]
 8008a2a:	f607 0278 	addw	r2, r7, #2168	; 0x878
 8008a2e:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
 8008a32:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < TX_Packet_Length; i++)
 8008a34:	f897 3875 	ldrb.w	r3, [r7, #2165]	; 0x875
 8008a38:	3301      	adds	r3, #1
 8008a3a:	f887 3875 	strb.w	r3, [r7, #2165]	; 0x875
 8008a3e:	f897 2875 	ldrb.w	r2, [r7, #2165]	; 0x875
 8008a42:	f897 386c 	ldrb.w	r3, [r7, #2156]	; 0x86c
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d3e7      	bcc.n	8008a1a <Process_Received_Message+0x1fe>
		}
		CC1200_Transmit(&SPI_Info, TX_Packet, TX_Packet_Length);
 8008a4a:	f897 286c 	ldrb.w	r2, [r7, #2156]	; 0x86c
 8008a4e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8008a52:	4619      	mov	r1, r3
 8008a54:	484f      	ldr	r0, [pc, #316]	; (8008b94 <Process_Received_Message+0x378>)
 8008a56:	f7f7 ff03 	bl	8000860 <CC1200_Transmit>
		Message_Length = sprintf(Message, "%s%s%s%s", str1, str2, str3, str4);
 8008a5a:	f507 7155 	add.w	r1, r7, #852	; 0x354
 8008a5e:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 8008a62:	f207 4084 	addw	r0, r7, #1156	; 0x484
 8008a66:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8008a6a:	9301      	str	r3, [sp, #4]
 8008a6c:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	460b      	mov	r3, r1
 8008a74:	495a      	ldr	r1, [pc, #360]	; (8008be0 <Process_Received_Message+0x3c4>)
 8008a76:	f001 f883 	bl	8009b80 <siprintf>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	f8a7 3876 	strh.w	r3, [r7, #2166]	; 0x876
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008a80:	f8b7 2876 	ldrh.w	r2, [r7, #2166]	; 0x876
 8008a84:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8008a88:	4611      	mov	r1, r2
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7ff fea0 	bl	80087d0 <CDC_Transmit_FS>
 8008a90:	f000 bc4d 	b.w	800932e <Process_Received_Message+0xb12>
	}
	else if (strncmp((char*) rx_buffer, "Receive", strlen("Receive")) == 0)
 8008a94:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8008a98:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 8008a9c:	2207      	movs	r2, #7
 8008a9e:	4951      	ldr	r1, [pc, #324]	; (8008be4 <Process_Received_Message+0x3c8>)
 8008aa0:	6818      	ldr	r0, [r3, #0]
 8008aa2:	f001 f88d 	bl	8009bc0 <strncmp>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	f040 80a3 	bne.w	8008bf4 <Process_Received_Message+0x3d8>
	{
		sprintf(str1, "User Input: Receive\r\n");
 8008aae:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8008ab2:	494d      	ldr	r1, [pc, #308]	; (8008be8 <Process_Received_Message+0x3cc>)
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f001 f863 	bl	8009b80 <siprintf>
		sprintf(str2, "Set the CC1200 into Receive Mode\r\n");
 8008aba:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8008abe:	494b      	ldr	r1, [pc, #300]	; (8008bec <Process_Received_Message+0x3d0>)
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f001 f85d 	bl	8009b80 <siprintf>
		sprintf(str3, "Received the Following Message: ");
 8008ac6:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8008aca:	4949      	ldr	r1, [pc, #292]	; (8008bf0 <Process_Received_Message+0x3d4>)
 8008acc:	4618      	mov	r0, r3
 8008ace:	f001 f857 	bl	8009b80 <siprintf>
		CC1200_Receive(&SPI_Info, RX_Packet, &RX_Packet_Length);
 8008ad2:	f107 028b 	add.w	r2, r7, #139	; 0x8b
 8008ad6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008ada:	4619      	mov	r1, r3
 8008adc:	482d      	ldr	r0, [pc, #180]	; (8008b94 <Process_Received_Message+0x378>)
 8008ade:	f7f7 ff10 	bl	8000902 <CC1200_Receive>
		for (i = 0; i < RX_Packet_Length; i++)
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	f887 3875 	strb.w	r3, [r7, #2165]	; 0x875
 8008ae8:	e012      	b.n	8008b10 <Process_Received_Message+0x2f4>
		{
			RX_String[i] = (char) (RX_Packet[i]);
 8008aea:	f897 2875 	ldrb.w	r2, [r7, #2165]	; 0x875
 8008aee:	f897 3875 	ldrb.w	r3, [r7, #2165]	; 0x875
 8008af2:	f607 0178 	addw	r1, r7, #2168	; 0x878
 8008af6:	f2a1 71ec 	subw	r1, r1, #2028	; 0x7ec
 8008afa:	5c89      	ldrb	r1, [r1, r2]
 8008afc:	f607 0278 	addw	r2, r7, #2168	; 0x878
 8008b00:	f5a2 6207 	sub.w	r2, r2, #2160	; 0x870
 8008b04:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < RX_Packet_Length; i++)
 8008b06:	f897 3875 	ldrb.w	r3, [r7, #2165]	; 0x875
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	f887 3875 	strb.w	r3, [r7, #2165]	; 0x875
 8008b10:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8008b14:	f2a3 73ed 	subw	r3, r3, #2029	; 0x7ed
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	f897 2875 	ldrb.w	r2, [r7, #2165]	; 0x875
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d3e3      	bcc.n	8008aea <Process_Received_Message+0x2ce>
		}
		sprintf(str4, "%s\r\n", RX_String);
 8008b22:	f107 0208 	add.w	r2, r7, #8
 8008b26:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8008b2a:	492c      	ldr	r1, [pc, #176]	; (8008bdc <Process_Received_Message+0x3c0>)
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f001 f827 	bl	8009b80 <siprintf>
		sprintf(str4, "%s\r\n", (char*) RX_Packet);
 8008b32:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8008b36:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8008b3a:	4928      	ldr	r1, [pc, #160]	; (8008bdc <Process_Received_Message+0x3c0>)
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f001 f81f 	bl	8009b80 <siprintf>
		Message_Length = sprintf(Message, "%s%s%s%s", str1, str2, str3, str4);
 8008b42:	f507 7155 	add.w	r1, r7, #852	; 0x354
 8008b46:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 8008b4a:	f207 4084 	addw	r0, r7, #1156	; 0x484
 8008b4e:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8008b52:	9301      	str	r3, [sp, #4]
 8008b54:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	4920      	ldr	r1, [pc, #128]	; (8008be0 <Process_Received_Message+0x3c4>)
 8008b5e:	f001 f80f 	bl	8009b80 <siprintf>
 8008b62:	4603      	mov	r3, r0
 8008b64:	f8a7 3876 	strh.w	r3, [r7, #2166]	; 0x876
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008b68:	f8b7 2876 	ldrh.w	r2, [r7, #2166]	; 0x876
 8008b6c:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8008b70:	4611      	mov	r1, r2
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7ff fe2c 	bl	80087d0 <CDC_Transmit_FS>
 8008b78:	e3d9      	b.n	800932e <Process_Received_Message+0xb12>
 8008b7a:	bf00      	nop
 8008b7c:	0800b16c 	.word	0x0800b16c
 8008b80:	0800b174 	.word	0x0800b174
 8008b84:	0800b188 	.word	0x0800b188
 8008b88:	20000360 	.word	0x20000360
 8008b8c:	40020400 	.word	0x40020400
 8008b90:	2000040c 	.word	0x2000040c
 8008b94:	200003fc 	.word	0x200003fc
 8008b98:	0800b1b0 	.word	0x0800b1b0
 8008b9c:	0800b1b8 	.word	0x0800b1b8
 8008ba0:	0800b1c4 	.word	0x0800b1c4
 8008ba4:	0800b1dc 	.word	0x0800b1dc
 8008ba8:	0800b1e0 	.word	0x0800b1e0
 8008bac:	0800b1e4 	.word	0x0800b1e4
 8008bb0:	0800b1ec 	.word	0x0800b1ec
 8008bb4:	0800b200 	.word	0x0800b200
 8008bb8:	20000060 	.word	0x20000060
 8008bbc:	20000000 	.word	0x20000000
 8008bc0:	0800b238 	.word	0x0800b238
 8008bc4:	0800b240 	.word	0x0800b240
 8008bc8:	0800b254 	.word	0x0800b254
 8008bcc:	0800b278 	.word	0x0800b278
 8008bd0:	0800b284 	.word	0x0800b284
 8008bd4:	0800b29c 	.word	0x0800b29c
 8008bd8:	0800b2c0 	.word	0x0800b2c0
 8008bdc:	0800b2e4 	.word	0x0800b2e4
 8008be0:	0800b2ec 	.word	0x0800b2ec
 8008be4:	0800b2f8 	.word	0x0800b2f8
 8008be8:	0800b300 	.word	0x0800b300
 8008bec:	0800b318 	.word	0x0800b318
 8008bf0:	0800b33c 	.word	0x0800b33c
	}
	else if (strncmp((char*) rx_buffer, "Exit", strlen("Exit")) == 0)
 8008bf4:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8008bf8:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 8008bfc:	2204      	movs	r2, #4
 8008bfe:	4997      	ldr	r1, [pc, #604]	; (8008e5c <Process_Received_Message+0x640>)
 8008c00:	6818      	ldr	r0, [r3, #0]
 8008c02:	f000 ffdd 	bl	8009bc0 <strncmp>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d12e      	bne.n	8008c6a <Process_Received_Message+0x44e>
	{
		sprintf(str1, "User Input: Exit\r\n");
 8008c0c:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8008c10:	4993      	ldr	r1, [pc, #588]	; (8008e60 <Process_Received_Message+0x644>)
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 ffb4 	bl	8009b80 <siprintf>
		sprintf(str2, "Set the CC1200 into IDLE Mode\r\n");
 8008c18:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8008c1c:	4991      	ldr	r1, [pc, #580]	; (8008e64 <Process_Received_Message+0x648>)
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f000 ffae 	bl	8009b80 <siprintf>
		sprintf(str3, "Register Values Can Be Changed\r\n");
 8008c24:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8008c28:	498f      	ldr	r1, [pc, #572]	; (8008e68 <Process_Received_Message+0x64c>)
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f000 ffa8 	bl	8009b80 <siprintf>
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SIDLE);
 8008c30:	2136      	movs	r1, #54	; 0x36
 8008c32:	488e      	ldr	r0, [pc, #568]	; (8008e6c <Process_Received_Message+0x650>)
 8008c34:	f7f7 fde1 	bl	80007fa <CC1200_Command_Strobe>
		Message_Length = sprintf(Message, "%s%s%s", str1, str2, str3);
 8008c38:	f507 7155 	add.w	r1, r7, #852	; 0x354
 8008c3c:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 8008c40:	f207 4084 	addw	r0, r7, #1156	; 0x484
 8008c44:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8008c48:	9300      	str	r3, [sp, #0]
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	4988      	ldr	r1, [pc, #544]	; (8008e70 <Process_Received_Message+0x654>)
 8008c4e:	f000 ff97 	bl	8009b80 <siprintf>
 8008c52:	4603      	mov	r3, r0
 8008c54:	f8a7 3876 	strh.w	r3, [r7, #2166]	; 0x876
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008c58:	f8b7 2876 	ldrh.w	r2, [r7, #2166]	; 0x876
 8008c5c:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8008c60:	4611      	mov	r1, r2
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7ff fdb4 	bl	80087d0 <CDC_Transmit_FS>
 8008c68:	e361      	b.n	800932e <Process_Received_Message+0xb12>
	}
	else if (strncmp((char*) rx_buffer, "Reset", strlen("Reset")) == 0)
 8008c6a:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8008c6e:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 8008c72:	2205      	movs	r2, #5
 8008c74:	497f      	ldr	r1, [pc, #508]	; (8008e74 <Process_Received_Message+0x658>)
 8008c76:	6818      	ldr	r0, [r3, #0]
 8008c78:	f000 ffa2 	bl	8009bc0 <strncmp>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d12e      	bne.n	8008ce0 <Process_Received_Message+0x4c4>
	{
		sprintf(str1, "User Input: Reset\r\n");
 8008c82:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8008c86:	497c      	ldr	r1, [pc, #496]	; (8008e78 <Process_Received_Message+0x65c>)
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f000 ff79 	bl	8009b80 <siprintf>
		sprintf(str2, "Set the CC1200 into IDLE Mode\r\n");
 8008c8e:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8008c92:	4974      	ldr	r1, [pc, #464]	; (8008e64 <Process_Received_Message+0x648>)
 8008c94:	4618      	mov	r0, r3
 8008c96:	f000 ff73 	bl	8009b80 <siprintf>
		sprintf(str3, "Register Values Reset to Default Values\r\n");
 8008c9a:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8008c9e:	4977      	ldr	r1, [pc, #476]	; (8008e7c <Process_Received_Message+0x660>)
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f000 ff6d 	bl	8009b80 <siprintf>
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SRES);
 8008ca6:	2130      	movs	r1, #48	; 0x30
 8008ca8:	4870      	ldr	r0, [pc, #448]	; (8008e6c <Process_Received_Message+0x650>)
 8008caa:	f7f7 fda6 	bl	80007fa <CC1200_Command_Strobe>
		Message_Length = sprintf(Message, "%s%s%s", str1, str2, str3);
 8008cae:	f507 7155 	add.w	r1, r7, #852	; 0x354
 8008cb2:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 8008cb6:	f207 4084 	addw	r0, r7, #1156	; 0x484
 8008cba:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8008cbe:	9300      	str	r3, [sp, #0]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	496b      	ldr	r1, [pc, #428]	; (8008e70 <Process_Received_Message+0x654>)
 8008cc4:	f000 ff5c 	bl	8009b80 <siprintf>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	f8a7 3876 	strh.w	r3, [r7, #2166]	; 0x876
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008cce:	f8b7 2876 	ldrh.w	r2, [r7, #2166]	; 0x876
 8008cd2:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8008cd6:	4611      	mov	r1, r2
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7ff fd79 	bl	80087d0 <CDC_Transmit_FS>
 8008cde:	e326      	b.n	800932e <Process_Received_Message+0xb12>
	}
	else if (strncmp((char*) rx_buffer, "Status", strlen("Status")) == 0)
 8008ce0:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8008ce4:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 8008ce8:	2206      	movs	r2, #6
 8008cea:	4965      	ldr	r1, [pc, #404]	; (8008e80 <Process_Received_Message+0x664>)
 8008cec:	6818      	ldr	r0, [r3, #0]
 8008cee:	f000 ff67 	bl	8009bc0 <strncmp>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d131      	bne.n	8008d5c <Process_Received_Message+0x540>
	{
		sprintf(str1, "User Input: Status\r\n");
 8008cf8:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8008cfc:	4961      	ldr	r1, [pc, #388]	; (8008e84 <Process_Received_Message+0x668>)
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f000 ff3e 	bl	8009b80 <siprintf>
		sprintf(str2, "CC1200 Status: ");
 8008d04:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8008d08:	495f      	ldr	r1, [pc, #380]	; (8008e88 <Process_Received_Message+0x66c>)
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f000 ff38 	bl	8009b80 <siprintf>
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SNOP); // get status
 8008d10:	213d      	movs	r1, #61	; 0x3d
 8008d12:	4856      	ldr	r0, [pc, #344]	; (8008e6c <Process_Received_Message+0x650>)
 8008d14:	f7f7 fd71 	bl	80007fa <CC1200_Command_Strobe>
		sprintf(str3, "0X%02X\r\n", MISO_Data[0]);
 8008d18:	4b5c      	ldr	r3, [pc, #368]	; (8008e8c <Process_Received_Message+0x670>)
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8008d22:	495b      	ldr	r1, [pc, #364]	; (8008e90 <Process_Received_Message+0x674>)
 8008d24:	4618      	mov	r0, r3
 8008d26:	f000 ff2b 	bl	8009b80 <siprintf>
		Message_Length = sprintf(Message, "%s%s%s", str1, str2, str3);
 8008d2a:	f507 7155 	add.w	r1, r7, #852	; 0x354
 8008d2e:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 8008d32:	f207 4084 	addw	r0, r7, #1156	; 0x484
 8008d36:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	494c      	ldr	r1, [pc, #304]	; (8008e70 <Process_Received_Message+0x654>)
 8008d40:	f000 ff1e 	bl	8009b80 <siprintf>
 8008d44:	4603      	mov	r3, r0
 8008d46:	f8a7 3876 	strh.w	r3, [r7, #2166]	; 0x876
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008d4a:	f8b7 2876 	ldrh.w	r2, [r7, #2166]	; 0x876
 8008d4e:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8008d52:	4611      	mov	r1, r2
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7ff fd3b 	bl	80087d0 <CDC_Transmit_FS>
 8008d5a:	e2e8      	b.n	800932e <Process_Received_Message+0xb12>
	}
	else if (strncmp((char*) rx_buffer, "Command:", strlen("Command:")) == 0)
 8008d5c:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8008d60:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 8008d64:	2208      	movs	r2, #8
 8008d66:	494b      	ldr	r1, [pc, #300]	; (8008e94 <Process_Received_Message+0x678>)
 8008d68:	6818      	ldr	r0, [r3, #0]
 8008d6a:	f000 ff29 	bl	8009bc0 <strncmp>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	f040 80a3 	bne.w	8008ebc <Process_Received_Message+0x6a0>
	{
		sprintf(str1, "User Input: Command\r\n");
 8008d76:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8008d7a:	4947      	ldr	r1, [pc, #284]	; (8008e98 <Process_Received_Message+0x67c>)
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f000 feff 	bl	8009b80 <siprintf>
		sprintf(str2, "Issued the Following Command: ");
 8008d82:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8008d86:	4945      	ldr	r1, [pc, #276]	; (8008e9c <Process_Received_Message+0x680>)
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f000 fef9 	bl	8009b80 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Command:"
 8008d8e:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8008d92:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 8008d96:	4942      	ldr	r1, [pc, #264]	; (8008ea0 <Process_Received_Message+0x684>)
 8008d98:	6818      	ldr	r0, [r3, #0]
 8008d9a:	f000 ff25 	bl	8009be8 <strtok>
 8008d9e:	f8c7 0870 	str.w	r0, [r7, #2160]	; 0x870
		Token = strtok(NULL, "\r\n"); // second token "[command strobe]"
 8008da2:	4940      	ldr	r1, [pc, #256]	; (8008ea4 <Process_Received_Message+0x688>)
 8008da4:	2000      	movs	r0, #0
 8008da6:	f000 ff1f 	bl	8009be8 <strtok>
 8008daa:	f8c7 0870 	str.w	r0, [r7, #2160]	; 0x870
		sprintf(str3, "%s\r\n", Token);
 8008dae:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8008db2:	f8d7 2870 	ldr.w	r2, [r7, #2160]	; 0x870
 8008db6:	493c      	ldr	r1, [pc, #240]	; (8008ea8 <Process_Received_Message+0x68c>)
 8008db8:	4618      	mov	r0, r3
 8008dba:	f000 fee1 	bl	8009b80 <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 8008dbe:	2210      	movs	r2, #16
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	f8d7 0870 	ldr.w	r0, [r7, #2160]	; 0x870
 8008dc6:	f000 ffe7 	bl	8009d98 <strtol>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	f887 386f 	strb.w	r3, [r7, #2159]	; 0x86f
		check = CC1200_Command_Strobe(&SPI_Info, Register_Address); // issue command
 8008dd0:	f897 386f 	ldrb.w	r3, [r7, #2159]	; 0x86f
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	4825      	ldr	r0, [pc, #148]	; (8008e6c <Process_Received_Message+0x650>)
 8008dd8:	f7f7 fd0f 	bl	80007fa <CC1200_Command_Strobe>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	f887 386e 	strb.w	r3, [r7, #2158]	; 0x86e
		if (check == 1)
 8008de2:	f897 386e 	ldrb.w	r3, [r7, #2158]	; 0x86e
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d106      	bne.n	8008df8 <Process_Received_Message+0x5dc>
		{
			sprintf(str4, "Invalid Command\r\n");
 8008dea:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8008dee:	492f      	ldr	r1, [pc, #188]	; (8008eac <Process_Received_Message+0x690>)
 8008df0:	4618      	mov	r0, r3
 8008df2:	f000 fec5 	bl	8009b80 <siprintf>
 8008df6:	e005      	b.n	8008e04 <Process_Received_Message+0x5e8>
		}
		else // check == 0
		{
			sprintf(str4, "Valid Command\r\n");
 8008df8:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8008dfc:	492c      	ldr	r1, [pc, #176]	; (8008eb0 <Process_Received_Message+0x694>)
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f000 febe 	bl	8009b80 <siprintf>
		}
		CC1200_Command_Strobe(&SPI_Info, CC1200_COMMAND_SNOP); // get status
 8008e04:	213d      	movs	r1, #61	; 0x3d
 8008e06:	4819      	ldr	r0, [pc, #100]	; (8008e6c <Process_Received_Message+0x650>)
 8008e08:	f7f7 fcf7 	bl	80007fa <CC1200_Command_Strobe>
		sprintf(str5, "CC1200 State: 0X%02X\r\n", MISO_Data[0]);
 8008e0c:	4b1f      	ldr	r3, [pc, #124]	; (8008e8c <Process_Received_Message+0x670>)
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	461a      	mov	r2, r3
 8008e12:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8008e16:	4927      	ldr	r1, [pc, #156]	; (8008eb4 <Process_Received_Message+0x698>)
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f000 feb1 	bl	8009b80 <siprintf>
		Message_Length = sprintf(Message, "%s%s%s%s%s", str1, str2, str3, str4, str5);
 8008e1e:	f507 7155 	add.w	r1, r7, #852	; 0x354
 8008e22:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 8008e26:	f207 4084 	addw	r0, r7, #1156	; 0x484
 8008e2a:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8008e2e:	9302      	str	r3, [sp, #8]
 8008e30:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8008e34:	9301      	str	r3, [sp, #4]
 8008e36:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	491e      	ldr	r1, [pc, #120]	; (8008eb8 <Process_Received_Message+0x69c>)
 8008e40:	f000 fe9e 	bl	8009b80 <siprintf>
 8008e44:	4603      	mov	r3, r0
 8008e46:	f8a7 3876 	strh.w	r3, [r7, #2166]	; 0x876
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008e4a:	f8b7 2876 	ldrh.w	r2, [r7, #2166]	; 0x876
 8008e4e:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8008e52:	4611      	mov	r1, r2
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7ff fcbb 	bl	80087d0 <CDC_Transmit_FS>
 8008e5a:	e268      	b.n	800932e <Process_Received_Message+0xb12>
 8008e5c:	0800b360 	.word	0x0800b360
 8008e60:	0800b368 	.word	0x0800b368
 8008e64:	0800b37c 	.word	0x0800b37c
 8008e68:	0800b39c 	.word	0x0800b39c
 8008e6c:	200003fc 	.word	0x200003fc
 8008e70:	0800b238 	.word	0x0800b238
 8008e74:	0800b3c0 	.word	0x0800b3c0
 8008e78:	0800b3c8 	.word	0x0800b3c8
 8008e7c:	0800b3dc 	.word	0x0800b3dc
 8008e80:	0800b408 	.word	0x0800b408
 8008e84:	0800b410 	.word	0x0800b410
 8008e88:	0800b428 	.word	0x0800b428
 8008e8c:	2000040c 	.word	0x2000040c
 8008e90:	0800b438 	.word	0x0800b438
 8008e94:	0800b444 	.word	0x0800b444
 8008e98:	0800b450 	.word	0x0800b450
 8008e9c:	0800b468 	.word	0x0800b468
 8008ea0:	0800b1dc 	.word	0x0800b1dc
 8008ea4:	0800b1e0 	.word	0x0800b1e0
 8008ea8:	0800b2e4 	.word	0x0800b2e4
 8008eac:	0800b488 	.word	0x0800b488
 8008eb0:	0800b49c 	.word	0x0800b49c
 8008eb4:	0800b4ac 	.word	0x0800b4ac
 8008eb8:	0800b4c4 	.word	0x0800b4c4
	}
	else if (strncmp((char*) rx_buffer, "Write Register:", strlen("Write Register:")) == 0)
 8008ebc:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8008ec0:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 8008ec4:	220f      	movs	r2, #15
 8008ec6:	49c3      	ldr	r1, [pc, #780]	; (80091d4 <Process_Received_Message+0x9b8>)
 8008ec8:	6818      	ldr	r0, [r3, #0]
 8008eca:	f000 fe79 	bl	8009bc0 <strncmp>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d179      	bne.n	8008fc8 <Process_Received_Message+0x7ac>
	{
		sprintf(str1, "User Input: Write Register\r\n");
 8008ed4:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8008ed8:	49bf      	ldr	r1, [pc, #764]	; (80091d8 <Process_Received_Message+0x9bc>)
 8008eda:	4618      	mov	r0, r3
 8008edc:	f000 fe50 	bl	8009b80 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Write"
 8008ee0:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8008ee4:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 8008ee8:	49bc      	ldr	r1, [pc, #752]	; (80091dc <Process_Received_Message+0x9c0>)
 8008eea:	6818      	ldr	r0, [r3, #0]
 8008eec:	f000 fe7c 	bl	8009be8 <strtok>
 8008ef0:	f8c7 0870 	str.w	r0, [r7, #2160]	; 0x870
		Token = strtok(NULL, " "); // second token "Register:"
 8008ef4:	49b9      	ldr	r1, [pc, #740]	; (80091dc <Process_Received_Message+0x9c0>)
 8008ef6:	2000      	movs	r0, #0
 8008ef8:	f000 fe76 	bl	8009be8 <strtok>
 8008efc:	f8c7 0870 	str.w	r0, [r7, #2160]	; 0x870
		sprintf(str2, "Address to Access: ");
 8008f00:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8008f04:	49b6      	ldr	r1, [pc, #728]	; (80091e0 <Process_Received_Message+0x9c4>)
 8008f06:	4618      	mov	r0, r3
 8008f08:	f000 fe3a 	bl	8009b80 <siprintf>
		Token = strtok(NULL, " "); // third token "[register address]"
 8008f0c:	49b3      	ldr	r1, [pc, #716]	; (80091dc <Process_Received_Message+0x9c0>)
 8008f0e:	2000      	movs	r0, #0
 8008f10:	f000 fe6a 	bl	8009be8 <strtok>
 8008f14:	f8c7 0870 	str.w	r0, [r7, #2160]	; 0x870
		sprintf(str3, "%s\r\n", Token);
 8008f18:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8008f1c:	f8d7 2870 	ldr.w	r2, [r7, #2160]	; 0x870
 8008f20:	49b0      	ldr	r1, [pc, #704]	; (80091e4 <Process_Received_Message+0x9c8>)
 8008f22:	4618      	mov	r0, r3
 8008f24:	f000 fe2c 	bl	8009b80 <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 8008f28:	2210      	movs	r2, #16
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	f8d7 0870 	ldr.w	r0, [r7, #2160]	; 0x870
 8008f30:	f000 ff32 	bl	8009d98 <strtol>
 8008f34:	4603      	mov	r3, r0
 8008f36:	f887 386f 	strb.w	r3, [r7, #2159]	; 0x86f
		sprintf(str4, "Value Sent: ");
 8008f3a:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8008f3e:	49aa      	ldr	r1, [pc, #680]	; (80091e8 <Process_Received_Message+0x9cc>)
 8008f40:	4618      	mov	r0, r3
 8008f42:	f000 fe1d 	bl	8009b80 <siprintf>
		Token = strtok(NULL, "\r\n"); // fourth token "[register value]"
 8008f46:	49a9      	ldr	r1, [pc, #676]	; (80091ec <Process_Received_Message+0x9d0>)
 8008f48:	2000      	movs	r0, #0
 8008f4a:	f000 fe4d 	bl	8009be8 <strtok>
 8008f4e:	f8c7 0870 	str.w	r0, [r7, #2160]	; 0x870
		sprintf(str5, "%s\r\n", Token);
 8008f52:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8008f56:	f8d7 2870 	ldr.w	r2, [r7, #2160]	; 0x870
 8008f5a:	49a2      	ldr	r1, [pc, #648]	; (80091e4 <Process_Received_Message+0x9c8>)
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f000 fe0f 	bl	8009b80 <siprintf>
		Register_Value = strtol(Token, NULL, 16); // convert register value to a number
 8008f62:	2210      	movs	r2, #16
 8008f64:	2100      	movs	r1, #0
 8008f66:	f8d7 0870 	ldr.w	r0, [r7, #2160]	; 0x870
 8008f6a:	f000 ff15 	bl	8009d98 <strtol>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	f887 386d 	strb.w	r3, [r7, #2157]	; 0x86d
		check = CC1200_Write_Single_Register(&SPI_Info, Register_Address, Register_Value);
 8008f74:	f897 286d 	ldrb.w	r2, [r7, #2157]	; 0x86d
 8008f78:	f897 386f 	ldrb.w	r3, [r7, #2159]	; 0x86f
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	489c      	ldr	r0, [pc, #624]	; (80091f0 <Process_Received_Message+0x9d4>)
 8008f80:	f7f7 fb1a 	bl	80005b8 <CC1200_Write_Single_Register>
 8008f84:	4603      	mov	r3, r0
 8008f86:	f887 386e 	strb.w	r3, [r7, #2158]	; 0x86e
		Message_Length = sprintf(Message, "%s%s%s%s%s", str1, str2, str3, str4, str5);
 8008f8a:	f507 7155 	add.w	r1, r7, #852	; 0x354
 8008f8e:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 8008f92:	f207 4084 	addw	r0, r7, #1156	; 0x484
 8008f96:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8008f9a:	9302      	str	r3, [sp, #8]
 8008f9c:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8008fa0:	9301      	str	r3, [sp, #4]
 8008fa2:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8008fa6:	9300      	str	r3, [sp, #0]
 8008fa8:	460b      	mov	r3, r1
 8008faa:	4992      	ldr	r1, [pc, #584]	; (80091f4 <Process_Received_Message+0x9d8>)
 8008fac:	f000 fde8 	bl	8009b80 <siprintf>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	f8a7 3876 	strh.w	r3, [r7, #2166]	; 0x876
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8008fb6:	f8b7 2876 	ldrh.w	r2, [r7, #2166]	; 0x876
 8008fba:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8008fbe:	4611      	mov	r1, r2
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7ff fc05 	bl	80087d0 <CDC_Transmit_FS>
 8008fc6:	e1b2      	b.n	800932e <Process_Received_Message+0xb12>
	}
	else if (strncmp((char*) rx_buffer, "Read Register:", strlen("Read Register:")) == 0)
 8008fc8:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8008fcc:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 8008fd0:	220e      	movs	r2, #14
 8008fd2:	4989      	ldr	r1, [pc, #548]	; (80091f8 <Process_Received_Message+0x9dc>)
 8008fd4:	6818      	ldr	r0, [r3, #0]
 8008fd6:	f000 fdf3 	bl	8009bc0 <strncmp>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d16c      	bne.n	80090ba <Process_Received_Message+0x89e>
	{
		sprintf(str1, "User Input: Read Register\r\n");
 8008fe0:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8008fe4:	4985      	ldr	r1, [pc, #532]	; (80091fc <Process_Received_Message+0x9e0>)
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f000 fdca 	bl	8009b80 <siprintf>
		sprintf(str2, "Address to Access: ");
 8008fec:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8008ff0:	497b      	ldr	r1, [pc, #492]	; (80091e0 <Process_Received_Message+0x9c4>)
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f000 fdc4 	bl	8009b80 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Read"
 8008ff8:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8008ffc:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 8009000:	4976      	ldr	r1, [pc, #472]	; (80091dc <Process_Received_Message+0x9c0>)
 8009002:	6818      	ldr	r0, [r3, #0]
 8009004:	f000 fdf0 	bl	8009be8 <strtok>
 8009008:	f8c7 0870 	str.w	r0, [r7, #2160]	; 0x870
		Token = strtok(NULL, " "); // second token "Register:"
 800900c:	4973      	ldr	r1, [pc, #460]	; (80091dc <Process_Received_Message+0x9c0>)
 800900e:	2000      	movs	r0, #0
 8009010:	f000 fdea 	bl	8009be8 <strtok>
 8009014:	f8c7 0870 	str.w	r0, [r7, #2160]	; 0x870
		Token = strtok(NULL, "\r\n"); // third token "[register address]"
 8009018:	4974      	ldr	r1, [pc, #464]	; (80091ec <Process_Received_Message+0x9d0>)
 800901a:	2000      	movs	r0, #0
 800901c:	f000 fde4 	bl	8009be8 <strtok>
 8009020:	f8c7 0870 	str.w	r0, [r7, #2160]	; 0x870
		sprintf(str3, "%s\r\n", Token);
 8009024:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8009028:	f8d7 2870 	ldr.w	r2, [r7, #2160]	; 0x870
 800902c:	496d      	ldr	r1, [pc, #436]	; (80091e4 <Process_Received_Message+0x9c8>)
 800902e:	4618      	mov	r0, r3
 8009030:	f000 fda6 	bl	8009b80 <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 8009034:	2210      	movs	r2, #16
 8009036:	2100      	movs	r1, #0
 8009038:	f8d7 0870 	ldr.w	r0, [r7, #2160]	; 0x870
 800903c:	f000 feac 	bl	8009d98 <strtol>
 8009040:	4603      	mov	r3, r0
 8009042:	f887 386f 	strb.w	r3, [r7, #2159]	; 0x86f
		check = CC1200_Read_Single_Register(&SPI_Info, Register_Address);
 8009046:	f897 386f 	ldrb.w	r3, [r7, #2159]	; 0x86f
 800904a:	4619      	mov	r1, r3
 800904c:	4868      	ldr	r0, [pc, #416]	; (80091f0 <Process_Received_Message+0x9d4>)
 800904e:	f7f7 faef 	bl	8000630 <CC1200_Read_Single_Register>
 8009052:	4603      	mov	r3, r0
 8009054:	f887 386e 	strb.w	r3, [r7, #2158]	; 0x86e
		sprintf(str4, "Value Received: ");
 8009058:	f507 7309 	add.w	r3, r7, #548	; 0x224
 800905c:	4968      	ldr	r1, [pc, #416]	; (8009200 <Process_Received_Message+0x9e4>)
 800905e:	4618      	mov	r0, r3
 8009060:	f000 fd8e 	bl	8009b80 <siprintf>
		Register_Value = MISO_Data[0];
 8009064:	4b67      	ldr	r3, [pc, #412]	; (8009204 <Process_Received_Message+0x9e8>)
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	f887 386d 	strb.w	r3, [r7, #2157]	; 0x86d
		sprintf(str5, "0X%02X\r\n", Register_Value);
 800906c:	f897 286d 	ldrb.w	r2, [r7, #2157]	; 0x86d
 8009070:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8009074:	4964      	ldr	r1, [pc, #400]	; (8009208 <Process_Received_Message+0x9ec>)
 8009076:	4618      	mov	r0, r3
 8009078:	f000 fd82 	bl	8009b80 <siprintf>
		Message_Length = sprintf(Message, "%s%s%s%s%s", str1, str2, str3, str4, str5);
 800907c:	f507 7155 	add.w	r1, r7, #852	; 0x354
 8009080:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 8009084:	f207 4084 	addw	r0, r7, #1156	; 0x484
 8009088:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800908c:	9302      	str	r3, [sp, #8]
 800908e:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8009092:	9301      	str	r3, [sp, #4]
 8009094:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8009098:	9300      	str	r3, [sp, #0]
 800909a:	460b      	mov	r3, r1
 800909c:	4955      	ldr	r1, [pc, #340]	; (80091f4 <Process_Received_Message+0x9d8>)
 800909e:	f000 fd6f 	bl	8009b80 <siprintf>
 80090a2:	4603      	mov	r3, r0
 80090a4:	f8a7 3876 	strh.w	r3, [r7, #2166]	; 0x876
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 80090a8:	f8b7 2876 	ldrh.w	r2, [r7, #2166]	; 0x876
 80090ac:	f207 4384 	addw	r3, r7, #1156	; 0x484
 80090b0:	4611      	mov	r1, r2
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7ff fb8c 	bl	80087d0 <CDC_Transmit_FS>
 80090b8:	e139      	b.n	800932e <Process_Received_Message+0xb12>
	}
	else if (strncmp((char*) rx_buffer, "Write Extended Register:", strlen("Write Extended Register:")) == 0)
 80090ba:	f607 0378 	addw	r3, r7, #2168	; 0x878
 80090be:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 80090c2:	2218      	movs	r2, #24
 80090c4:	4951      	ldr	r1, [pc, #324]	; (800920c <Process_Received_Message+0x9f0>)
 80090c6:	6818      	ldr	r0, [r3, #0]
 80090c8:	f000 fd7a 	bl	8009bc0 <strncmp>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	f040 80a0 	bne.w	8009214 <Process_Received_Message+0x9f8>
	{
		sprintf(str1, "User Input: Write Extended Register\r\n");
 80090d4:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 80090d8:	494d      	ldr	r1, [pc, #308]	; (8009210 <Process_Received_Message+0x9f4>)
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 fd50 	bl	8009b80 <siprintf>
		sprintf(str2, "Address to Access: ");
 80090e0:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80090e4:	493e      	ldr	r1, [pc, #248]	; (80091e0 <Process_Received_Message+0x9c4>)
 80090e6:	4618      	mov	r0, r3
 80090e8:	f000 fd4a 	bl	8009b80 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Write"
 80090ec:	f607 0378 	addw	r3, r7, #2168	; 0x878
 80090f0:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 80090f4:	4939      	ldr	r1, [pc, #228]	; (80091dc <Process_Received_Message+0x9c0>)
 80090f6:	6818      	ldr	r0, [r3, #0]
 80090f8:	f000 fd76 	bl	8009be8 <strtok>
 80090fc:	f8c7 0870 	str.w	r0, [r7, #2160]	; 0x870
		Token = strtok(NULL, " "); // second token "Extended"
 8009100:	4936      	ldr	r1, [pc, #216]	; (80091dc <Process_Received_Message+0x9c0>)
 8009102:	2000      	movs	r0, #0
 8009104:	f000 fd70 	bl	8009be8 <strtok>
 8009108:	f8c7 0870 	str.w	r0, [r7, #2160]	; 0x870
		Token = strtok(NULL, " "); // third token "Register:"
 800910c:	4933      	ldr	r1, [pc, #204]	; (80091dc <Process_Received_Message+0x9c0>)
 800910e:	2000      	movs	r0, #0
 8009110:	f000 fd6a 	bl	8009be8 <strtok>
 8009114:	f8c7 0870 	str.w	r0, [r7, #2160]	; 0x870
		Token = strtok(NULL, " "); // fourth token "[register address]"
 8009118:	4930      	ldr	r1, [pc, #192]	; (80091dc <Process_Received_Message+0x9c0>)
 800911a:	2000      	movs	r0, #0
 800911c:	f000 fd64 	bl	8009be8 <strtok>
 8009120:	f8c7 0870 	str.w	r0, [r7, #2160]	; 0x870
		sprintf(str3, "%s\r\n", Token);
 8009124:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8009128:	f8d7 2870 	ldr.w	r2, [r7, #2160]	; 0x870
 800912c:	492d      	ldr	r1, [pc, #180]	; (80091e4 <Process_Received_Message+0x9c8>)
 800912e:	4618      	mov	r0, r3
 8009130:	f000 fd26 	bl	8009b80 <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 8009134:	2210      	movs	r2, #16
 8009136:	2100      	movs	r1, #0
 8009138:	f8d7 0870 	ldr.w	r0, [r7, #2160]	; 0x870
 800913c:	f000 fe2c 	bl	8009d98 <strtol>
 8009140:	4603      	mov	r3, r0
 8009142:	f887 386f 	strb.w	r3, [r7, #2159]	; 0x86f
		sprintf(str4, "Value Sent: ");
 8009146:	f507 7309 	add.w	r3, r7, #548	; 0x224
 800914a:	4927      	ldr	r1, [pc, #156]	; (80091e8 <Process_Received_Message+0x9cc>)
 800914c:	4618      	mov	r0, r3
 800914e:	f000 fd17 	bl	8009b80 <siprintf>
		Token = strtok(NULL, "\r\n"); // fifth token "[register value]"
 8009152:	4926      	ldr	r1, [pc, #152]	; (80091ec <Process_Received_Message+0x9d0>)
 8009154:	2000      	movs	r0, #0
 8009156:	f000 fd47 	bl	8009be8 <strtok>
 800915a:	f8c7 0870 	str.w	r0, [r7, #2160]	; 0x870
		sprintf(str5, "%s\r\n", Token);
 800915e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8009162:	f8d7 2870 	ldr.w	r2, [r7, #2160]	; 0x870
 8009166:	491f      	ldr	r1, [pc, #124]	; (80091e4 <Process_Received_Message+0x9c8>)
 8009168:	4618      	mov	r0, r3
 800916a:	f000 fd09 	bl	8009b80 <siprintf>
		Register_Value = strtol(Token, NULL, 16); // convert register value to a number
 800916e:	2210      	movs	r2, #16
 8009170:	2100      	movs	r1, #0
 8009172:	f8d7 0870 	ldr.w	r0, [r7, #2160]	; 0x870
 8009176:	f000 fe0f 	bl	8009d98 <strtol>
 800917a:	4603      	mov	r3, r0
 800917c:	f887 386d 	strb.w	r3, [r7, #2157]	; 0x86d
		check = CC1200_Write_Single_Extended_Register(&SPI_Info, Register_Address, Register_Value);
 8009180:	f897 286d 	ldrb.w	r2, [r7, #2157]	; 0x86d
 8009184:	f897 386f 	ldrb.w	r3, [r7, #2159]	; 0x86f
 8009188:	4619      	mov	r1, r3
 800918a:	4819      	ldr	r0, [pc, #100]	; (80091f0 <Process_Received_Message+0x9d4>)
 800918c:	f7f7 fa90 	bl	80006b0 <CC1200_Write_Single_Extended_Register>
 8009190:	4603      	mov	r3, r0
 8009192:	f887 386e 	strb.w	r3, [r7, #2158]	; 0x86e
		Message_Length = sprintf(Message, "%s%s%s%s%s", str1, str2, str3, str4, str5);
 8009196:	f507 7155 	add.w	r1, r7, #852	; 0x354
 800919a:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 800919e:	f207 4084 	addw	r0, r7, #1156	; 0x484
 80091a2:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80091a6:	9302      	str	r3, [sp, #8]
 80091a8:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80091ac:	9301      	str	r3, [sp, #4]
 80091ae:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 80091b2:	9300      	str	r3, [sp, #0]
 80091b4:	460b      	mov	r3, r1
 80091b6:	490f      	ldr	r1, [pc, #60]	; (80091f4 <Process_Received_Message+0x9d8>)
 80091b8:	f000 fce2 	bl	8009b80 <siprintf>
 80091bc:	4603      	mov	r3, r0
 80091be:	f8a7 3876 	strh.w	r3, [r7, #2166]	; 0x876
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 80091c2:	f8b7 2876 	ldrh.w	r2, [r7, #2166]	; 0x876
 80091c6:	f207 4384 	addw	r3, r7, #1156	; 0x484
 80091ca:	4611      	mov	r1, r2
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7ff faff 	bl	80087d0 <CDC_Transmit_FS>
 80091d2:	e0ac      	b.n	800932e <Process_Received_Message+0xb12>
 80091d4:	0800b4d0 	.word	0x0800b4d0
 80091d8:	0800b4e0 	.word	0x0800b4e0
 80091dc:	0800b1dc 	.word	0x0800b1dc
 80091e0:	0800b500 	.word	0x0800b500
 80091e4:	0800b2e4 	.word	0x0800b2e4
 80091e8:	0800b514 	.word	0x0800b514
 80091ec:	0800b1e0 	.word	0x0800b1e0
 80091f0:	200003fc 	.word	0x200003fc
 80091f4:	0800b4c4 	.word	0x0800b4c4
 80091f8:	0800b524 	.word	0x0800b524
 80091fc:	0800b534 	.word	0x0800b534
 8009200:	0800b550 	.word	0x0800b550
 8009204:	2000040c 	.word	0x2000040c
 8009208:	0800b438 	.word	0x0800b438
 800920c:	0800b564 	.word	0x0800b564
 8009210:	0800b580 	.word	0x0800b580
	}
	else if (strncmp((char*) rx_buffer, "Read Extended Register:", strlen("Read Extended Register:")) == 0)
 8009214:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8009218:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 800921c:	2217      	movs	r2, #23
 800921e:	4947      	ldr	r1, [pc, #284]	; (800933c <Process_Received_Message+0xb20>)
 8009220:	6818      	ldr	r0, [r3, #0]
 8009222:	f000 fccd 	bl	8009bc0 <strncmp>
 8009226:	4603      	mov	r3, r0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d172      	bne.n	8009312 <Process_Received_Message+0xaf6>
	{
		sprintf(str1, "User Input: Read Extended Register\r\n");
 800922c:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8009230:	4943      	ldr	r1, [pc, #268]	; (8009340 <Process_Received_Message+0xb24>)
 8009232:	4618      	mov	r0, r3
 8009234:	f000 fca4 	bl	8009b80 <siprintf>
		sprintf(str2, "Address to Access: ");
 8009238:	f507 7355 	add.w	r3, r7, #852	; 0x354
 800923c:	4941      	ldr	r1, [pc, #260]	; (8009344 <Process_Received_Message+0xb28>)
 800923e:	4618      	mov	r0, r3
 8009240:	f000 fc9e 	bl	8009b80 <siprintf>
		Token = strtok((char*) rx_buffer, " "); // first token "Read"
 8009244:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8009248:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 800924c:	493e      	ldr	r1, [pc, #248]	; (8009348 <Process_Received_Message+0xb2c>)
 800924e:	6818      	ldr	r0, [r3, #0]
 8009250:	f000 fcca 	bl	8009be8 <strtok>
 8009254:	f8c7 0870 	str.w	r0, [r7, #2160]	; 0x870
		Token = strtok(NULL, " "); // second token "Extended"
 8009258:	493b      	ldr	r1, [pc, #236]	; (8009348 <Process_Received_Message+0xb2c>)
 800925a:	2000      	movs	r0, #0
 800925c:	f000 fcc4 	bl	8009be8 <strtok>
 8009260:	f8c7 0870 	str.w	r0, [r7, #2160]	; 0x870
		Token = strtok(NULL, " "); // third token "Register:"
 8009264:	4938      	ldr	r1, [pc, #224]	; (8009348 <Process_Received_Message+0xb2c>)
 8009266:	2000      	movs	r0, #0
 8009268:	f000 fcbe 	bl	8009be8 <strtok>
 800926c:	f8c7 0870 	str.w	r0, [r7, #2160]	; 0x870
		Token = strtok(NULL, "\r\n"); // fourth token "[register address]"
 8009270:	4936      	ldr	r1, [pc, #216]	; (800934c <Process_Received_Message+0xb30>)
 8009272:	2000      	movs	r0, #0
 8009274:	f000 fcb8 	bl	8009be8 <strtok>
 8009278:	f8c7 0870 	str.w	r0, [r7, #2160]	; 0x870
		sprintf(str3, "%s\r\n", Token);
 800927c:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8009280:	f8d7 2870 	ldr.w	r2, [r7, #2160]	; 0x870
 8009284:	4932      	ldr	r1, [pc, #200]	; (8009350 <Process_Received_Message+0xb34>)
 8009286:	4618      	mov	r0, r3
 8009288:	f000 fc7a 	bl	8009b80 <siprintf>
		Register_Address = strtol(Token, NULL, 16); // convert register address to a number
 800928c:	2210      	movs	r2, #16
 800928e:	2100      	movs	r1, #0
 8009290:	f8d7 0870 	ldr.w	r0, [r7, #2160]	; 0x870
 8009294:	f000 fd80 	bl	8009d98 <strtol>
 8009298:	4603      	mov	r3, r0
 800929a:	f887 386f 	strb.w	r3, [r7, #2159]	; 0x86f
		check = CC1200_Read_Single_Extended_Register(&SPI_Info, Register_Address);
 800929e:	f897 386f 	ldrb.w	r3, [r7, #2159]	; 0x86f
 80092a2:	4619      	mov	r1, r3
 80092a4:	482b      	ldr	r0, [pc, #172]	; (8009354 <Process_Received_Message+0xb38>)
 80092a6:	f7f7 fa55 	bl	8000754 <CC1200_Read_Single_Extended_Register>
 80092aa:	4603      	mov	r3, r0
 80092ac:	f887 386e 	strb.w	r3, [r7, #2158]	; 0x86e
		sprintf(str4, "Value Received: ");
 80092b0:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80092b4:	4928      	ldr	r1, [pc, #160]	; (8009358 <Process_Received_Message+0xb3c>)
 80092b6:	4618      	mov	r0, r3
 80092b8:	f000 fc62 	bl	8009b80 <siprintf>
		Register_Value = MISO_Data[0];
 80092bc:	4b27      	ldr	r3, [pc, #156]	; (800935c <Process_Received_Message+0xb40>)
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	f887 386d 	strb.w	r3, [r7, #2157]	; 0x86d
		sprintf(str5, "0X%02X\r\n", Register_Value);
 80092c4:	f897 286d 	ldrb.w	r2, [r7, #2157]	; 0x86d
 80092c8:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80092cc:	4924      	ldr	r1, [pc, #144]	; (8009360 <Process_Received_Message+0xb44>)
 80092ce:	4618      	mov	r0, r3
 80092d0:	f000 fc56 	bl	8009b80 <siprintf>
		Message_Length = sprintf(Message, "%s%s%s%s%s", str1, str2, str3, str4, str5);
 80092d4:	f507 7155 	add.w	r1, r7, #852	; 0x354
 80092d8:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 80092dc:	f207 4084 	addw	r0, r7, #1156	; 0x484
 80092e0:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80092e4:	9302      	str	r3, [sp, #8]
 80092e6:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80092ea:	9301      	str	r3, [sp, #4]
 80092ec:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 80092f0:	9300      	str	r3, [sp, #0]
 80092f2:	460b      	mov	r3, r1
 80092f4:	491b      	ldr	r1, [pc, #108]	; (8009364 <Process_Received_Message+0xb48>)
 80092f6:	f000 fc43 	bl	8009b80 <siprintf>
 80092fa:	4603      	mov	r3, r0
 80092fc:	f8a7 3876 	strh.w	r3, [r7, #2166]	; 0x876
		CDC_Transmit_FS((uint8_t*) Message, Message_Length);
 8009300:	f8b7 2876 	ldrh.w	r2, [r7, #2166]	; 0x876
 8009304:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8009308:	4611      	mov	r1, r2
 800930a:	4618      	mov	r0, r3
 800930c:	f7ff fa60 	bl	80087d0 <CDC_Transmit_FS>
 8009310:	e00d      	b.n	800932e <Process_Received_Message+0xb12>
	}
	else
	{
		CDC_Transmit_FS(rx_buffer, rx_buffer_len);
 8009312:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8009316:	f6a3 0378 	subw	r3, r3, #2168	; 0x878
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	b29a      	uxth	r2, r3
 800931e:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8009322:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 8009326:	4611      	mov	r1, r2
 8009328:	6818      	ldr	r0, [r3, #0]
 800932a:	f7ff fa51 	bl	80087d0 <CDC_Transmit_FS>
	}

	return 0;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	f607 0778 	addw	r7, r7, #2168	; 0x878
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	0800b5a8 	.word	0x0800b5a8
 8009340:	0800b5c0 	.word	0x0800b5c0
 8009344:	0800b500 	.word	0x0800b500
 8009348:	0800b1dc 	.word	0x0800b1dc
 800934c:	0800b1e0 	.word	0x0800b1e0
 8009350:	0800b2e4 	.word	0x0800b2e4
 8009354:	200003fc 	.word	0x200003fc
 8009358:	0800b550 	.word	0x0800b550
 800935c:	2000040c 	.word	0x2000040c
 8009360:	0800b438 	.word	0x0800b438
 8009364:	0800b4c4 	.word	0x0800b4c4

08009368 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
 800936e:	4603      	mov	r3, r0
 8009370:	6039      	str	r1, [r7, #0]
 8009372:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	2212      	movs	r2, #18
 8009378:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800937a:	4b03      	ldr	r3, [pc, #12]	; (8009388 <USBD_FS_DeviceDescriptor+0x20>)
}
 800937c:	4618      	mov	r0, r3
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	bc80      	pop	{r7}
 8009384:	4770      	bx	lr
 8009386:	bf00      	nop
 8009388:	200002ac 	.word	0x200002ac

0800938c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	4603      	mov	r3, r0
 8009394:	6039      	str	r1, [r7, #0]
 8009396:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	2204      	movs	r2, #4
 800939c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800939e:	4b03      	ldr	r3, [pc, #12]	; (80093ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bc80      	pop	{r7}
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	200002c0 	.word	0x200002c0

080093b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	4603      	mov	r3, r0
 80093b8:	6039      	str	r1, [r7, #0]
 80093ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093bc:	79fb      	ldrb	r3, [r7, #7]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d105      	bne.n	80093ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80093c2:	683a      	ldr	r2, [r7, #0]
 80093c4:	4907      	ldr	r1, [pc, #28]	; (80093e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80093c6:	4808      	ldr	r0, [pc, #32]	; (80093e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80093c8:	f7ff f822 	bl	8008410 <USBD_GetString>
 80093cc:	e004      	b.n	80093d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80093ce:	683a      	ldr	r2, [r7, #0]
 80093d0:	4904      	ldr	r1, [pc, #16]	; (80093e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80093d2:	4805      	ldr	r0, [pc, #20]	; (80093e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80093d4:	f7ff f81c 	bl	8008410 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093d8:	4b02      	ldr	r3, [pc, #8]	; (80093e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3708      	adds	r7, #8
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	20001788 	.word	0x20001788
 80093e8:	0800b5e8 	.word	0x0800b5e8

080093ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	4603      	mov	r3, r0
 80093f4:	6039      	str	r1, [r7, #0]
 80093f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80093f8:	683a      	ldr	r2, [r7, #0]
 80093fa:	4904      	ldr	r1, [pc, #16]	; (800940c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80093fc:	4804      	ldr	r0, [pc, #16]	; (8009410 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80093fe:	f7ff f807 	bl	8008410 <USBD_GetString>
  return USBD_StrDesc;
 8009402:	4b02      	ldr	r3, [pc, #8]	; (800940c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009404:	4618      	mov	r0, r3
 8009406:	3708      	adds	r7, #8
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	20001788 	.word	0x20001788
 8009410:	0800b600 	.word	0x0800b600

08009414 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	4603      	mov	r3, r0
 800941c:	6039      	str	r1, [r7, #0]
 800941e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	221a      	movs	r2, #26
 8009424:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009426:	f000 f843 	bl	80094b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800942a:	4b02      	ldr	r3, [pc, #8]	; (8009434 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800942c:	4618      	mov	r0, r3
 800942e:	3708      	adds	r7, #8
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	200002c4 	.word	0x200002c4

08009438 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	4603      	mov	r3, r0
 8009440:	6039      	str	r1, [r7, #0]
 8009442:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009444:	79fb      	ldrb	r3, [r7, #7]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d105      	bne.n	8009456 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800944a:	683a      	ldr	r2, [r7, #0]
 800944c:	4907      	ldr	r1, [pc, #28]	; (800946c <USBD_FS_ConfigStrDescriptor+0x34>)
 800944e:	4808      	ldr	r0, [pc, #32]	; (8009470 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009450:	f7fe ffde 	bl	8008410 <USBD_GetString>
 8009454:	e004      	b.n	8009460 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009456:	683a      	ldr	r2, [r7, #0]
 8009458:	4904      	ldr	r1, [pc, #16]	; (800946c <USBD_FS_ConfigStrDescriptor+0x34>)
 800945a:	4805      	ldr	r0, [pc, #20]	; (8009470 <USBD_FS_ConfigStrDescriptor+0x38>)
 800945c:	f7fe ffd8 	bl	8008410 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009460:	4b02      	ldr	r3, [pc, #8]	; (800946c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009462:	4618      	mov	r0, r3
 8009464:	3708      	adds	r7, #8
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	20001788 	.word	0x20001788
 8009470:	0800b614 	.word	0x0800b614

08009474 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	4603      	mov	r3, r0
 800947c:	6039      	str	r1, [r7, #0]
 800947e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009480:	79fb      	ldrb	r3, [r7, #7]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d105      	bne.n	8009492 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009486:	683a      	ldr	r2, [r7, #0]
 8009488:	4907      	ldr	r1, [pc, #28]	; (80094a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800948a:	4808      	ldr	r0, [pc, #32]	; (80094ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800948c:	f7fe ffc0 	bl	8008410 <USBD_GetString>
 8009490:	e004      	b.n	800949c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009492:	683a      	ldr	r2, [r7, #0]
 8009494:	4904      	ldr	r1, [pc, #16]	; (80094a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009496:	4805      	ldr	r0, [pc, #20]	; (80094ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009498:	f7fe ffba 	bl	8008410 <USBD_GetString>
  }
  return USBD_StrDesc;
 800949c:	4b02      	ldr	r3, [pc, #8]	; (80094a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3708      	adds	r7, #8
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	20001788 	.word	0x20001788
 80094ac:	0800b620 	.word	0x0800b620

080094b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80094b6:	4b0f      	ldr	r3, [pc, #60]	; (80094f4 <Get_SerialNum+0x44>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80094bc:	4b0e      	ldr	r3, [pc, #56]	; (80094f8 <Get_SerialNum+0x48>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80094c2:	4b0e      	ldr	r3, [pc, #56]	; (80094fc <Get_SerialNum+0x4c>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80094c8:	68fa      	ldr	r2, [r7, #12]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4413      	add	r3, r2
 80094ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d009      	beq.n	80094ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80094d6:	2208      	movs	r2, #8
 80094d8:	4909      	ldr	r1, [pc, #36]	; (8009500 <Get_SerialNum+0x50>)
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f000 f814 	bl	8009508 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80094e0:	2204      	movs	r2, #4
 80094e2:	4908      	ldr	r1, [pc, #32]	; (8009504 <Get_SerialNum+0x54>)
 80094e4:	68b8      	ldr	r0, [r7, #8]
 80094e6:	f000 f80f 	bl	8009508 <IntToUnicode>
  }
}
 80094ea:	bf00      	nop
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	1ff800d0 	.word	0x1ff800d0
 80094f8:	1ff800d4 	.word	0x1ff800d4
 80094fc:	1ff800d8 	.word	0x1ff800d8
 8009500:	200002c6 	.word	0x200002c6
 8009504:	200002d6 	.word	0x200002d6

08009508 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009508:	b480      	push	{r7}
 800950a:	b087      	sub	sp, #28
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	4613      	mov	r3, r2
 8009514:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009516:	2300      	movs	r3, #0
 8009518:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800951a:	2300      	movs	r3, #0
 800951c:	75fb      	strb	r3, [r7, #23]
 800951e:	e027      	b.n	8009570 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	0f1b      	lsrs	r3, r3, #28
 8009524:	2b09      	cmp	r3, #9
 8009526:	d80b      	bhi.n	8009540 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	0f1b      	lsrs	r3, r3, #28
 800952c:	b2da      	uxtb	r2, r3
 800952e:	7dfb      	ldrb	r3, [r7, #23]
 8009530:	005b      	lsls	r3, r3, #1
 8009532:	4619      	mov	r1, r3
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	440b      	add	r3, r1
 8009538:	3230      	adds	r2, #48	; 0x30
 800953a:	b2d2      	uxtb	r2, r2
 800953c:	701a      	strb	r2, [r3, #0]
 800953e:	e00a      	b.n	8009556 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	0f1b      	lsrs	r3, r3, #28
 8009544:	b2da      	uxtb	r2, r3
 8009546:	7dfb      	ldrb	r3, [r7, #23]
 8009548:	005b      	lsls	r3, r3, #1
 800954a:	4619      	mov	r1, r3
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	440b      	add	r3, r1
 8009550:	3237      	adds	r2, #55	; 0x37
 8009552:	b2d2      	uxtb	r2, r2
 8009554:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	011b      	lsls	r3, r3, #4
 800955a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800955c:	7dfb      	ldrb	r3, [r7, #23]
 800955e:	005b      	lsls	r3, r3, #1
 8009560:	3301      	adds	r3, #1
 8009562:	68ba      	ldr	r2, [r7, #8]
 8009564:	4413      	add	r3, r2
 8009566:	2200      	movs	r2, #0
 8009568:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800956a:	7dfb      	ldrb	r3, [r7, #23]
 800956c:	3301      	adds	r3, #1
 800956e:	75fb      	strb	r3, [r7, #23]
 8009570:	7dfa      	ldrb	r2, [r7, #23]
 8009572:	79fb      	ldrb	r3, [r7, #7]
 8009574:	429a      	cmp	r2, r3
 8009576:	d3d3      	bcc.n	8009520 <IntToUnicode+0x18>
  }
}
 8009578:	bf00      	nop
 800957a:	bf00      	nop
 800957c:	371c      	adds	r7, #28
 800957e:	46bd      	mov	sp, r7
 8009580:	bc80      	pop	{r7}
 8009582:	4770      	bx	lr

08009584 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	460b      	mov	r3, r1
 800958e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8009590:	78fb      	ldrb	r3, [r7, #3]
 8009592:	2b01      	cmp	r3, #1
 8009594:	d106      	bne.n	80095a4 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8009596:	4b09      	ldr	r3, [pc, #36]	; (80095bc <HAL_PCDEx_SetConnectionState+0x38>)
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	4a08      	ldr	r2, [pc, #32]	; (80095bc <HAL_PCDEx_SetConnectionState+0x38>)
 800959c:	f043 0301 	orr.w	r3, r3, #1
 80095a0:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 80095a2:	e005      	b.n	80095b0 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 80095a4:	4b05      	ldr	r3, [pc, #20]	; (80095bc <HAL_PCDEx_SetConnectionState+0x38>)
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	4a04      	ldr	r2, [pc, #16]	; (80095bc <HAL_PCDEx_SetConnectionState+0x38>)
 80095aa:	f023 0301 	bic.w	r3, r3, #1
 80095ae:	6053      	str	r3, [r2, #4]
}
 80095b0:	bf00      	nop
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bc80      	pop	{r7}
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop
 80095bc:	40010000 	.word	0x40010000

080095c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a0d      	ldr	r2, [pc, #52]	; (8009604 <HAL_PCD_MspInit+0x44>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d113      	bne.n	80095fa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80095d2:	4b0d      	ldr	r3, [pc, #52]	; (8009608 <HAL_PCD_MspInit+0x48>)
 80095d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d6:	4a0c      	ldr	r2, [pc, #48]	; (8009608 <HAL_PCD_MspInit+0x48>)
 80095d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80095dc:	6253      	str	r3, [r2, #36]	; 0x24
 80095de:	4b0a      	ldr	r3, [pc, #40]	; (8009608 <HAL_PCD_MspInit+0x48>)
 80095e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095e6:	60fb      	str	r3, [r7, #12]
 80095e8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80095ea:	2200      	movs	r2, #0
 80095ec:	2100      	movs	r1, #0
 80095ee:	2014      	movs	r0, #20
 80095f0:	f7f7 fefd 	bl	80013ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80095f4:	2014      	movs	r0, #20
 80095f6:	f7f7 ff16 	bl	8001426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80095fa:	bf00      	nop
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	40005c00 	.word	0x40005c00
 8009608:	40023800 	.word	0x40023800

0800960c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009620:	4619      	mov	r1, r3
 8009622:	4610      	mov	r0, r2
 8009624:	f7fe f839 	bl	800769a <USBD_LL_SetupStage>
}
 8009628:	bf00      	nop
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	460b      	mov	r3, r1
 800963a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009642:	78fa      	ldrb	r2, [r7, #3]
 8009644:	6879      	ldr	r1, [r7, #4]
 8009646:	4613      	mov	r3, r2
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	4413      	add	r3, r2
 800964c:	00db      	lsls	r3, r3, #3
 800964e:	440b      	add	r3, r1
 8009650:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	78fb      	ldrb	r3, [r7, #3]
 8009658:	4619      	mov	r1, r3
 800965a:	f7fe f86b 	bl	8007734 <USBD_LL_DataOutStage>
}
 800965e:	bf00      	nop
 8009660:	3708      	adds	r7, #8
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b082      	sub	sp, #8
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
 800966e:	460b      	mov	r3, r1
 8009670:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009678:	78fa      	ldrb	r2, [r7, #3]
 800967a:	6879      	ldr	r1, [r7, #4]
 800967c:	4613      	mov	r3, r2
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	4413      	add	r3, r2
 8009682:	00db      	lsls	r3, r3, #3
 8009684:	440b      	add	r3, r1
 8009686:	333c      	adds	r3, #60	; 0x3c
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	78fb      	ldrb	r3, [r7, #3]
 800968c:	4619      	mov	r1, r3
 800968e:	f7fe f8c2 	bl	8007816 <USBD_LL_DataInStage>
}
 8009692:	bf00      	nop
 8009694:	3708      	adds	r7, #8
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b082      	sub	sp, #8
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7fe f9cd 	bl	8007a48 <USBD_LL_SOF>
}
 80096ae:	bf00      	nop
 80096b0:	3708      	adds	r7, #8
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b084      	sub	sp, #16
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80096be:	2301      	movs	r3, #1
 80096c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d001      	beq.n	80096ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80096ca:	f7f7 fb41 	bl	8000d50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80096d4:	7bfa      	ldrb	r2, [r7, #15]
 80096d6:	4611      	mov	r1, r2
 80096d8:	4618      	mov	r0, r3
 80096da:	f7fe f982 	bl	80079e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7fe f93b 	bl	8007960 <USBD_LL_Reset>
}
 80096ea:	bf00      	nop
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
	...

080096f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009702:	4618      	mov	r0, r3
 8009704:	f7fe f97c 	bl	8007a00 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	699b      	ldr	r3, [r3, #24]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d005      	beq.n	800971c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009710:	4b04      	ldr	r3, [pc, #16]	; (8009724 <HAL_PCD_SuspendCallback+0x30>)
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	4a03      	ldr	r2, [pc, #12]	; (8009724 <HAL_PCD_SuspendCallback+0x30>)
 8009716:	f043 0306 	orr.w	r3, r3, #6
 800971a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800971c:	bf00      	nop
 800971e:	3708      	adds	r7, #8
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	e000ed00 	.word	0xe000ed00

08009728 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009736:	4618      	mov	r0, r3
 8009738:	f7fe f976 	bl	8007a28 <USBD_LL_Resume>
}
 800973c:	bf00      	nop
 800973e:	3708      	adds	r7, #8
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800974c:	4a28      	ldr	r2, [pc, #160]	; (80097f0 <USBD_LL_Init+0xac>)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	4a26      	ldr	r2, [pc, #152]	; (80097f0 <USBD_LL_Init+0xac>)
 8009758:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800975c:	4b24      	ldr	r3, [pc, #144]	; (80097f0 <USBD_LL_Init+0xac>)
 800975e:	4a25      	ldr	r2, [pc, #148]	; (80097f4 <USBD_LL_Init+0xb0>)
 8009760:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009762:	4b23      	ldr	r3, [pc, #140]	; (80097f0 <USBD_LL_Init+0xac>)
 8009764:	2208      	movs	r2, #8
 8009766:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009768:	4b21      	ldr	r3, [pc, #132]	; (80097f0 <USBD_LL_Init+0xac>)
 800976a:	2202      	movs	r2, #2
 800976c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800976e:	4b20      	ldr	r3, [pc, #128]	; (80097f0 <USBD_LL_Init+0xac>)
 8009770:	2202      	movs	r2, #2
 8009772:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009774:	4b1e      	ldr	r3, [pc, #120]	; (80097f0 <USBD_LL_Init+0xac>)
 8009776:	2200      	movs	r2, #0
 8009778:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800977a:	4b1d      	ldr	r3, [pc, #116]	; (80097f0 <USBD_LL_Init+0xac>)
 800977c:	2200      	movs	r2, #0
 800977e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009780:	481b      	ldr	r0, [pc, #108]	; (80097f0 <USBD_LL_Init+0xac>)
 8009782:	f7f8 f843 	bl	800180c <HAL_PCD_Init>
 8009786:	4603      	mov	r3, r0
 8009788:	2b00      	cmp	r3, #0
 800978a:	d001      	beq.n	8009790 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800978c:	f7f7 fae0 	bl	8000d50 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009796:	2318      	movs	r3, #24
 8009798:	2200      	movs	r2, #0
 800979a:	2100      	movs	r1, #0
 800979c:	f7f9 fc20 	bl	8002fe0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80097a6:	2358      	movs	r3, #88	; 0x58
 80097a8:	2200      	movs	r2, #0
 80097aa:	2180      	movs	r1, #128	; 0x80
 80097ac:	f7f9 fc18 	bl	8002fe0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80097b6:	23c0      	movs	r3, #192	; 0xc0
 80097b8:	2200      	movs	r2, #0
 80097ba:	2181      	movs	r1, #129	; 0x81
 80097bc:	f7f9 fc10 	bl	8002fe0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80097c6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80097ca:	2200      	movs	r2, #0
 80097cc:	2101      	movs	r1, #1
 80097ce:	f7f9 fc07 	bl	8002fe0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80097d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097dc:	2200      	movs	r2, #0
 80097de:	2182      	movs	r1, #130	; 0x82
 80097e0:	f7f9 fbfe 	bl	8002fe0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3708      	adds	r7, #8
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	20001988 	.word	0x20001988
 80097f4:	40005c00 	.word	0x40005c00

080097f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009800:	2300      	movs	r3, #0
 8009802:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009804:	2300      	movs	r3, #0
 8009806:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800980e:	4618      	mov	r0, r3
 8009810:	f7f8 f8da 	bl	80019c8 <HAL_PCD_Start>
 8009814:	4603      	mov	r3, r0
 8009816:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009818:	7bfb      	ldrb	r3, [r7, #15]
 800981a:	4618      	mov	r0, r3
 800981c:	f000 f944 	bl	8009aa8 <USBD_Get_USB_Status>
 8009820:	4603      	mov	r3, r0
 8009822:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009824:	7bbb      	ldrb	r3, [r7, #14]
}
 8009826:	4618      	mov	r0, r3
 8009828:	3710      	adds	r7, #16
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800982e:	b580      	push	{r7, lr}
 8009830:	b084      	sub	sp, #16
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
 8009836:	4608      	mov	r0, r1
 8009838:	4611      	mov	r1, r2
 800983a:	461a      	mov	r2, r3
 800983c:	4603      	mov	r3, r0
 800983e:	70fb      	strb	r3, [r7, #3]
 8009840:	460b      	mov	r3, r1
 8009842:	70bb      	strb	r3, [r7, #2]
 8009844:	4613      	mov	r3, r2
 8009846:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009848:	2300      	movs	r3, #0
 800984a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800984c:	2300      	movs	r3, #0
 800984e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009856:	78bb      	ldrb	r3, [r7, #2]
 8009858:	883a      	ldrh	r2, [r7, #0]
 800985a:	78f9      	ldrb	r1, [r7, #3]
 800985c:	f7f8 f9f6 	bl	8001c4c <HAL_PCD_EP_Open>
 8009860:	4603      	mov	r3, r0
 8009862:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009864:	7bfb      	ldrb	r3, [r7, #15]
 8009866:	4618      	mov	r0, r3
 8009868:	f000 f91e 	bl	8009aa8 <USBD_Get_USB_Status>
 800986c:	4603      	mov	r3, r0
 800986e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009870:	7bbb      	ldrb	r3, [r7, #14]
}
 8009872:	4618      	mov	r0, r3
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b084      	sub	sp, #16
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
 8009882:	460b      	mov	r3, r1
 8009884:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800988a:	2300      	movs	r3, #0
 800988c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009894:	78fa      	ldrb	r2, [r7, #3]
 8009896:	4611      	mov	r1, r2
 8009898:	4618      	mov	r0, r3
 800989a:	f7f8 fa3d 	bl	8001d18 <HAL_PCD_EP_Close>
 800989e:	4603      	mov	r3, r0
 80098a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098a2:	7bfb      	ldrb	r3, [r7, #15]
 80098a4:	4618      	mov	r0, r3
 80098a6:	f000 f8ff 	bl	8009aa8 <USBD_Get_USB_Status>
 80098aa:	4603      	mov	r3, r0
 80098ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3710      	adds	r7, #16
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	460b      	mov	r3, r1
 80098c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098c4:	2300      	movs	r3, #0
 80098c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80098d2:	78fa      	ldrb	r2, [r7, #3]
 80098d4:	4611      	mov	r1, r2
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7f8 fafd 	bl	8001ed6 <HAL_PCD_EP_SetStall>
 80098dc:	4603      	mov	r3, r0
 80098de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098e0:	7bfb      	ldrb	r3, [r7, #15]
 80098e2:	4618      	mov	r0, r3
 80098e4:	f000 f8e0 	bl	8009aa8 <USBD_Get_USB_Status>
 80098e8:	4603      	mov	r3, r0
 80098ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b084      	sub	sp, #16
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
 80098fe:	460b      	mov	r3, r1
 8009900:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009902:	2300      	movs	r3, #0
 8009904:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009906:	2300      	movs	r3, #0
 8009908:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009910:	78fa      	ldrb	r2, [r7, #3]
 8009912:	4611      	mov	r1, r2
 8009914:	4618      	mov	r0, r3
 8009916:	f7f8 fb30 	bl	8001f7a <HAL_PCD_EP_ClrStall>
 800991a:	4603      	mov	r3, r0
 800991c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800991e:	7bfb      	ldrb	r3, [r7, #15]
 8009920:	4618      	mov	r0, r3
 8009922:	f000 f8c1 	bl	8009aa8 <USBD_Get_USB_Status>
 8009926:	4603      	mov	r3, r0
 8009928:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800992a:	7bbb      	ldrb	r3, [r7, #14]
}
 800992c:	4618      	mov	r0, r3
 800992e:	3710      	adds	r7, #16
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009934:	b480      	push	{r7}
 8009936:	b085      	sub	sp, #20
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	460b      	mov	r3, r1
 800993e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009946:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009948:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800994c:	2b00      	cmp	r3, #0
 800994e:	da0c      	bge.n	800996a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009950:	78fb      	ldrb	r3, [r7, #3]
 8009952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009956:	68f9      	ldr	r1, [r7, #12]
 8009958:	1c5a      	adds	r2, r3, #1
 800995a:	4613      	mov	r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	4413      	add	r3, r2
 8009960:	00db      	lsls	r3, r3, #3
 8009962:	440b      	add	r3, r1
 8009964:	3302      	adds	r3, #2
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	e00b      	b.n	8009982 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800996a:	78fb      	ldrb	r3, [r7, #3]
 800996c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009970:	68f9      	ldr	r1, [r7, #12]
 8009972:	4613      	mov	r3, r2
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	4413      	add	r3, r2
 8009978:	00db      	lsls	r3, r3, #3
 800997a:	440b      	add	r3, r1
 800997c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009980:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009982:	4618      	mov	r0, r3
 8009984:	3714      	adds	r7, #20
 8009986:	46bd      	mov	sp, r7
 8009988:	bc80      	pop	{r7}
 800998a:	4770      	bx	lr

0800998c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	460b      	mov	r3, r1
 8009996:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009998:	2300      	movs	r3, #0
 800999a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800999c:	2300      	movs	r3, #0
 800999e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80099a6:	78fa      	ldrb	r2, [r7, #3]
 80099a8:	4611      	mov	r1, r2
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7f8 f929 	bl	8001c02 <HAL_PCD_SetAddress>
 80099b0:	4603      	mov	r3, r0
 80099b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099b4:	7bfb      	ldrb	r3, [r7, #15]
 80099b6:	4618      	mov	r0, r3
 80099b8:	f000 f876 	bl	8009aa8 <USBD_Get_USB_Status>
 80099bc:	4603      	mov	r3, r0
 80099be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3710      	adds	r7, #16
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}

080099ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b086      	sub	sp, #24
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	60f8      	str	r0, [r7, #12]
 80099d2:	607a      	str	r2, [r7, #4]
 80099d4:	461a      	mov	r2, r3
 80099d6:	460b      	mov	r3, r1
 80099d8:	72fb      	strb	r3, [r7, #11]
 80099da:	4613      	mov	r3, r2
 80099dc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099de:	2300      	movs	r3, #0
 80099e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099e2:	2300      	movs	r3, #0
 80099e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80099ec:	893b      	ldrh	r3, [r7, #8]
 80099ee:	7af9      	ldrb	r1, [r7, #11]
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	f7f8 fa2d 	bl	8001e50 <HAL_PCD_EP_Transmit>
 80099f6:	4603      	mov	r3, r0
 80099f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099fa:	7dfb      	ldrb	r3, [r7, #23]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f000 f853 	bl	8009aa8 <USBD_Get_USB_Status>
 8009a02:	4603      	mov	r3, r0
 8009a04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a06:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3718      	adds	r7, #24
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b086      	sub	sp, #24
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	607a      	str	r2, [r7, #4]
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	72fb      	strb	r3, [r7, #11]
 8009a20:	4613      	mov	r3, r2
 8009a22:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a24:	2300      	movs	r3, #0
 8009a26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009a32:	893b      	ldrh	r3, [r7, #8]
 8009a34:	7af9      	ldrb	r1, [r7, #11]
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	f7f8 f9b6 	bl	8001da8 <HAL_PCD_EP_Receive>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a40:	7dfb      	ldrb	r3, [r7, #23]
 8009a42:	4618      	mov	r0, r3
 8009a44:	f000 f830 	bl	8009aa8 <USBD_Get_USB_Status>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a4c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3718      	adds	r7, #24
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b082      	sub	sp, #8
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
 8009a5e:	460b      	mov	r3, r1
 8009a60:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009a68:	78fa      	ldrb	r2, [r7, #3]
 8009a6a:	4611      	mov	r1, r2
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7f8 f9d8 	bl	8001e22 <HAL_PCD_EP_GetRxCount>
 8009a72:	4603      	mov	r3, r0
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3708      	adds	r7, #8
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a84:	4b02      	ldr	r3, [pc, #8]	; (8009a90 <USBD_static_malloc+0x14>)
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	370c      	adds	r7, #12
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bc80      	pop	{r7}
 8009a8e:	4770      	bx	lr
 8009a90:	20001c74 	.word	0x20001c74

08009a94 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]

}
 8009a9c:	bf00      	nop
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bc80      	pop	{r7}
 8009aa4:	4770      	bx	lr
	...

08009aa8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	4603      	mov	r3, r0
 8009ab0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009ab6:	79fb      	ldrb	r3, [r7, #7]
 8009ab8:	2b03      	cmp	r3, #3
 8009aba:	d817      	bhi.n	8009aec <USBD_Get_USB_Status+0x44>
 8009abc:	a201      	add	r2, pc, #4	; (adr r2, 8009ac4 <USBD_Get_USB_Status+0x1c>)
 8009abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac2:	bf00      	nop
 8009ac4:	08009ad5 	.word	0x08009ad5
 8009ac8:	08009adb 	.word	0x08009adb
 8009acc:	08009ae1 	.word	0x08009ae1
 8009ad0:	08009ae7 	.word	0x08009ae7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ad8:	e00b      	b.n	8009af2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ada:	2302      	movs	r3, #2
 8009adc:	73fb      	strb	r3, [r7, #15]
    break;
 8009ade:	e008      	b.n	8009af2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ae4:	e005      	b.n	8009af2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ae6:	2302      	movs	r3, #2
 8009ae8:	73fb      	strb	r3, [r7, #15]
    break;
 8009aea:	e002      	b.n	8009af2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009aec:	2302      	movs	r3, #2
 8009aee:	73fb      	strb	r3, [r7, #15]
    break;
 8009af0:	bf00      	nop
  }
  return usb_status;
 8009af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3714      	adds	r7, #20
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bc80      	pop	{r7}
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop

08009b00 <__errno>:
 8009b00:	4b01      	ldr	r3, [pc, #4]	; (8009b08 <__errno+0x8>)
 8009b02:	6818      	ldr	r0, [r3, #0]
 8009b04:	4770      	bx	lr
 8009b06:	bf00      	nop
 8009b08:	200002e0 	.word	0x200002e0

08009b0c <__libc_init_array>:
 8009b0c:	b570      	push	{r4, r5, r6, lr}
 8009b0e:	2600      	movs	r6, #0
 8009b10:	4d0c      	ldr	r5, [pc, #48]	; (8009b44 <__libc_init_array+0x38>)
 8009b12:	4c0d      	ldr	r4, [pc, #52]	; (8009b48 <__libc_init_array+0x3c>)
 8009b14:	1b64      	subs	r4, r4, r5
 8009b16:	10a4      	asrs	r4, r4, #2
 8009b18:	42a6      	cmp	r6, r4
 8009b1a:	d109      	bne.n	8009b30 <__libc_init_array+0x24>
 8009b1c:	f001 faf4 	bl	800b108 <_init>
 8009b20:	2600      	movs	r6, #0
 8009b22:	4d0a      	ldr	r5, [pc, #40]	; (8009b4c <__libc_init_array+0x40>)
 8009b24:	4c0a      	ldr	r4, [pc, #40]	; (8009b50 <__libc_init_array+0x44>)
 8009b26:	1b64      	subs	r4, r4, r5
 8009b28:	10a4      	asrs	r4, r4, #2
 8009b2a:	42a6      	cmp	r6, r4
 8009b2c:	d105      	bne.n	8009b3a <__libc_init_array+0x2e>
 8009b2e:	bd70      	pop	{r4, r5, r6, pc}
 8009b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b34:	4798      	blx	r3
 8009b36:	3601      	adds	r6, #1
 8009b38:	e7ee      	b.n	8009b18 <__libc_init_array+0xc>
 8009b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b3e:	4798      	blx	r3
 8009b40:	3601      	adds	r6, #1
 8009b42:	e7f2      	b.n	8009b2a <__libc_init_array+0x1e>
 8009b44:	0800b8a4 	.word	0x0800b8a4
 8009b48:	0800b8a4 	.word	0x0800b8a4
 8009b4c:	0800b8a4 	.word	0x0800b8a4
 8009b50:	0800b8a8 	.word	0x0800b8a8

08009b54 <memcpy>:
 8009b54:	440a      	add	r2, r1
 8009b56:	4291      	cmp	r1, r2
 8009b58:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b5c:	d100      	bne.n	8009b60 <memcpy+0xc>
 8009b5e:	4770      	bx	lr
 8009b60:	b510      	push	{r4, lr}
 8009b62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b66:	4291      	cmp	r1, r2
 8009b68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b6c:	d1f9      	bne.n	8009b62 <memcpy+0xe>
 8009b6e:	bd10      	pop	{r4, pc}

08009b70 <memset>:
 8009b70:	4603      	mov	r3, r0
 8009b72:	4402      	add	r2, r0
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d100      	bne.n	8009b7a <memset+0xa>
 8009b78:	4770      	bx	lr
 8009b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b7e:	e7f9      	b.n	8009b74 <memset+0x4>

08009b80 <siprintf>:
 8009b80:	b40e      	push	{r1, r2, r3}
 8009b82:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b86:	b500      	push	{lr}
 8009b88:	b09c      	sub	sp, #112	; 0x70
 8009b8a:	ab1d      	add	r3, sp, #116	; 0x74
 8009b8c:	9002      	str	r0, [sp, #8]
 8009b8e:	9006      	str	r0, [sp, #24]
 8009b90:	9107      	str	r1, [sp, #28]
 8009b92:	9104      	str	r1, [sp, #16]
 8009b94:	4808      	ldr	r0, [pc, #32]	; (8009bb8 <siprintf+0x38>)
 8009b96:	4909      	ldr	r1, [pc, #36]	; (8009bbc <siprintf+0x3c>)
 8009b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b9c:	9105      	str	r1, [sp, #20]
 8009b9e:	6800      	ldr	r0, [r0, #0]
 8009ba0:	a902      	add	r1, sp, #8
 8009ba2:	9301      	str	r3, [sp, #4]
 8009ba4:	f000 fa72 	bl	800a08c <_svfiprintf_r>
 8009ba8:	2200      	movs	r2, #0
 8009baa:	9b02      	ldr	r3, [sp, #8]
 8009bac:	701a      	strb	r2, [r3, #0]
 8009bae:	b01c      	add	sp, #112	; 0x70
 8009bb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bb4:	b003      	add	sp, #12
 8009bb6:	4770      	bx	lr
 8009bb8:	200002e0 	.word	0x200002e0
 8009bbc:	ffff0208 	.word	0xffff0208

08009bc0 <strncmp>:
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	b510      	push	{r4, lr}
 8009bc4:	b172      	cbz	r2, 8009be4 <strncmp+0x24>
 8009bc6:	3901      	subs	r1, #1
 8009bc8:	1884      	adds	r4, r0, r2
 8009bca:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009bce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009bd2:	4290      	cmp	r0, r2
 8009bd4:	d101      	bne.n	8009bda <strncmp+0x1a>
 8009bd6:	42a3      	cmp	r3, r4
 8009bd8:	d101      	bne.n	8009bde <strncmp+0x1e>
 8009bda:	1a80      	subs	r0, r0, r2
 8009bdc:	bd10      	pop	{r4, pc}
 8009bde:	2800      	cmp	r0, #0
 8009be0:	d1f3      	bne.n	8009bca <strncmp+0xa>
 8009be2:	e7fa      	b.n	8009bda <strncmp+0x1a>
 8009be4:	4610      	mov	r0, r2
 8009be6:	e7f9      	b.n	8009bdc <strncmp+0x1c>

08009be8 <strtok>:
 8009be8:	4b16      	ldr	r3, [pc, #88]	; (8009c44 <strtok+0x5c>)
 8009bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bee:	681f      	ldr	r7, [r3, #0]
 8009bf0:	4605      	mov	r5, r0
 8009bf2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8009bf4:	460e      	mov	r6, r1
 8009bf6:	b9ec      	cbnz	r4, 8009c34 <strtok+0x4c>
 8009bf8:	2050      	movs	r0, #80	; 0x50
 8009bfa:	f000 f907 	bl	8009e0c <malloc>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	65b8      	str	r0, [r7, #88]	; 0x58
 8009c02:	b920      	cbnz	r0, 8009c0e <strtok+0x26>
 8009c04:	2157      	movs	r1, #87	; 0x57
 8009c06:	4b10      	ldr	r3, [pc, #64]	; (8009c48 <strtok+0x60>)
 8009c08:	4810      	ldr	r0, [pc, #64]	; (8009c4c <strtok+0x64>)
 8009c0a:	f000 f8cf 	bl	8009dac <__assert_func>
 8009c0e:	e9c0 4400 	strd	r4, r4, [r0]
 8009c12:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009c16:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009c1a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009c1e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009c22:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009c26:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009c2a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009c2e:	6184      	str	r4, [r0, #24]
 8009c30:	7704      	strb	r4, [r0, #28]
 8009c32:	6244      	str	r4, [r0, #36]	; 0x24
 8009c34:	4631      	mov	r1, r6
 8009c36:	4628      	mov	r0, r5
 8009c38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c40:	f000 b806 	b.w	8009c50 <__strtok_r>
 8009c44:	200002e0 	.word	0x200002e0
 8009c48:	0800b658 	.word	0x0800b658
 8009c4c:	0800b66f 	.word	0x0800b66f

08009c50 <__strtok_r>:
 8009c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c52:	b908      	cbnz	r0, 8009c58 <__strtok_r+0x8>
 8009c54:	6810      	ldr	r0, [r2, #0]
 8009c56:	b188      	cbz	r0, 8009c7c <__strtok_r+0x2c>
 8009c58:	4604      	mov	r4, r0
 8009c5a:	460f      	mov	r7, r1
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009c62:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009c66:	b91e      	cbnz	r6, 8009c70 <__strtok_r+0x20>
 8009c68:	b965      	cbnz	r5, 8009c84 <__strtok_r+0x34>
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	6015      	str	r5, [r2, #0]
 8009c6e:	e005      	b.n	8009c7c <__strtok_r+0x2c>
 8009c70:	42b5      	cmp	r5, r6
 8009c72:	d1f6      	bne.n	8009c62 <__strtok_r+0x12>
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1f0      	bne.n	8009c5a <__strtok_r+0xa>
 8009c78:	6014      	str	r4, [r2, #0]
 8009c7a:	7003      	strb	r3, [r0, #0]
 8009c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c7e:	461c      	mov	r4, r3
 8009c80:	e00c      	b.n	8009c9c <__strtok_r+0x4c>
 8009c82:	b915      	cbnz	r5, 8009c8a <__strtok_r+0x3a>
 8009c84:	460e      	mov	r6, r1
 8009c86:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c8a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009c8e:	42ab      	cmp	r3, r5
 8009c90:	d1f7      	bne.n	8009c82 <__strtok_r+0x32>
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d0f3      	beq.n	8009c7e <__strtok_r+0x2e>
 8009c96:	2300      	movs	r3, #0
 8009c98:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009c9c:	6014      	str	r4, [r2, #0]
 8009c9e:	e7ed      	b.n	8009c7c <__strtok_r+0x2c>

08009ca0 <_strtol_l.constprop.0>:
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ca6:	4680      	mov	r8, r0
 8009ca8:	d001      	beq.n	8009cae <_strtol_l.constprop.0+0xe>
 8009caa:	2b24      	cmp	r3, #36	; 0x24
 8009cac:	d906      	bls.n	8009cbc <_strtol_l.constprop.0+0x1c>
 8009cae:	f7ff ff27 	bl	8009b00 <__errno>
 8009cb2:	2316      	movs	r3, #22
 8009cb4:	6003      	str	r3, [r0, #0]
 8009cb6:	2000      	movs	r0, #0
 8009cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cbc:	460d      	mov	r5, r1
 8009cbe:	4f35      	ldr	r7, [pc, #212]	; (8009d94 <_strtol_l.constprop.0+0xf4>)
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009cc6:	5de6      	ldrb	r6, [r4, r7]
 8009cc8:	f016 0608 	ands.w	r6, r6, #8
 8009ccc:	d1f8      	bne.n	8009cc0 <_strtol_l.constprop.0+0x20>
 8009cce:	2c2d      	cmp	r4, #45	; 0x2d
 8009cd0:	d12f      	bne.n	8009d32 <_strtol_l.constprop.0+0x92>
 8009cd2:	2601      	movs	r6, #1
 8009cd4:	782c      	ldrb	r4, [r5, #0]
 8009cd6:	1c85      	adds	r5, r0, #2
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d057      	beq.n	8009d8c <_strtol_l.constprop.0+0xec>
 8009cdc:	2b10      	cmp	r3, #16
 8009cde:	d109      	bne.n	8009cf4 <_strtol_l.constprop.0+0x54>
 8009ce0:	2c30      	cmp	r4, #48	; 0x30
 8009ce2:	d107      	bne.n	8009cf4 <_strtol_l.constprop.0+0x54>
 8009ce4:	7828      	ldrb	r0, [r5, #0]
 8009ce6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009cea:	2858      	cmp	r0, #88	; 0x58
 8009cec:	d149      	bne.n	8009d82 <_strtol_l.constprop.0+0xe2>
 8009cee:	2310      	movs	r3, #16
 8009cf0:	786c      	ldrb	r4, [r5, #1]
 8009cf2:	3502      	adds	r5, #2
 8009cf4:	2700      	movs	r7, #0
 8009cf6:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8009cfa:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009cfe:	fbbe f9f3 	udiv	r9, lr, r3
 8009d02:	4638      	mov	r0, r7
 8009d04:	fb03 ea19 	mls	sl, r3, r9, lr
 8009d08:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009d0c:	f1bc 0f09 	cmp.w	ip, #9
 8009d10:	d814      	bhi.n	8009d3c <_strtol_l.constprop.0+0x9c>
 8009d12:	4664      	mov	r4, ip
 8009d14:	42a3      	cmp	r3, r4
 8009d16:	dd22      	ble.n	8009d5e <_strtol_l.constprop.0+0xbe>
 8009d18:	2f00      	cmp	r7, #0
 8009d1a:	db1d      	blt.n	8009d58 <_strtol_l.constprop.0+0xb8>
 8009d1c:	4581      	cmp	r9, r0
 8009d1e:	d31b      	bcc.n	8009d58 <_strtol_l.constprop.0+0xb8>
 8009d20:	d101      	bne.n	8009d26 <_strtol_l.constprop.0+0x86>
 8009d22:	45a2      	cmp	sl, r4
 8009d24:	db18      	blt.n	8009d58 <_strtol_l.constprop.0+0xb8>
 8009d26:	2701      	movs	r7, #1
 8009d28:	fb00 4003 	mla	r0, r0, r3, r4
 8009d2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d30:	e7ea      	b.n	8009d08 <_strtol_l.constprop.0+0x68>
 8009d32:	2c2b      	cmp	r4, #43	; 0x2b
 8009d34:	bf04      	itt	eq
 8009d36:	782c      	ldrbeq	r4, [r5, #0]
 8009d38:	1c85      	addeq	r5, r0, #2
 8009d3a:	e7cd      	b.n	8009cd8 <_strtol_l.constprop.0+0x38>
 8009d3c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009d40:	f1bc 0f19 	cmp.w	ip, #25
 8009d44:	d801      	bhi.n	8009d4a <_strtol_l.constprop.0+0xaa>
 8009d46:	3c37      	subs	r4, #55	; 0x37
 8009d48:	e7e4      	b.n	8009d14 <_strtol_l.constprop.0+0x74>
 8009d4a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009d4e:	f1bc 0f19 	cmp.w	ip, #25
 8009d52:	d804      	bhi.n	8009d5e <_strtol_l.constprop.0+0xbe>
 8009d54:	3c57      	subs	r4, #87	; 0x57
 8009d56:	e7dd      	b.n	8009d14 <_strtol_l.constprop.0+0x74>
 8009d58:	f04f 37ff 	mov.w	r7, #4294967295
 8009d5c:	e7e6      	b.n	8009d2c <_strtol_l.constprop.0+0x8c>
 8009d5e:	2f00      	cmp	r7, #0
 8009d60:	da07      	bge.n	8009d72 <_strtol_l.constprop.0+0xd2>
 8009d62:	2322      	movs	r3, #34	; 0x22
 8009d64:	4670      	mov	r0, lr
 8009d66:	f8c8 3000 	str.w	r3, [r8]
 8009d6a:	2a00      	cmp	r2, #0
 8009d6c:	d0a4      	beq.n	8009cb8 <_strtol_l.constprop.0+0x18>
 8009d6e:	1e69      	subs	r1, r5, #1
 8009d70:	e005      	b.n	8009d7e <_strtol_l.constprop.0+0xde>
 8009d72:	b106      	cbz	r6, 8009d76 <_strtol_l.constprop.0+0xd6>
 8009d74:	4240      	negs	r0, r0
 8009d76:	2a00      	cmp	r2, #0
 8009d78:	d09e      	beq.n	8009cb8 <_strtol_l.constprop.0+0x18>
 8009d7a:	2f00      	cmp	r7, #0
 8009d7c:	d1f7      	bne.n	8009d6e <_strtol_l.constprop.0+0xce>
 8009d7e:	6011      	str	r1, [r2, #0]
 8009d80:	e79a      	b.n	8009cb8 <_strtol_l.constprop.0+0x18>
 8009d82:	2430      	movs	r4, #48	; 0x30
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d1b5      	bne.n	8009cf4 <_strtol_l.constprop.0+0x54>
 8009d88:	2308      	movs	r3, #8
 8009d8a:	e7b3      	b.n	8009cf4 <_strtol_l.constprop.0+0x54>
 8009d8c:	2c30      	cmp	r4, #48	; 0x30
 8009d8e:	d0a9      	beq.n	8009ce4 <_strtol_l.constprop.0+0x44>
 8009d90:	230a      	movs	r3, #10
 8009d92:	e7af      	b.n	8009cf4 <_strtol_l.constprop.0+0x54>
 8009d94:	0800b709 	.word	0x0800b709

08009d98 <strtol>:
 8009d98:	4613      	mov	r3, r2
 8009d9a:	460a      	mov	r2, r1
 8009d9c:	4601      	mov	r1, r0
 8009d9e:	4802      	ldr	r0, [pc, #8]	; (8009da8 <strtol+0x10>)
 8009da0:	6800      	ldr	r0, [r0, #0]
 8009da2:	f7ff bf7d 	b.w	8009ca0 <_strtol_l.constprop.0>
 8009da6:	bf00      	nop
 8009da8:	200002e0 	.word	0x200002e0

08009dac <__assert_func>:
 8009dac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009dae:	4614      	mov	r4, r2
 8009db0:	461a      	mov	r2, r3
 8009db2:	4b09      	ldr	r3, [pc, #36]	; (8009dd8 <__assert_func+0x2c>)
 8009db4:	4605      	mov	r5, r0
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	68d8      	ldr	r0, [r3, #12]
 8009dba:	b14c      	cbz	r4, 8009dd0 <__assert_func+0x24>
 8009dbc:	4b07      	ldr	r3, [pc, #28]	; (8009ddc <__assert_func+0x30>)
 8009dbe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009dc2:	9100      	str	r1, [sp, #0]
 8009dc4:	462b      	mov	r3, r5
 8009dc6:	4906      	ldr	r1, [pc, #24]	; (8009de0 <__assert_func+0x34>)
 8009dc8:	f000 f80e 	bl	8009de8 <fiprintf>
 8009dcc:	f000 fe1c 	bl	800aa08 <abort>
 8009dd0:	4b04      	ldr	r3, [pc, #16]	; (8009de4 <__assert_func+0x38>)
 8009dd2:	461c      	mov	r4, r3
 8009dd4:	e7f3      	b.n	8009dbe <__assert_func+0x12>
 8009dd6:	bf00      	nop
 8009dd8:	200002e0 	.word	0x200002e0
 8009ddc:	0800b6cc 	.word	0x0800b6cc
 8009de0:	0800b6d9 	.word	0x0800b6d9
 8009de4:	0800b707 	.word	0x0800b707

08009de8 <fiprintf>:
 8009de8:	b40e      	push	{r1, r2, r3}
 8009dea:	b503      	push	{r0, r1, lr}
 8009dec:	4601      	mov	r1, r0
 8009dee:	ab03      	add	r3, sp, #12
 8009df0:	4805      	ldr	r0, [pc, #20]	; (8009e08 <fiprintf+0x20>)
 8009df2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009df6:	6800      	ldr	r0, [r0, #0]
 8009df8:	9301      	str	r3, [sp, #4]
 8009dfa:	f000 fa6f 	bl	800a2dc <_vfiprintf_r>
 8009dfe:	b002      	add	sp, #8
 8009e00:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e04:	b003      	add	sp, #12
 8009e06:	4770      	bx	lr
 8009e08:	200002e0 	.word	0x200002e0

08009e0c <malloc>:
 8009e0c:	4b02      	ldr	r3, [pc, #8]	; (8009e18 <malloc+0xc>)
 8009e0e:	4601      	mov	r1, r0
 8009e10:	6818      	ldr	r0, [r3, #0]
 8009e12:	f000 b86b 	b.w	8009eec <_malloc_r>
 8009e16:	bf00      	nop
 8009e18:	200002e0 	.word	0x200002e0

08009e1c <_free_r>:
 8009e1c:	b538      	push	{r3, r4, r5, lr}
 8009e1e:	4605      	mov	r5, r0
 8009e20:	2900      	cmp	r1, #0
 8009e22:	d040      	beq.n	8009ea6 <_free_r+0x8a>
 8009e24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e28:	1f0c      	subs	r4, r1, #4
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	bfb8      	it	lt
 8009e2e:	18e4      	addlt	r4, r4, r3
 8009e30:	f001 f836 	bl	800aea0 <__malloc_lock>
 8009e34:	4a1c      	ldr	r2, [pc, #112]	; (8009ea8 <_free_r+0x8c>)
 8009e36:	6813      	ldr	r3, [r2, #0]
 8009e38:	b933      	cbnz	r3, 8009e48 <_free_r+0x2c>
 8009e3a:	6063      	str	r3, [r4, #4]
 8009e3c:	6014      	str	r4, [r2, #0]
 8009e3e:	4628      	mov	r0, r5
 8009e40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e44:	f001 b832 	b.w	800aeac <__malloc_unlock>
 8009e48:	42a3      	cmp	r3, r4
 8009e4a:	d908      	bls.n	8009e5e <_free_r+0x42>
 8009e4c:	6820      	ldr	r0, [r4, #0]
 8009e4e:	1821      	adds	r1, r4, r0
 8009e50:	428b      	cmp	r3, r1
 8009e52:	bf01      	itttt	eq
 8009e54:	6819      	ldreq	r1, [r3, #0]
 8009e56:	685b      	ldreq	r3, [r3, #4]
 8009e58:	1809      	addeq	r1, r1, r0
 8009e5a:	6021      	streq	r1, [r4, #0]
 8009e5c:	e7ed      	b.n	8009e3a <_free_r+0x1e>
 8009e5e:	461a      	mov	r2, r3
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	b10b      	cbz	r3, 8009e68 <_free_r+0x4c>
 8009e64:	42a3      	cmp	r3, r4
 8009e66:	d9fa      	bls.n	8009e5e <_free_r+0x42>
 8009e68:	6811      	ldr	r1, [r2, #0]
 8009e6a:	1850      	adds	r0, r2, r1
 8009e6c:	42a0      	cmp	r0, r4
 8009e6e:	d10b      	bne.n	8009e88 <_free_r+0x6c>
 8009e70:	6820      	ldr	r0, [r4, #0]
 8009e72:	4401      	add	r1, r0
 8009e74:	1850      	adds	r0, r2, r1
 8009e76:	4283      	cmp	r3, r0
 8009e78:	6011      	str	r1, [r2, #0]
 8009e7a:	d1e0      	bne.n	8009e3e <_free_r+0x22>
 8009e7c:	6818      	ldr	r0, [r3, #0]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	4401      	add	r1, r0
 8009e82:	6011      	str	r1, [r2, #0]
 8009e84:	6053      	str	r3, [r2, #4]
 8009e86:	e7da      	b.n	8009e3e <_free_r+0x22>
 8009e88:	d902      	bls.n	8009e90 <_free_r+0x74>
 8009e8a:	230c      	movs	r3, #12
 8009e8c:	602b      	str	r3, [r5, #0]
 8009e8e:	e7d6      	b.n	8009e3e <_free_r+0x22>
 8009e90:	6820      	ldr	r0, [r4, #0]
 8009e92:	1821      	adds	r1, r4, r0
 8009e94:	428b      	cmp	r3, r1
 8009e96:	bf01      	itttt	eq
 8009e98:	6819      	ldreq	r1, [r3, #0]
 8009e9a:	685b      	ldreq	r3, [r3, #4]
 8009e9c:	1809      	addeq	r1, r1, r0
 8009e9e:	6021      	streq	r1, [r4, #0]
 8009ea0:	6063      	str	r3, [r4, #4]
 8009ea2:	6054      	str	r4, [r2, #4]
 8009ea4:	e7cb      	b.n	8009e3e <_free_r+0x22>
 8009ea6:	bd38      	pop	{r3, r4, r5, pc}
 8009ea8:	20001e94 	.word	0x20001e94

08009eac <sbrk_aligned>:
 8009eac:	b570      	push	{r4, r5, r6, lr}
 8009eae:	4e0e      	ldr	r6, [pc, #56]	; (8009ee8 <sbrk_aligned+0x3c>)
 8009eb0:	460c      	mov	r4, r1
 8009eb2:	6831      	ldr	r1, [r6, #0]
 8009eb4:	4605      	mov	r5, r0
 8009eb6:	b911      	cbnz	r1, 8009ebe <sbrk_aligned+0x12>
 8009eb8:	f000 fcd6 	bl	800a868 <_sbrk_r>
 8009ebc:	6030      	str	r0, [r6, #0]
 8009ebe:	4621      	mov	r1, r4
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	f000 fcd1 	bl	800a868 <_sbrk_r>
 8009ec6:	1c43      	adds	r3, r0, #1
 8009ec8:	d00a      	beq.n	8009ee0 <sbrk_aligned+0x34>
 8009eca:	1cc4      	adds	r4, r0, #3
 8009ecc:	f024 0403 	bic.w	r4, r4, #3
 8009ed0:	42a0      	cmp	r0, r4
 8009ed2:	d007      	beq.n	8009ee4 <sbrk_aligned+0x38>
 8009ed4:	1a21      	subs	r1, r4, r0
 8009ed6:	4628      	mov	r0, r5
 8009ed8:	f000 fcc6 	bl	800a868 <_sbrk_r>
 8009edc:	3001      	adds	r0, #1
 8009ede:	d101      	bne.n	8009ee4 <sbrk_aligned+0x38>
 8009ee0:	f04f 34ff 	mov.w	r4, #4294967295
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	bd70      	pop	{r4, r5, r6, pc}
 8009ee8:	20001e98 	.word	0x20001e98

08009eec <_malloc_r>:
 8009eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ef0:	1ccd      	adds	r5, r1, #3
 8009ef2:	f025 0503 	bic.w	r5, r5, #3
 8009ef6:	3508      	adds	r5, #8
 8009ef8:	2d0c      	cmp	r5, #12
 8009efa:	bf38      	it	cc
 8009efc:	250c      	movcc	r5, #12
 8009efe:	2d00      	cmp	r5, #0
 8009f00:	4607      	mov	r7, r0
 8009f02:	db01      	blt.n	8009f08 <_malloc_r+0x1c>
 8009f04:	42a9      	cmp	r1, r5
 8009f06:	d905      	bls.n	8009f14 <_malloc_r+0x28>
 8009f08:	230c      	movs	r3, #12
 8009f0a:	2600      	movs	r6, #0
 8009f0c:	603b      	str	r3, [r7, #0]
 8009f0e:	4630      	mov	r0, r6
 8009f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f14:	4e2e      	ldr	r6, [pc, #184]	; (8009fd0 <_malloc_r+0xe4>)
 8009f16:	f000 ffc3 	bl	800aea0 <__malloc_lock>
 8009f1a:	6833      	ldr	r3, [r6, #0]
 8009f1c:	461c      	mov	r4, r3
 8009f1e:	bb34      	cbnz	r4, 8009f6e <_malloc_r+0x82>
 8009f20:	4629      	mov	r1, r5
 8009f22:	4638      	mov	r0, r7
 8009f24:	f7ff ffc2 	bl	8009eac <sbrk_aligned>
 8009f28:	1c43      	adds	r3, r0, #1
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	d14d      	bne.n	8009fca <_malloc_r+0xde>
 8009f2e:	6834      	ldr	r4, [r6, #0]
 8009f30:	4626      	mov	r6, r4
 8009f32:	2e00      	cmp	r6, #0
 8009f34:	d140      	bne.n	8009fb8 <_malloc_r+0xcc>
 8009f36:	6823      	ldr	r3, [r4, #0]
 8009f38:	4631      	mov	r1, r6
 8009f3a:	4638      	mov	r0, r7
 8009f3c:	eb04 0803 	add.w	r8, r4, r3
 8009f40:	f000 fc92 	bl	800a868 <_sbrk_r>
 8009f44:	4580      	cmp	r8, r0
 8009f46:	d13a      	bne.n	8009fbe <_malloc_r+0xd2>
 8009f48:	6821      	ldr	r1, [r4, #0]
 8009f4a:	3503      	adds	r5, #3
 8009f4c:	1a6d      	subs	r5, r5, r1
 8009f4e:	f025 0503 	bic.w	r5, r5, #3
 8009f52:	3508      	adds	r5, #8
 8009f54:	2d0c      	cmp	r5, #12
 8009f56:	bf38      	it	cc
 8009f58:	250c      	movcc	r5, #12
 8009f5a:	4638      	mov	r0, r7
 8009f5c:	4629      	mov	r1, r5
 8009f5e:	f7ff ffa5 	bl	8009eac <sbrk_aligned>
 8009f62:	3001      	adds	r0, #1
 8009f64:	d02b      	beq.n	8009fbe <_malloc_r+0xd2>
 8009f66:	6823      	ldr	r3, [r4, #0]
 8009f68:	442b      	add	r3, r5
 8009f6a:	6023      	str	r3, [r4, #0]
 8009f6c:	e00e      	b.n	8009f8c <_malloc_r+0xa0>
 8009f6e:	6822      	ldr	r2, [r4, #0]
 8009f70:	1b52      	subs	r2, r2, r5
 8009f72:	d41e      	bmi.n	8009fb2 <_malloc_r+0xc6>
 8009f74:	2a0b      	cmp	r2, #11
 8009f76:	d916      	bls.n	8009fa6 <_malloc_r+0xba>
 8009f78:	1961      	adds	r1, r4, r5
 8009f7a:	42a3      	cmp	r3, r4
 8009f7c:	6025      	str	r5, [r4, #0]
 8009f7e:	bf18      	it	ne
 8009f80:	6059      	strne	r1, [r3, #4]
 8009f82:	6863      	ldr	r3, [r4, #4]
 8009f84:	bf08      	it	eq
 8009f86:	6031      	streq	r1, [r6, #0]
 8009f88:	5162      	str	r2, [r4, r5]
 8009f8a:	604b      	str	r3, [r1, #4]
 8009f8c:	4638      	mov	r0, r7
 8009f8e:	f104 060b 	add.w	r6, r4, #11
 8009f92:	f000 ff8b 	bl	800aeac <__malloc_unlock>
 8009f96:	f026 0607 	bic.w	r6, r6, #7
 8009f9a:	1d23      	adds	r3, r4, #4
 8009f9c:	1af2      	subs	r2, r6, r3
 8009f9e:	d0b6      	beq.n	8009f0e <_malloc_r+0x22>
 8009fa0:	1b9b      	subs	r3, r3, r6
 8009fa2:	50a3      	str	r3, [r4, r2]
 8009fa4:	e7b3      	b.n	8009f0e <_malloc_r+0x22>
 8009fa6:	6862      	ldr	r2, [r4, #4]
 8009fa8:	42a3      	cmp	r3, r4
 8009faa:	bf0c      	ite	eq
 8009fac:	6032      	streq	r2, [r6, #0]
 8009fae:	605a      	strne	r2, [r3, #4]
 8009fb0:	e7ec      	b.n	8009f8c <_malloc_r+0xa0>
 8009fb2:	4623      	mov	r3, r4
 8009fb4:	6864      	ldr	r4, [r4, #4]
 8009fb6:	e7b2      	b.n	8009f1e <_malloc_r+0x32>
 8009fb8:	4634      	mov	r4, r6
 8009fba:	6876      	ldr	r6, [r6, #4]
 8009fbc:	e7b9      	b.n	8009f32 <_malloc_r+0x46>
 8009fbe:	230c      	movs	r3, #12
 8009fc0:	4638      	mov	r0, r7
 8009fc2:	603b      	str	r3, [r7, #0]
 8009fc4:	f000 ff72 	bl	800aeac <__malloc_unlock>
 8009fc8:	e7a1      	b.n	8009f0e <_malloc_r+0x22>
 8009fca:	6025      	str	r5, [r4, #0]
 8009fcc:	e7de      	b.n	8009f8c <_malloc_r+0xa0>
 8009fce:	bf00      	nop
 8009fd0:	20001e94 	.word	0x20001e94

08009fd4 <__ssputs_r>:
 8009fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd8:	688e      	ldr	r6, [r1, #8]
 8009fda:	4682      	mov	sl, r0
 8009fdc:	429e      	cmp	r6, r3
 8009fde:	460c      	mov	r4, r1
 8009fe0:	4690      	mov	r8, r2
 8009fe2:	461f      	mov	r7, r3
 8009fe4:	d838      	bhi.n	800a058 <__ssputs_r+0x84>
 8009fe6:	898a      	ldrh	r2, [r1, #12]
 8009fe8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fec:	d032      	beq.n	800a054 <__ssputs_r+0x80>
 8009fee:	6825      	ldr	r5, [r4, #0]
 8009ff0:	6909      	ldr	r1, [r1, #16]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	eba5 0901 	sub.w	r9, r5, r1
 8009ff8:	6965      	ldr	r5, [r4, #20]
 8009ffa:	444b      	add	r3, r9
 8009ffc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a000:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a004:	106d      	asrs	r5, r5, #1
 800a006:	429d      	cmp	r5, r3
 800a008:	bf38      	it	cc
 800a00a:	461d      	movcc	r5, r3
 800a00c:	0553      	lsls	r3, r2, #21
 800a00e:	d531      	bpl.n	800a074 <__ssputs_r+0xa0>
 800a010:	4629      	mov	r1, r5
 800a012:	f7ff ff6b 	bl	8009eec <_malloc_r>
 800a016:	4606      	mov	r6, r0
 800a018:	b950      	cbnz	r0, 800a030 <__ssputs_r+0x5c>
 800a01a:	230c      	movs	r3, #12
 800a01c:	f04f 30ff 	mov.w	r0, #4294967295
 800a020:	f8ca 3000 	str.w	r3, [sl]
 800a024:	89a3      	ldrh	r3, [r4, #12]
 800a026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a02a:	81a3      	strh	r3, [r4, #12]
 800a02c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a030:	464a      	mov	r2, r9
 800a032:	6921      	ldr	r1, [r4, #16]
 800a034:	f7ff fd8e 	bl	8009b54 <memcpy>
 800a038:	89a3      	ldrh	r3, [r4, #12]
 800a03a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a03e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a042:	81a3      	strh	r3, [r4, #12]
 800a044:	6126      	str	r6, [r4, #16]
 800a046:	444e      	add	r6, r9
 800a048:	6026      	str	r6, [r4, #0]
 800a04a:	463e      	mov	r6, r7
 800a04c:	6165      	str	r5, [r4, #20]
 800a04e:	eba5 0509 	sub.w	r5, r5, r9
 800a052:	60a5      	str	r5, [r4, #8]
 800a054:	42be      	cmp	r6, r7
 800a056:	d900      	bls.n	800a05a <__ssputs_r+0x86>
 800a058:	463e      	mov	r6, r7
 800a05a:	4632      	mov	r2, r6
 800a05c:	4641      	mov	r1, r8
 800a05e:	6820      	ldr	r0, [r4, #0]
 800a060:	f000 ff04 	bl	800ae6c <memmove>
 800a064:	68a3      	ldr	r3, [r4, #8]
 800a066:	2000      	movs	r0, #0
 800a068:	1b9b      	subs	r3, r3, r6
 800a06a:	60a3      	str	r3, [r4, #8]
 800a06c:	6823      	ldr	r3, [r4, #0]
 800a06e:	4433      	add	r3, r6
 800a070:	6023      	str	r3, [r4, #0]
 800a072:	e7db      	b.n	800a02c <__ssputs_r+0x58>
 800a074:	462a      	mov	r2, r5
 800a076:	f000 ff1f 	bl	800aeb8 <_realloc_r>
 800a07a:	4606      	mov	r6, r0
 800a07c:	2800      	cmp	r0, #0
 800a07e:	d1e1      	bne.n	800a044 <__ssputs_r+0x70>
 800a080:	4650      	mov	r0, sl
 800a082:	6921      	ldr	r1, [r4, #16]
 800a084:	f7ff feca 	bl	8009e1c <_free_r>
 800a088:	e7c7      	b.n	800a01a <__ssputs_r+0x46>
	...

0800a08c <_svfiprintf_r>:
 800a08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a090:	4698      	mov	r8, r3
 800a092:	898b      	ldrh	r3, [r1, #12]
 800a094:	4607      	mov	r7, r0
 800a096:	061b      	lsls	r3, r3, #24
 800a098:	460d      	mov	r5, r1
 800a09a:	4614      	mov	r4, r2
 800a09c:	b09d      	sub	sp, #116	; 0x74
 800a09e:	d50e      	bpl.n	800a0be <_svfiprintf_r+0x32>
 800a0a0:	690b      	ldr	r3, [r1, #16]
 800a0a2:	b963      	cbnz	r3, 800a0be <_svfiprintf_r+0x32>
 800a0a4:	2140      	movs	r1, #64	; 0x40
 800a0a6:	f7ff ff21 	bl	8009eec <_malloc_r>
 800a0aa:	6028      	str	r0, [r5, #0]
 800a0ac:	6128      	str	r0, [r5, #16]
 800a0ae:	b920      	cbnz	r0, 800a0ba <_svfiprintf_r+0x2e>
 800a0b0:	230c      	movs	r3, #12
 800a0b2:	603b      	str	r3, [r7, #0]
 800a0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b8:	e0d1      	b.n	800a25e <_svfiprintf_r+0x1d2>
 800a0ba:	2340      	movs	r3, #64	; 0x40
 800a0bc:	616b      	str	r3, [r5, #20]
 800a0be:	2300      	movs	r3, #0
 800a0c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a0c2:	2320      	movs	r3, #32
 800a0c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0c8:	2330      	movs	r3, #48	; 0x30
 800a0ca:	f04f 0901 	mov.w	r9, #1
 800a0ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a278 <_svfiprintf_r+0x1ec>
 800a0d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0da:	4623      	mov	r3, r4
 800a0dc:	469a      	mov	sl, r3
 800a0de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0e2:	b10a      	cbz	r2, 800a0e8 <_svfiprintf_r+0x5c>
 800a0e4:	2a25      	cmp	r2, #37	; 0x25
 800a0e6:	d1f9      	bne.n	800a0dc <_svfiprintf_r+0x50>
 800a0e8:	ebba 0b04 	subs.w	fp, sl, r4
 800a0ec:	d00b      	beq.n	800a106 <_svfiprintf_r+0x7a>
 800a0ee:	465b      	mov	r3, fp
 800a0f0:	4622      	mov	r2, r4
 800a0f2:	4629      	mov	r1, r5
 800a0f4:	4638      	mov	r0, r7
 800a0f6:	f7ff ff6d 	bl	8009fd4 <__ssputs_r>
 800a0fa:	3001      	adds	r0, #1
 800a0fc:	f000 80aa 	beq.w	800a254 <_svfiprintf_r+0x1c8>
 800a100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a102:	445a      	add	r2, fp
 800a104:	9209      	str	r2, [sp, #36]	; 0x24
 800a106:	f89a 3000 	ldrb.w	r3, [sl]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	f000 80a2 	beq.w	800a254 <_svfiprintf_r+0x1c8>
 800a110:	2300      	movs	r3, #0
 800a112:	f04f 32ff 	mov.w	r2, #4294967295
 800a116:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a11a:	f10a 0a01 	add.w	sl, sl, #1
 800a11e:	9304      	str	r3, [sp, #16]
 800a120:	9307      	str	r3, [sp, #28]
 800a122:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a126:	931a      	str	r3, [sp, #104]	; 0x68
 800a128:	4654      	mov	r4, sl
 800a12a:	2205      	movs	r2, #5
 800a12c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a130:	4851      	ldr	r0, [pc, #324]	; (800a278 <_svfiprintf_r+0x1ec>)
 800a132:	f000 fe8d 	bl	800ae50 <memchr>
 800a136:	9a04      	ldr	r2, [sp, #16]
 800a138:	b9d8      	cbnz	r0, 800a172 <_svfiprintf_r+0xe6>
 800a13a:	06d0      	lsls	r0, r2, #27
 800a13c:	bf44      	itt	mi
 800a13e:	2320      	movmi	r3, #32
 800a140:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a144:	0711      	lsls	r1, r2, #28
 800a146:	bf44      	itt	mi
 800a148:	232b      	movmi	r3, #43	; 0x2b
 800a14a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a14e:	f89a 3000 	ldrb.w	r3, [sl]
 800a152:	2b2a      	cmp	r3, #42	; 0x2a
 800a154:	d015      	beq.n	800a182 <_svfiprintf_r+0xf6>
 800a156:	4654      	mov	r4, sl
 800a158:	2000      	movs	r0, #0
 800a15a:	f04f 0c0a 	mov.w	ip, #10
 800a15e:	9a07      	ldr	r2, [sp, #28]
 800a160:	4621      	mov	r1, r4
 800a162:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a166:	3b30      	subs	r3, #48	; 0x30
 800a168:	2b09      	cmp	r3, #9
 800a16a:	d94e      	bls.n	800a20a <_svfiprintf_r+0x17e>
 800a16c:	b1b0      	cbz	r0, 800a19c <_svfiprintf_r+0x110>
 800a16e:	9207      	str	r2, [sp, #28]
 800a170:	e014      	b.n	800a19c <_svfiprintf_r+0x110>
 800a172:	eba0 0308 	sub.w	r3, r0, r8
 800a176:	fa09 f303 	lsl.w	r3, r9, r3
 800a17a:	4313      	orrs	r3, r2
 800a17c:	46a2      	mov	sl, r4
 800a17e:	9304      	str	r3, [sp, #16]
 800a180:	e7d2      	b.n	800a128 <_svfiprintf_r+0x9c>
 800a182:	9b03      	ldr	r3, [sp, #12]
 800a184:	1d19      	adds	r1, r3, #4
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	9103      	str	r1, [sp, #12]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	bfbb      	ittet	lt
 800a18e:	425b      	neglt	r3, r3
 800a190:	f042 0202 	orrlt.w	r2, r2, #2
 800a194:	9307      	strge	r3, [sp, #28]
 800a196:	9307      	strlt	r3, [sp, #28]
 800a198:	bfb8      	it	lt
 800a19a:	9204      	strlt	r2, [sp, #16]
 800a19c:	7823      	ldrb	r3, [r4, #0]
 800a19e:	2b2e      	cmp	r3, #46	; 0x2e
 800a1a0:	d10c      	bne.n	800a1bc <_svfiprintf_r+0x130>
 800a1a2:	7863      	ldrb	r3, [r4, #1]
 800a1a4:	2b2a      	cmp	r3, #42	; 0x2a
 800a1a6:	d135      	bne.n	800a214 <_svfiprintf_r+0x188>
 800a1a8:	9b03      	ldr	r3, [sp, #12]
 800a1aa:	3402      	adds	r4, #2
 800a1ac:	1d1a      	adds	r2, r3, #4
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	9203      	str	r2, [sp, #12]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	bfb8      	it	lt
 800a1b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1ba:	9305      	str	r3, [sp, #20]
 800a1bc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a27c <_svfiprintf_r+0x1f0>
 800a1c0:	2203      	movs	r2, #3
 800a1c2:	4650      	mov	r0, sl
 800a1c4:	7821      	ldrb	r1, [r4, #0]
 800a1c6:	f000 fe43 	bl	800ae50 <memchr>
 800a1ca:	b140      	cbz	r0, 800a1de <_svfiprintf_r+0x152>
 800a1cc:	2340      	movs	r3, #64	; 0x40
 800a1ce:	eba0 000a 	sub.w	r0, r0, sl
 800a1d2:	fa03 f000 	lsl.w	r0, r3, r0
 800a1d6:	9b04      	ldr	r3, [sp, #16]
 800a1d8:	3401      	adds	r4, #1
 800a1da:	4303      	orrs	r3, r0
 800a1dc:	9304      	str	r3, [sp, #16]
 800a1de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1e2:	2206      	movs	r2, #6
 800a1e4:	4826      	ldr	r0, [pc, #152]	; (800a280 <_svfiprintf_r+0x1f4>)
 800a1e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1ea:	f000 fe31 	bl	800ae50 <memchr>
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	d038      	beq.n	800a264 <_svfiprintf_r+0x1d8>
 800a1f2:	4b24      	ldr	r3, [pc, #144]	; (800a284 <_svfiprintf_r+0x1f8>)
 800a1f4:	bb1b      	cbnz	r3, 800a23e <_svfiprintf_r+0x1b2>
 800a1f6:	9b03      	ldr	r3, [sp, #12]
 800a1f8:	3307      	adds	r3, #7
 800a1fa:	f023 0307 	bic.w	r3, r3, #7
 800a1fe:	3308      	adds	r3, #8
 800a200:	9303      	str	r3, [sp, #12]
 800a202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a204:	4433      	add	r3, r6
 800a206:	9309      	str	r3, [sp, #36]	; 0x24
 800a208:	e767      	b.n	800a0da <_svfiprintf_r+0x4e>
 800a20a:	460c      	mov	r4, r1
 800a20c:	2001      	movs	r0, #1
 800a20e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a212:	e7a5      	b.n	800a160 <_svfiprintf_r+0xd4>
 800a214:	2300      	movs	r3, #0
 800a216:	f04f 0c0a 	mov.w	ip, #10
 800a21a:	4619      	mov	r1, r3
 800a21c:	3401      	adds	r4, #1
 800a21e:	9305      	str	r3, [sp, #20]
 800a220:	4620      	mov	r0, r4
 800a222:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a226:	3a30      	subs	r2, #48	; 0x30
 800a228:	2a09      	cmp	r2, #9
 800a22a:	d903      	bls.n	800a234 <_svfiprintf_r+0x1a8>
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d0c5      	beq.n	800a1bc <_svfiprintf_r+0x130>
 800a230:	9105      	str	r1, [sp, #20]
 800a232:	e7c3      	b.n	800a1bc <_svfiprintf_r+0x130>
 800a234:	4604      	mov	r4, r0
 800a236:	2301      	movs	r3, #1
 800a238:	fb0c 2101 	mla	r1, ip, r1, r2
 800a23c:	e7f0      	b.n	800a220 <_svfiprintf_r+0x194>
 800a23e:	ab03      	add	r3, sp, #12
 800a240:	9300      	str	r3, [sp, #0]
 800a242:	462a      	mov	r2, r5
 800a244:	4638      	mov	r0, r7
 800a246:	4b10      	ldr	r3, [pc, #64]	; (800a288 <_svfiprintf_r+0x1fc>)
 800a248:	a904      	add	r1, sp, #16
 800a24a:	f3af 8000 	nop.w
 800a24e:	1c42      	adds	r2, r0, #1
 800a250:	4606      	mov	r6, r0
 800a252:	d1d6      	bne.n	800a202 <_svfiprintf_r+0x176>
 800a254:	89ab      	ldrh	r3, [r5, #12]
 800a256:	065b      	lsls	r3, r3, #25
 800a258:	f53f af2c 	bmi.w	800a0b4 <_svfiprintf_r+0x28>
 800a25c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a25e:	b01d      	add	sp, #116	; 0x74
 800a260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a264:	ab03      	add	r3, sp, #12
 800a266:	9300      	str	r3, [sp, #0]
 800a268:	462a      	mov	r2, r5
 800a26a:	4638      	mov	r0, r7
 800a26c:	4b06      	ldr	r3, [pc, #24]	; (800a288 <_svfiprintf_r+0x1fc>)
 800a26e:	a904      	add	r1, sp, #16
 800a270:	f000 f9d4 	bl	800a61c <_printf_i>
 800a274:	e7eb      	b.n	800a24e <_svfiprintf_r+0x1c2>
 800a276:	bf00      	nop
 800a278:	0800b809 	.word	0x0800b809
 800a27c:	0800b80f 	.word	0x0800b80f
 800a280:	0800b813 	.word	0x0800b813
 800a284:	00000000 	.word	0x00000000
 800a288:	08009fd5 	.word	0x08009fd5

0800a28c <__sfputc_r>:
 800a28c:	6893      	ldr	r3, [r2, #8]
 800a28e:	b410      	push	{r4}
 800a290:	3b01      	subs	r3, #1
 800a292:	2b00      	cmp	r3, #0
 800a294:	6093      	str	r3, [r2, #8]
 800a296:	da07      	bge.n	800a2a8 <__sfputc_r+0x1c>
 800a298:	6994      	ldr	r4, [r2, #24]
 800a29a:	42a3      	cmp	r3, r4
 800a29c:	db01      	blt.n	800a2a2 <__sfputc_r+0x16>
 800a29e:	290a      	cmp	r1, #10
 800a2a0:	d102      	bne.n	800a2a8 <__sfputc_r+0x1c>
 800a2a2:	bc10      	pop	{r4}
 800a2a4:	f000 baf0 	b.w	800a888 <__swbuf_r>
 800a2a8:	6813      	ldr	r3, [r2, #0]
 800a2aa:	1c58      	adds	r0, r3, #1
 800a2ac:	6010      	str	r0, [r2, #0]
 800a2ae:	7019      	strb	r1, [r3, #0]
 800a2b0:	4608      	mov	r0, r1
 800a2b2:	bc10      	pop	{r4}
 800a2b4:	4770      	bx	lr

0800a2b6 <__sfputs_r>:
 800a2b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2b8:	4606      	mov	r6, r0
 800a2ba:	460f      	mov	r7, r1
 800a2bc:	4614      	mov	r4, r2
 800a2be:	18d5      	adds	r5, r2, r3
 800a2c0:	42ac      	cmp	r4, r5
 800a2c2:	d101      	bne.n	800a2c8 <__sfputs_r+0x12>
 800a2c4:	2000      	movs	r0, #0
 800a2c6:	e007      	b.n	800a2d8 <__sfputs_r+0x22>
 800a2c8:	463a      	mov	r2, r7
 800a2ca:	4630      	mov	r0, r6
 800a2cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2d0:	f7ff ffdc 	bl	800a28c <__sfputc_r>
 800a2d4:	1c43      	adds	r3, r0, #1
 800a2d6:	d1f3      	bne.n	800a2c0 <__sfputs_r+0xa>
 800a2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a2dc <_vfiprintf_r>:
 800a2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e0:	460d      	mov	r5, r1
 800a2e2:	4614      	mov	r4, r2
 800a2e4:	4698      	mov	r8, r3
 800a2e6:	4606      	mov	r6, r0
 800a2e8:	b09d      	sub	sp, #116	; 0x74
 800a2ea:	b118      	cbz	r0, 800a2f4 <_vfiprintf_r+0x18>
 800a2ec:	6983      	ldr	r3, [r0, #24]
 800a2ee:	b90b      	cbnz	r3, 800a2f4 <_vfiprintf_r+0x18>
 800a2f0:	f000 fca8 	bl	800ac44 <__sinit>
 800a2f4:	4b89      	ldr	r3, [pc, #548]	; (800a51c <_vfiprintf_r+0x240>)
 800a2f6:	429d      	cmp	r5, r3
 800a2f8:	d11b      	bne.n	800a332 <_vfiprintf_r+0x56>
 800a2fa:	6875      	ldr	r5, [r6, #4]
 800a2fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2fe:	07d9      	lsls	r1, r3, #31
 800a300:	d405      	bmi.n	800a30e <_vfiprintf_r+0x32>
 800a302:	89ab      	ldrh	r3, [r5, #12]
 800a304:	059a      	lsls	r2, r3, #22
 800a306:	d402      	bmi.n	800a30e <_vfiprintf_r+0x32>
 800a308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a30a:	f000 fd39 	bl	800ad80 <__retarget_lock_acquire_recursive>
 800a30e:	89ab      	ldrh	r3, [r5, #12]
 800a310:	071b      	lsls	r3, r3, #28
 800a312:	d501      	bpl.n	800a318 <_vfiprintf_r+0x3c>
 800a314:	692b      	ldr	r3, [r5, #16]
 800a316:	b9eb      	cbnz	r3, 800a354 <_vfiprintf_r+0x78>
 800a318:	4629      	mov	r1, r5
 800a31a:	4630      	mov	r0, r6
 800a31c:	f000 fb06 	bl	800a92c <__swsetup_r>
 800a320:	b1c0      	cbz	r0, 800a354 <_vfiprintf_r+0x78>
 800a322:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a324:	07dc      	lsls	r4, r3, #31
 800a326:	d50e      	bpl.n	800a346 <_vfiprintf_r+0x6a>
 800a328:	f04f 30ff 	mov.w	r0, #4294967295
 800a32c:	b01d      	add	sp, #116	; 0x74
 800a32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a332:	4b7b      	ldr	r3, [pc, #492]	; (800a520 <_vfiprintf_r+0x244>)
 800a334:	429d      	cmp	r5, r3
 800a336:	d101      	bne.n	800a33c <_vfiprintf_r+0x60>
 800a338:	68b5      	ldr	r5, [r6, #8]
 800a33a:	e7df      	b.n	800a2fc <_vfiprintf_r+0x20>
 800a33c:	4b79      	ldr	r3, [pc, #484]	; (800a524 <_vfiprintf_r+0x248>)
 800a33e:	429d      	cmp	r5, r3
 800a340:	bf08      	it	eq
 800a342:	68f5      	ldreq	r5, [r6, #12]
 800a344:	e7da      	b.n	800a2fc <_vfiprintf_r+0x20>
 800a346:	89ab      	ldrh	r3, [r5, #12]
 800a348:	0598      	lsls	r0, r3, #22
 800a34a:	d4ed      	bmi.n	800a328 <_vfiprintf_r+0x4c>
 800a34c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a34e:	f000 fd18 	bl	800ad82 <__retarget_lock_release_recursive>
 800a352:	e7e9      	b.n	800a328 <_vfiprintf_r+0x4c>
 800a354:	2300      	movs	r3, #0
 800a356:	9309      	str	r3, [sp, #36]	; 0x24
 800a358:	2320      	movs	r3, #32
 800a35a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a35e:	2330      	movs	r3, #48	; 0x30
 800a360:	f04f 0901 	mov.w	r9, #1
 800a364:	f8cd 800c 	str.w	r8, [sp, #12]
 800a368:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a528 <_vfiprintf_r+0x24c>
 800a36c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a370:	4623      	mov	r3, r4
 800a372:	469a      	mov	sl, r3
 800a374:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a378:	b10a      	cbz	r2, 800a37e <_vfiprintf_r+0xa2>
 800a37a:	2a25      	cmp	r2, #37	; 0x25
 800a37c:	d1f9      	bne.n	800a372 <_vfiprintf_r+0x96>
 800a37e:	ebba 0b04 	subs.w	fp, sl, r4
 800a382:	d00b      	beq.n	800a39c <_vfiprintf_r+0xc0>
 800a384:	465b      	mov	r3, fp
 800a386:	4622      	mov	r2, r4
 800a388:	4629      	mov	r1, r5
 800a38a:	4630      	mov	r0, r6
 800a38c:	f7ff ff93 	bl	800a2b6 <__sfputs_r>
 800a390:	3001      	adds	r0, #1
 800a392:	f000 80aa 	beq.w	800a4ea <_vfiprintf_r+0x20e>
 800a396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a398:	445a      	add	r2, fp
 800a39a:	9209      	str	r2, [sp, #36]	; 0x24
 800a39c:	f89a 3000 	ldrb.w	r3, [sl]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	f000 80a2 	beq.w	800a4ea <_vfiprintf_r+0x20e>
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a3ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3b0:	f10a 0a01 	add.w	sl, sl, #1
 800a3b4:	9304      	str	r3, [sp, #16]
 800a3b6:	9307      	str	r3, [sp, #28]
 800a3b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3bc:	931a      	str	r3, [sp, #104]	; 0x68
 800a3be:	4654      	mov	r4, sl
 800a3c0:	2205      	movs	r2, #5
 800a3c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3c6:	4858      	ldr	r0, [pc, #352]	; (800a528 <_vfiprintf_r+0x24c>)
 800a3c8:	f000 fd42 	bl	800ae50 <memchr>
 800a3cc:	9a04      	ldr	r2, [sp, #16]
 800a3ce:	b9d8      	cbnz	r0, 800a408 <_vfiprintf_r+0x12c>
 800a3d0:	06d1      	lsls	r1, r2, #27
 800a3d2:	bf44      	itt	mi
 800a3d4:	2320      	movmi	r3, #32
 800a3d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3da:	0713      	lsls	r3, r2, #28
 800a3dc:	bf44      	itt	mi
 800a3de:	232b      	movmi	r3, #43	; 0x2b
 800a3e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a3e8:	2b2a      	cmp	r3, #42	; 0x2a
 800a3ea:	d015      	beq.n	800a418 <_vfiprintf_r+0x13c>
 800a3ec:	4654      	mov	r4, sl
 800a3ee:	2000      	movs	r0, #0
 800a3f0:	f04f 0c0a 	mov.w	ip, #10
 800a3f4:	9a07      	ldr	r2, [sp, #28]
 800a3f6:	4621      	mov	r1, r4
 800a3f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3fc:	3b30      	subs	r3, #48	; 0x30
 800a3fe:	2b09      	cmp	r3, #9
 800a400:	d94e      	bls.n	800a4a0 <_vfiprintf_r+0x1c4>
 800a402:	b1b0      	cbz	r0, 800a432 <_vfiprintf_r+0x156>
 800a404:	9207      	str	r2, [sp, #28]
 800a406:	e014      	b.n	800a432 <_vfiprintf_r+0x156>
 800a408:	eba0 0308 	sub.w	r3, r0, r8
 800a40c:	fa09 f303 	lsl.w	r3, r9, r3
 800a410:	4313      	orrs	r3, r2
 800a412:	46a2      	mov	sl, r4
 800a414:	9304      	str	r3, [sp, #16]
 800a416:	e7d2      	b.n	800a3be <_vfiprintf_r+0xe2>
 800a418:	9b03      	ldr	r3, [sp, #12]
 800a41a:	1d19      	adds	r1, r3, #4
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	9103      	str	r1, [sp, #12]
 800a420:	2b00      	cmp	r3, #0
 800a422:	bfbb      	ittet	lt
 800a424:	425b      	neglt	r3, r3
 800a426:	f042 0202 	orrlt.w	r2, r2, #2
 800a42a:	9307      	strge	r3, [sp, #28]
 800a42c:	9307      	strlt	r3, [sp, #28]
 800a42e:	bfb8      	it	lt
 800a430:	9204      	strlt	r2, [sp, #16]
 800a432:	7823      	ldrb	r3, [r4, #0]
 800a434:	2b2e      	cmp	r3, #46	; 0x2e
 800a436:	d10c      	bne.n	800a452 <_vfiprintf_r+0x176>
 800a438:	7863      	ldrb	r3, [r4, #1]
 800a43a:	2b2a      	cmp	r3, #42	; 0x2a
 800a43c:	d135      	bne.n	800a4aa <_vfiprintf_r+0x1ce>
 800a43e:	9b03      	ldr	r3, [sp, #12]
 800a440:	3402      	adds	r4, #2
 800a442:	1d1a      	adds	r2, r3, #4
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	9203      	str	r2, [sp, #12]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	bfb8      	it	lt
 800a44c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a450:	9305      	str	r3, [sp, #20]
 800a452:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a52c <_vfiprintf_r+0x250>
 800a456:	2203      	movs	r2, #3
 800a458:	4650      	mov	r0, sl
 800a45a:	7821      	ldrb	r1, [r4, #0]
 800a45c:	f000 fcf8 	bl	800ae50 <memchr>
 800a460:	b140      	cbz	r0, 800a474 <_vfiprintf_r+0x198>
 800a462:	2340      	movs	r3, #64	; 0x40
 800a464:	eba0 000a 	sub.w	r0, r0, sl
 800a468:	fa03 f000 	lsl.w	r0, r3, r0
 800a46c:	9b04      	ldr	r3, [sp, #16]
 800a46e:	3401      	adds	r4, #1
 800a470:	4303      	orrs	r3, r0
 800a472:	9304      	str	r3, [sp, #16]
 800a474:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a478:	2206      	movs	r2, #6
 800a47a:	482d      	ldr	r0, [pc, #180]	; (800a530 <_vfiprintf_r+0x254>)
 800a47c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a480:	f000 fce6 	bl	800ae50 <memchr>
 800a484:	2800      	cmp	r0, #0
 800a486:	d03f      	beq.n	800a508 <_vfiprintf_r+0x22c>
 800a488:	4b2a      	ldr	r3, [pc, #168]	; (800a534 <_vfiprintf_r+0x258>)
 800a48a:	bb1b      	cbnz	r3, 800a4d4 <_vfiprintf_r+0x1f8>
 800a48c:	9b03      	ldr	r3, [sp, #12]
 800a48e:	3307      	adds	r3, #7
 800a490:	f023 0307 	bic.w	r3, r3, #7
 800a494:	3308      	adds	r3, #8
 800a496:	9303      	str	r3, [sp, #12]
 800a498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a49a:	443b      	add	r3, r7
 800a49c:	9309      	str	r3, [sp, #36]	; 0x24
 800a49e:	e767      	b.n	800a370 <_vfiprintf_r+0x94>
 800a4a0:	460c      	mov	r4, r1
 800a4a2:	2001      	movs	r0, #1
 800a4a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4a8:	e7a5      	b.n	800a3f6 <_vfiprintf_r+0x11a>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	f04f 0c0a 	mov.w	ip, #10
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	3401      	adds	r4, #1
 800a4b4:	9305      	str	r3, [sp, #20]
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4bc:	3a30      	subs	r2, #48	; 0x30
 800a4be:	2a09      	cmp	r2, #9
 800a4c0:	d903      	bls.n	800a4ca <_vfiprintf_r+0x1ee>
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d0c5      	beq.n	800a452 <_vfiprintf_r+0x176>
 800a4c6:	9105      	str	r1, [sp, #20]
 800a4c8:	e7c3      	b.n	800a452 <_vfiprintf_r+0x176>
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4d2:	e7f0      	b.n	800a4b6 <_vfiprintf_r+0x1da>
 800a4d4:	ab03      	add	r3, sp, #12
 800a4d6:	9300      	str	r3, [sp, #0]
 800a4d8:	462a      	mov	r2, r5
 800a4da:	4630      	mov	r0, r6
 800a4dc:	4b16      	ldr	r3, [pc, #88]	; (800a538 <_vfiprintf_r+0x25c>)
 800a4de:	a904      	add	r1, sp, #16
 800a4e0:	f3af 8000 	nop.w
 800a4e4:	4607      	mov	r7, r0
 800a4e6:	1c78      	adds	r0, r7, #1
 800a4e8:	d1d6      	bne.n	800a498 <_vfiprintf_r+0x1bc>
 800a4ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4ec:	07d9      	lsls	r1, r3, #31
 800a4ee:	d405      	bmi.n	800a4fc <_vfiprintf_r+0x220>
 800a4f0:	89ab      	ldrh	r3, [r5, #12]
 800a4f2:	059a      	lsls	r2, r3, #22
 800a4f4:	d402      	bmi.n	800a4fc <_vfiprintf_r+0x220>
 800a4f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4f8:	f000 fc43 	bl	800ad82 <__retarget_lock_release_recursive>
 800a4fc:	89ab      	ldrh	r3, [r5, #12]
 800a4fe:	065b      	lsls	r3, r3, #25
 800a500:	f53f af12 	bmi.w	800a328 <_vfiprintf_r+0x4c>
 800a504:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a506:	e711      	b.n	800a32c <_vfiprintf_r+0x50>
 800a508:	ab03      	add	r3, sp, #12
 800a50a:	9300      	str	r3, [sp, #0]
 800a50c:	462a      	mov	r2, r5
 800a50e:	4630      	mov	r0, r6
 800a510:	4b09      	ldr	r3, [pc, #36]	; (800a538 <_vfiprintf_r+0x25c>)
 800a512:	a904      	add	r1, sp, #16
 800a514:	f000 f882 	bl	800a61c <_printf_i>
 800a518:	e7e4      	b.n	800a4e4 <_vfiprintf_r+0x208>
 800a51a:	bf00      	nop
 800a51c:	0800b85c 	.word	0x0800b85c
 800a520:	0800b87c 	.word	0x0800b87c
 800a524:	0800b83c 	.word	0x0800b83c
 800a528:	0800b809 	.word	0x0800b809
 800a52c:	0800b80f 	.word	0x0800b80f
 800a530:	0800b813 	.word	0x0800b813
 800a534:	00000000 	.word	0x00000000
 800a538:	0800a2b7 	.word	0x0800a2b7

0800a53c <_printf_common>:
 800a53c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a540:	4616      	mov	r6, r2
 800a542:	4699      	mov	r9, r3
 800a544:	688a      	ldr	r2, [r1, #8]
 800a546:	690b      	ldr	r3, [r1, #16]
 800a548:	4607      	mov	r7, r0
 800a54a:	4293      	cmp	r3, r2
 800a54c:	bfb8      	it	lt
 800a54e:	4613      	movlt	r3, r2
 800a550:	6033      	str	r3, [r6, #0]
 800a552:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a556:	460c      	mov	r4, r1
 800a558:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a55c:	b10a      	cbz	r2, 800a562 <_printf_common+0x26>
 800a55e:	3301      	adds	r3, #1
 800a560:	6033      	str	r3, [r6, #0]
 800a562:	6823      	ldr	r3, [r4, #0]
 800a564:	0699      	lsls	r1, r3, #26
 800a566:	bf42      	ittt	mi
 800a568:	6833      	ldrmi	r3, [r6, #0]
 800a56a:	3302      	addmi	r3, #2
 800a56c:	6033      	strmi	r3, [r6, #0]
 800a56e:	6825      	ldr	r5, [r4, #0]
 800a570:	f015 0506 	ands.w	r5, r5, #6
 800a574:	d106      	bne.n	800a584 <_printf_common+0x48>
 800a576:	f104 0a19 	add.w	sl, r4, #25
 800a57a:	68e3      	ldr	r3, [r4, #12]
 800a57c:	6832      	ldr	r2, [r6, #0]
 800a57e:	1a9b      	subs	r3, r3, r2
 800a580:	42ab      	cmp	r3, r5
 800a582:	dc28      	bgt.n	800a5d6 <_printf_common+0x9a>
 800a584:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a588:	1e13      	subs	r3, r2, #0
 800a58a:	6822      	ldr	r2, [r4, #0]
 800a58c:	bf18      	it	ne
 800a58e:	2301      	movne	r3, #1
 800a590:	0692      	lsls	r2, r2, #26
 800a592:	d42d      	bmi.n	800a5f0 <_printf_common+0xb4>
 800a594:	4649      	mov	r1, r9
 800a596:	4638      	mov	r0, r7
 800a598:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a59c:	47c0      	blx	r8
 800a59e:	3001      	adds	r0, #1
 800a5a0:	d020      	beq.n	800a5e4 <_printf_common+0xa8>
 800a5a2:	6823      	ldr	r3, [r4, #0]
 800a5a4:	68e5      	ldr	r5, [r4, #12]
 800a5a6:	f003 0306 	and.w	r3, r3, #6
 800a5aa:	2b04      	cmp	r3, #4
 800a5ac:	bf18      	it	ne
 800a5ae:	2500      	movne	r5, #0
 800a5b0:	6832      	ldr	r2, [r6, #0]
 800a5b2:	f04f 0600 	mov.w	r6, #0
 800a5b6:	68a3      	ldr	r3, [r4, #8]
 800a5b8:	bf08      	it	eq
 800a5ba:	1aad      	subeq	r5, r5, r2
 800a5bc:	6922      	ldr	r2, [r4, #16]
 800a5be:	bf08      	it	eq
 800a5c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	bfc4      	itt	gt
 800a5c8:	1a9b      	subgt	r3, r3, r2
 800a5ca:	18ed      	addgt	r5, r5, r3
 800a5cc:	341a      	adds	r4, #26
 800a5ce:	42b5      	cmp	r5, r6
 800a5d0:	d11a      	bne.n	800a608 <_printf_common+0xcc>
 800a5d2:	2000      	movs	r0, #0
 800a5d4:	e008      	b.n	800a5e8 <_printf_common+0xac>
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	4652      	mov	r2, sl
 800a5da:	4649      	mov	r1, r9
 800a5dc:	4638      	mov	r0, r7
 800a5de:	47c0      	blx	r8
 800a5e0:	3001      	adds	r0, #1
 800a5e2:	d103      	bne.n	800a5ec <_printf_common+0xb0>
 800a5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ec:	3501      	adds	r5, #1
 800a5ee:	e7c4      	b.n	800a57a <_printf_common+0x3e>
 800a5f0:	2030      	movs	r0, #48	; 0x30
 800a5f2:	18e1      	adds	r1, r4, r3
 800a5f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a5f8:	1c5a      	adds	r2, r3, #1
 800a5fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a5fe:	4422      	add	r2, r4
 800a600:	3302      	adds	r3, #2
 800a602:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a606:	e7c5      	b.n	800a594 <_printf_common+0x58>
 800a608:	2301      	movs	r3, #1
 800a60a:	4622      	mov	r2, r4
 800a60c:	4649      	mov	r1, r9
 800a60e:	4638      	mov	r0, r7
 800a610:	47c0      	blx	r8
 800a612:	3001      	adds	r0, #1
 800a614:	d0e6      	beq.n	800a5e4 <_printf_common+0xa8>
 800a616:	3601      	adds	r6, #1
 800a618:	e7d9      	b.n	800a5ce <_printf_common+0x92>
	...

0800a61c <_printf_i>:
 800a61c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a620:	7e0f      	ldrb	r7, [r1, #24]
 800a622:	4691      	mov	r9, r2
 800a624:	2f78      	cmp	r7, #120	; 0x78
 800a626:	4680      	mov	r8, r0
 800a628:	460c      	mov	r4, r1
 800a62a:	469a      	mov	sl, r3
 800a62c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a62e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a632:	d807      	bhi.n	800a644 <_printf_i+0x28>
 800a634:	2f62      	cmp	r7, #98	; 0x62
 800a636:	d80a      	bhi.n	800a64e <_printf_i+0x32>
 800a638:	2f00      	cmp	r7, #0
 800a63a:	f000 80d9 	beq.w	800a7f0 <_printf_i+0x1d4>
 800a63e:	2f58      	cmp	r7, #88	; 0x58
 800a640:	f000 80a4 	beq.w	800a78c <_printf_i+0x170>
 800a644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a648:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a64c:	e03a      	b.n	800a6c4 <_printf_i+0xa8>
 800a64e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a652:	2b15      	cmp	r3, #21
 800a654:	d8f6      	bhi.n	800a644 <_printf_i+0x28>
 800a656:	a101      	add	r1, pc, #4	; (adr r1, 800a65c <_printf_i+0x40>)
 800a658:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a65c:	0800a6b5 	.word	0x0800a6b5
 800a660:	0800a6c9 	.word	0x0800a6c9
 800a664:	0800a645 	.word	0x0800a645
 800a668:	0800a645 	.word	0x0800a645
 800a66c:	0800a645 	.word	0x0800a645
 800a670:	0800a645 	.word	0x0800a645
 800a674:	0800a6c9 	.word	0x0800a6c9
 800a678:	0800a645 	.word	0x0800a645
 800a67c:	0800a645 	.word	0x0800a645
 800a680:	0800a645 	.word	0x0800a645
 800a684:	0800a645 	.word	0x0800a645
 800a688:	0800a7d7 	.word	0x0800a7d7
 800a68c:	0800a6f9 	.word	0x0800a6f9
 800a690:	0800a7b9 	.word	0x0800a7b9
 800a694:	0800a645 	.word	0x0800a645
 800a698:	0800a645 	.word	0x0800a645
 800a69c:	0800a7f9 	.word	0x0800a7f9
 800a6a0:	0800a645 	.word	0x0800a645
 800a6a4:	0800a6f9 	.word	0x0800a6f9
 800a6a8:	0800a645 	.word	0x0800a645
 800a6ac:	0800a645 	.word	0x0800a645
 800a6b0:	0800a7c1 	.word	0x0800a7c1
 800a6b4:	682b      	ldr	r3, [r5, #0]
 800a6b6:	1d1a      	adds	r2, r3, #4
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	602a      	str	r2, [r5, #0]
 800a6bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	e0a4      	b.n	800a812 <_printf_i+0x1f6>
 800a6c8:	6820      	ldr	r0, [r4, #0]
 800a6ca:	6829      	ldr	r1, [r5, #0]
 800a6cc:	0606      	lsls	r6, r0, #24
 800a6ce:	f101 0304 	add.w	r3, r1, #4
 800a6d2:	d50a      	bpl.n	800a6ea <_printf_i+0xce>
 800a6d4:	680e      	ldr	r6, [r1, #0]
 800a6d6:	602b      	str	r3, [r5, #0]
 800a6d8:	2e00      	cmp	r6, #0
 800a6da:	da03      	bge.n	800a6e4 <_printf_i+0xc8>
 800a6dc:	232d      	movs	r3, #45	; 0x2d
 800a6de:	4276      	negs	r6, r6
 800a6e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6e4:	230a      	movs	r3, #10
 800a6e6:	485e      	ldr	r0, [pc, #376]	; (800a860 <_printf_i+0x244>)
 800a6e8:	e019      	b.n	800a71e <_printf_i+0x102>
 800a6ea:	680e      	ldr	r6, [r1, #0]
 800a6ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a6f0:	602b      	str	r3, [r5, #0]
 800a6f2:	bf18      	it	ne
 800a6f4:	b236      	sxthne	r6, r6
 800a6f6:	e7ef      	b.n	800a6d8 <_printf_i+0xbc>
 800a6f8:	682b      	ldr	r3, [r5, #0]
 800a6fa:	6820      	ldr	r0, [r4, #0]
 800a6fc:	1d19      	adds	r1, r3, #4
 800a6fe:	6029      	str	r1, [r5, #0]
 800a700:	0601      	lsls	r1, r0, #24
 800a702:	d501      	bpl.n	800a708 <_printf_i+0xec>
 800a704:	681e      	ldr	r6, [r3, #0]
 800a706:	e002      	b.n	800a70e <_printf_i+0xf2>
 800a708:	0646      	lsls	r6, r0, #25
 800a70a:	d5fb      	bpl.n	800a704 <_printf_i+0xe8>
 800a70c:	881e      	ldrh	r6, [r3, #0]
 800a70e:	2f6f      	cmp	r7, #111	; 0x6f
 800a710:	bf0c      	ite	eq
 800a712:	2308      	moveq	r3, #8
 800a714:	230a      	movne	r3, #10
 800a716:	4852      	ldr	r0, [pc, #328]	; (800a860 <_printf_i+0x244>)
 800a718:	2100      	movs	r1, #0
 800a71a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a71e:	6865      	ldr	r5, [r4, #4]
 800a720:	2d00      	cmp	r5, #0
 800a722:	bfa8      	it	ge
 800a724:	6821      	ldrge	r1, [r4, #0]
 800a726:	60a5      	str	r5, [r4, #8]
 800a728:	bfa4      	itt	ge
 800a72a:	f021 0104 	bicge.w	r1, r1, #4
 800a72e:	6021      	strge	r1, [r4, #0]
 800a730:	b90e      	cbnz	r6, 800a736 <_printf_i+0x11a>
 800a732:	2d00      	cmp	r5, #0
 800a734:	d04d      	beq.n	800a7d2 <_printf_i+0x1b6>
 800a736:	4615      	mov	r5, r2
 800a738:	fbb6 f1f3 	udiv	r1, r6, r3
 800a73c:	fb03 6711 	mls	r7, r3, r1, r6
 800a740:	5dc7      	ldrb	r7, [r0, r7]
 800a742:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a746:	4637      	mov	r7, r6
 800a748:	42bb      	cmp	r3, r7
 800a74a:	460e      	mov	r6, r1
 800a74c:	d9f4      	bls.n	800a738 <_printf_i+0x11c>
 800a74e:	2b08      	cmp	r3, #8
 800a750:	d10b      	bne.n	800a76a <_printf_i+0x14e>
 800a752:	6823      	ldr	r3, [r4, #0]
 800a754:	07de      	lsls	r6, r3, #31
 800a756:	d508      	bpl.n	800a76a <_printf_i+0x14e>
 800a758:	6923      	ldr	r3, [r4, #16]
 800a75a:	6861      	ldr	r1, [r4, #4]
 800a75c:	4299      	cmp	r1, r3
 800a75e:	bfde      	ittt	le
 800a760:	2330      	movle	r3, #48	; 0x30
 800a762:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a766:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a76a:	1b52      	subs	r2, r2, r5
 800a76c:	6122      	str	r2, [r4, #16]
 800a76e:	464b      	mov	r3, r9
 800a770:	4621      	mov	r1, r4
 800a772:	4640      	mov	r0, r8
 800a774:	f8cd a000 	str.w	sl, [sp]
 800a778:	aa03      	add	r2, sp, #12
 800a77a:	f7ff fedf 	bl	800a53c <_printf_common>
 800a77e:	3001      	adds	r0, #1
 800a780:	d14c      	bne.n	800a81c <_printf_i+0x200>
 800a782:	f04f 30ff 	mov.w	r0, #4294967295
 800a786:	b004      	add	sp, #16
 800a788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a78c:	4834      	ldr	r0, [pc, #208]	; (800a860 <_printf_i+0x244>)
 800a78e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a792:	6829      	ldr	r1, [r5, #0]
 800a794:	6823      	ldr	r3, [r4, #0]
 800a796:	f851 6b04 	ldr.w	r6, [r1], #4
 800a79a:	6029      	str	r1, [r5, #0]
 800a79c:	061d      	lsls	r5, r3, #24
 800a79e:	d514      	bpl.n	800a7ca <_printf_i+0x1ae>
 800a7a0:	07df      	lsls	r7, r3, #31
 800a7a2:	bf44      	itt	mi
 800a7a4:	f043 0320 	orrmi.w	r3, r3, #32
 800a7a8:	6023      	strmi	r3, [r4, #0]
 800a7aa:	b91e      	cbnz	r6, 800a7b4 <_printf_i+0x198>
 800a7ac:	6823      	ldr	r3, [r4, #0]
 800a7ae:	f023 0320 	bic.w	r3, r3, #32
 800a7b2:	6023      	str	r3, [r4, #0]
 800a7b4:	2310      	movs	r3, #16
 800a7b6:	e7af      	b.n	800a718 <_printf_i+0xfc>
 800a7b8:	6823      	ldr	r3, [r4, #0]
 800a7ba:	f043 0320 	orr.w	r3, r3, #32
 800a7be:	6023      	str	r3, [r4, #0]
 800a7c0:	2378      	movs	r3, #120	; 0x78
 800a7c2:	4828      	ldr	r0, [pc, #160]	; (800a864 <_printf_i+0x248>)
 800a7c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a7c8:	e7e3      	b.n	800a792 <_printf_i+0x176>
 800a7ca:	0659      	lsls	r1, r3, #25
 800a7cc:	bf48      	it	mi
 800a7ce:	b2b6      	uxthmi	r6, r6
 800a7d0:	e7e6      	b.n	800a7a0 <_printf_i+0x184>
 800a7d2:	4615      	mov	r5, r2
 800a7d4:	e7bb      	b.n	800a74e <_printf_i+0x132>
 800a7d6:	682b      	ldr	r3, [r5, #0]
 800a7d8:	6826      	ldr	r6, [r4, #0]
 800a7da:	1d18      	adds	r0, r3, #4
 800a7dc:	6961      	ldr	r1, [r4, #20]
 800a7de:	6028      	str	r0, [r5, #0]
 800a7e0:	0635      	lsls	r5, r6, #24
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	d501      	bpl.n	800a7ea <_printf_i+0x1ce>
 800a7e6:	6019      	str	r1, [r3, #0]
 800a7e8:	e002      	b.n	800a7f0 <_printf_i+0x1d4>
 800a7ea:	0670      	lsls	r0, r6, #25
 800a7ec:	d5fb      	bpl.n	800a7e6 <_printf_i+0x1ca>
 800a7ee:	8019      	strh	r1, [r3, #0]
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	4615      	mov	r5, r2
 800a7f4:	6123      	str	r3, [r4, #16]
 800a7f6:	e7ba      	b.n	800a76e <_printf_i+0x152>
 800a7f8:	682b      	ldr	r3, [r5, #0]
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	1d1a      	adds	r2, r3, #4
 800a7fe:	602a      	str	r2, [r5, #0]
 800a800:	681d      	ldr	r5, [r3, #0]
 800a802:	6862      	ldr	r2, [r4, #4]
 800a804:	4628      	mov	r0, r5
 800a806:	f000 fb23 	bl	800ae50 <memchr>
 800a80a:	b108      	cbz	r0, 800a810 <_printf_i+0x1f4>
 800a80c:	1b40      	subs	r0, r0, r5
 800a80e:	6060      	str	r0, [r4, #4]
 800a810:	6863      	ldr	r3, [r4, #4]
 800a812:	6123      	str	r3, [r4, #16]
 800a814:	2300      	movs	r3, #0
 800a816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a81a:	e7a8      	b.n	800a76e <_printf_i+0x152>
 800a81c:	462a      	mov	r2, r5
 800a81e:	4649      	mov	r1, r9
 800a820:	4640      	mov	r0, r8
 800a822:	6923      	ldr	r3, [r4, #16]
 800a824:	47d0      	blx	sl
 800a826:	3001      	adds	r0, #1
 800a828:	d0ab      	beq.n	800a782 <_printf_i+0x166>
 800a82a:	6823      	ldr	r3, [r4, #0]
 800a82c:	079b      	lsls	r3, r3, #30
 800a82e:	d413      	bmi.n	800a858 <_printf_i+0x23c>
 800a830:	68e0      	ldr	r0, [r4, #12]
 800a832:	9b03      	ldr	r3, [sp, #12]
 800a834:	4298      	cmp	r0, r3
 800a836:	bfb8      	it	lt
 800a838:	4618      	movlt	r0, r3
 800a83a:	e7a4      	b.n	800a786 <_printf_i+0x16a>
 800a83c:	2301      	movs	r3, #1
 800a83e:	4632      	mov	r2, r6
 800a840:	4649      	mov	r1, r9
 800a842:	4640      	mov	r0, r8
 800a844:	47d0      	blx	sl
 800a846:	3001      	adds	r0, #1
 800a848:	d09b      	beq.n	800a782 <_printf_i+0x166>
 800a84a:	3501      	adds	r5, #1
 800a84c:	68e3      	ldr	r3, [r4, #12]
 800a84e:	9903      	ldr	r1, [sp, #12]
 800a850:	1a5b      	subs	r3, r3, r1
 800a852:	42ab      	cmp	r3, r5
 800a854:	dcf2      	bgt.n	800a83c <_printf_i+0x220>
 800a856:	e7eb      	b.n	800a830 <_printf_i+0x214>
 800a858:	2500      	movs	r5, #0
 800a85a:	f104 0619 	add.w	r6, r4, #25
 800a85e:	e7f5      	b.n	800a84c <_printf_i+0x230>
 800a860:	0800b81a 	.word	0x0800b81a
 800a864:	0800b82b 	.word	0x0800b82b

0800a868 <_sbrk_r>:
 800a868:	b538      	push	{r3, r4, r5, lr}
 800a86a:	2300      	movs	r3, #0
 800a86c:	4d05      	ldr	r5, [pc, #20]	; (800a884 <_sbrk_r+0x1c>)
 800a86e:	4604      	mov	r4, r0
 800a870:	4608      	mov	r0, r1
 800a872:	602b      	str	r3, [r5, #0]
 800a874:	f7f6 fbf2 	bl	800105c <_sbrk>
 800a878:	1c43      	adds	r3, r0, #1
 800a87a:	d102      	bne.n	800a882 <_sbrk_r+0x1a>
 800a87c:	682b      	ldr	r3, [r5, #0]
 800a87e:	b103      	cbz	r3, 800a882 <_sbrk_r+0x1a>
 800a880:	6023      	str	r3, [r4, #0]
 800a882:	bd38      	pop	{r3, r4, r5, pc}
 800a884:	20001ea0 	.word	0x20001ea0

0800a888 <__swbuf_r>:
 800a888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a88a:	460e      	mov	r6, r1
 800a88c:	4614      	mov	r4, r2
 800a88e:	4605      	mov	r5, r0
 800a890:	b118      	cbz	r0, 800a89a <__swbuf_r+0x12>
 800a892:	6983      	ldr	r3, [r0, #24]
 800a894:	b90b      	cbnz	r3, 800a89a <__swbuf_r+0x12>
 800a896:	f000 f9d5 	bl	800ac44 <__sinit>
 800a89a:	4b21      	ldr	r3, [pc, #132]	; (800a920 <__swbuf_r+0x98>)
 800a89c:	429c      	cmp	r4, r3
 800a89e:	d12b      	bne.n	800a8f8 <__swbuf_r+0x70>
 800a8a0:	686c      	ldr	r4, [r5, #4]
 800a8a2:	69a3      	ldr	r3, [r4, #24]
 800a8a4:	60a3      	str	r3, [r4, #8]
 800a8a6:	89a3      	ldrh	r3, [r4, #12]
 800a8a8:	071a      	lsls	r2, r3, #28
 800a8aa:	d52f      	bpl.n	800a90c <__swbuf_r+0x84>
 800a8ac:	6923      	ldr	r3, [r4, #16]
 800a8ae:	b36b      	cbz	r3, 800a90c <__swbuf_r+0x84>
 800a8b0:	6923      	ldr	r3, [r4, #16]
 800a8b2:	6820      	ldr	r0, [r4, #0]
 800a8b4:	b2f6      	uxtb	r6, r6
 800a8b6:	1ac0      	subs	r0, r0, r3
 800a8b8:	6963      	ldr	r3, [r4, #20]
 800a8ba:	4637      	mov	r7, r6
 800a8bc:	4283      	cmp	r3, r0
 800a8be:	dc04      	bgt.n	800a8ca <__swbuf_r+0x42>
 800a8c0:	4621      	mov	r1, r4
 800a8c2:	4628      	mov	r0, r5
 800a8c4:	f000 f92a 	bl	800ab1c <_fflush_r>
 800a8c8:	bb30      	cbnz	r0, 800a918 <__swbuf_r+0x90>
 800a8ca:	68a3      	ldr	r3, [r4, #8]
 800a8cc:	3001      	adds	r0, #1
 800a8ce:	3b01      	subs	r3, #1
 800a8d0:	60a3      	str	r3, [r4, #8]
 800a8d2:	6823      	ldr	r3, [r4, #0]
 800a8d4:	1c5a      	adds	r2, r3, #1
 800a8d6:	6022      	str	r2, [r4, #0]
 800a8d8:	701e      	strb	r6, [r3, #0]
 800a8da:	6963      	ldr	r3, [r4, #20]
 800a8dc:	4283      	cmp	r3, r0
 800a8de:	d004      	beq.n	800a8ea <__swbuf_r+0x62>
 800a8e0:	89a3      	ldrh	r3, [r4, #12]
 800a8e2:	07db      	lsls	r3, r3, #31
 800a8e4:	d506      	bpl.n	800a8f4 <__swbuf_r+0x6c>
 800a8e6:	2e0a      	cmp	r6, #10
 800a8e8:	d104      	bne.n	800a8f4 <__swbuf_r+0x6c>
 800a8ea:	4621      	mov	r1, r4
 800a8ec:	4628      	mov	r0, r5
 800a8ee:	f000 f915 	bl	800ab1c <_fflush_r>
 800a8f2:	b988      	cbnz	r0, 800a918 <__swbuf_r+0x90>
 800a8f4:	4638      	mov	r0, r7
 800a8f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8f8:	4b0a      	ldr	r3, [pc, #40]	; (800a924 <__swbuf_r+0x9c>)
 800a8fa:	429c      	cmp	r4, r3
 800a8fc:	d101      	bne.n	800a902 <__swbuf_r+0x7a>
 800a8fe:	68ac      	ldr	r4, [r5, #8]
 800a900:	e7cf      	b.n	800a8a2 <__swbuf_r+0x1a>
 800a902:	4b09      	ldr	r3, [pc, #36]	; (800a928 <__swbuf_r+0xa0>)
 800a904:	429c      	cmp	r4, r3
 800a906:	bf08      	it	eq
 800a908:	68ec      	ldreq	r4, [r5, #12]
 800a90a:	e7ca      	b.n	800a8a2 <__swbuf_r+0x1a>
 800a90c:	4621      	mov	r1, r4
 800a90e:	4628      	mov	r0, r5
 800a910:	f000 f80c 	bl	800a92c <__swsetup_r>
 800a914:	2800      	cmp	r0, #0
 800a916:	d0cb      	beq.n	800a8b0 <__swbuf_r+0x28>
 800a918:	f04f 37ff 	mov.w	r7, #4294967295
 800a91c:	e7ea      	b.n	800a8f4 <__swbuf_r+0x6c>
 800a91e:	bf00      	nop
 800a920:	0800b85c 	.word	0x0800b85c
 800a924:	0800b87c 	.word	0x0800b87c
 800a928:	0800b83c 	.word	0x0800b83c

0800a92c <__swsetup_r>:
 800a92c:	4b32      	ldr	r3, [pc, #200]	; (800a9f8 <__swsetup_r+0xcc>)
 800a92e:	b570      	push	{r4, r5, r6, lr}
 800a930:	681d      	ldr	r5, [r3, #0]
 800a932:	4606      	mov	r6, r0
 800a934:	460c      	mov	r4, r1
 800a936:	b125      	cbz	r5, 800a942 <__swsetup_r+0x16>
 800a938:	69ab      	ldr	r3, [r5, #24]
 800a93a:	b913      	cbnz	r3, 800a942 <__swsetup_r+0x16>
 800a93c:	4628      	mov	r0, r5
 800a93e:	f000 f981 	bl	800ac44 <__sinit>
 800a942:	4b2e      	ldr	r3, [pc, #184]	; (800a9fc <__swsetup_r+0xd0>)
 800a944:	429c      	cmp	r4, r3
 800a946:	d10f      	bne.n	800a968 <__swsetup_r+0x3c>
 800a948:	686c      	ldr	r4, [r5, #4]
 800a94a:	89a3      	ldrh	r3, [r4, #12]
 800a94c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a950:	0719      	lsls	r1, r3, #28
 800a952:	d42c      	bmi.n	800a9ae <__swsetup_r+0x82>
 800a954:	06dd      	lsls	r5, r3, #27
 800a956:	d411      	bmi.n	800a97c <__swsetup_r+0x50>
 800a958:	2309      	movs	r3, #9
 800a95a:	6033      	str	r3, [r6, #0]
 800a95c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a960:	f04f 30ff 	mov.w	r0, #4294967295
 800a964:	81a3      	strh	r3, [r4, #12]
 800a966:	e03e      	b.n	800a9e6 <__swsetup_r+0xba>
 800a968:	4b25      	ldr	r3, [pc, #148]	; (800aa00 <__swsetup_r+0xd4>)
 800a96a:	429c      	cmp	r4, r3
 800a96c:	d101      	bne.n	800a972 <__swsetup_r+0x46>
 800a96e:	68ac      	ldr	r4, [r5, #8]
 800a970:	e7eb      	b.n	800a94a <__swsetup_r+0x1e>
 800a972:	4b24      	ldr	r3, [pc, #144]	; (800aa04 <__swsetup_r+0xd8>)
 800a974:	429c      	cmp	r4, r3
 800a976:	bf08      	it	eq
 800a978:	68ec      	ldreq	r4, [r5, #12]
 800a97a:	e7e6      	b.n	800a94a <__swsetup_r+0x1e>
 800a97c:	0758      	lsls	r0, r3, #29
 800a97e:	d512      	bpl.n	800a9a6 <__swsetup_r+0x7a>
 800a980:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a982:	b141      	cbz	r1, 800a996 <__swsetup_r+0x6a>
 800a984:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a988:	4299      	cmp	r1, r3
 800a98a:	d002      	beq.n	800a992 <__swsetup_r+0x66>
 800a98c:	4630      	mov	r0, r6
 800a98e:	f7ff fa45 	bl	8009e1c <_free_r>
 800a992:	2300      	movs	r3, #0
 800a994:	6363      	str	r3, [r4, #52]	; 0x34
 800a996:	89a3      	ldrh	r3, [r4, #12]
 800a998:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a99c:	81a3      	strh	r3, [r4, #12]
 800a99e:	2300      	movs	r3, #0
 800a9a0:	6063      	str	r3, [r4, #4]
 800a9a2:	6923      	ldr	r3, [r4, #16]
 800a9a4:	6023      	str	r3, [r4, #0]
 800a9a6:	89a3      	ldrh	r3, [r4, #12]
 800a9a8:	f043 0308 	orr.w	r3, r3, #8
 800a9ac:	81a3      	strh	r3, [r4, #12]
 800a9ae:	6923      	ldr	r3, [r4, #16]
 800a9b0:	b94b      	cbnz	r3, 800a9c6 <__swsetup_r+0x9a>
 800a9b2:	89a3      	ldrh	r3, [r4, #12]
 800a9b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a9b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9bc:	d003      	beq.n	800a9c6 <__swsetup_r+0x9a>
 800a9be:	4621      	mov	r1, r4
 800a9c0:	4630      	mov	r0, r6
 800a9c2:	f000 fa05 	bl	800add0 <__smakebuf_r>
 800a9c6:	89a0      	ldrh	r0, [r4, #12]
 800a9c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9cc:	f010 0301 	ands.w	r3, r0, #1
 800a9d0:	d00a      	beq.n	800a9e8 <__swsetup_r+0xbc>
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	60a3      	str	r3, [r4, #8]
 800a9d6:	6963      	ldr	r3, [r4, #20]
 800a9d8:	425b      	negs	r3, r3
 800a9da:	61a3      	str	r3, [r4, #24]
 800a9dc:	6923      	ldr	r3, [r4, #16]
 800a9de:	b943      	cbnz	r3, 800a9f2 <__swsetup_r+0xc6>
 800a9e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a9e4:	d1ba      	bne.n	800a95c <__swsetup_r+0x30>
 800a9e6:	bd70      	pop	{r4, r5, r6, pc}
 800a9e8:	0781      	lsls	r1, r0, #30
 800a9ea:	bf58      	it	pl
 800a9ec:	6963      	ldrpl	r3, [r4, #20]
 800a9ee:	60a3      	str	r3, [r4, #8]
 800a9f0:	e7f4      	b.n	800a9dc <__swsetup_r+0xb0>
 800a9f2:	2000      	movs	r0, #0
 800a9f4:	e7f7      	b.n	800a9e6 <__swsetup_r+0xba>
 800a9f6:	bf00      	nop
 800a9f8:	200002e0 	.word	0x200002e0
 800a9fc:	0800b85c 	.word	0x0800b85c
 800aa00:	0800b87c 	.word	0x0800b87c
 800aa04:	0800b83c 	.word	0x0800b83c

0800aa08 <abort>:
 800aa08:	2006      	movs	r0, #6
 800aa0a:	b508      	push	{r3, lr}
 800aa0c:	f000 faac 	bl	800af68 <raise>
 800aa10:	2001      	movs	r0, #1
 800aa12:	f7f6 fab0 	bl	8000f76 <_exit>
	...

0800aa18 <__sflush_r>:
 800aa18:	898a      	ldrh	r2, [r1, #12]
 800aa1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa1c:	4605      	mov	r5, r0
 800aa1e:	0710      	lsls	r0, r2, #28
 800aa20:	460c      	mov	r4, r1
 800aa22:	d457      	bmi.n	800aad4 <__sflush_r+0xbc>
 800aa24:	684b      	ldr	r3, [r1, #4]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	dc04      	bgt.n	800aa34 <__sflush_r+0x1c>
 800aa2a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	dc01      	bgt.n	800aa34 <__sflush_r+0x1c>
 800aa30:	2000      	movs	r0, #0
 800aa32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa36:	2e00      	cmp	r6, #0
 800aa38:	d0fa      	beq.n	800aa30 <__sflush_r+0x18>
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa40:	682f      	ldr	r7, [r5, #0]
 800aa42:	602b      	str	r3, [r5, #0]
 800aa44:	d032      	beq.n	800aaac <__sflush_r+0x94>
 800aa46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa48:	89a3      	ldrh	r3, [r4, #12]
 800aa4a:	075a      	lsls	r2, r3, #29
 800aa4c:	d505      	bpl.n	800aa5a <__sflush_r+0x42>
 800aa4e:	6863      	ldr	r3, [r4, #4]
 800aa50:	1ac0      	subs	r0, r0, r3
 800aa52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa54:	b10b      	cbz	r3, 800aa5a <__sflush_r+0x42>
 800aa56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa58:	1ac0      	subs	r0, r0, r3
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	4602      	mov	r2, r0
 800aa5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa60:	4628      	mov	r0, r5
 800aa62:	6a21      	ldr	r1, [r4, #32]
 800aa64:	47b0      	blx	r6
 800aa66:	1c43      	adds	r3, r0, #1
 800aa68:	89a3      	ldrh	r3, [r4, #12]
 800aa6a:	d106      	bne.n	800aa7a <__sflush_r+0x62>
 800aa6c:	6829      	ldr	r1, [r5, #0]
 800aa6e:	291d      	cmp	r1, #29
 800aa70:	d82c      	bhi.n	800aacc <__sflush_r+0xb4>
 800aa72:	4a29      	ldr	r2, [pc, #164]	; (800ab18 <__sflush_r+0x100>)
 800aa74:	40ca      	lsrs	r2, r1
 800aa76:	07d6      	lsls	r6, r2, #31
 800aa78:	d528      	bpl.n	800aacc <__sflush_r+0xb4>
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	6062      	str	r2, [r4, #4]
 800aa7e:	6922      	ldr	r2, [r4, #16]
 800aa80:	04d9      	lsls	r1, r3, #19
 800aa82:	6022      	str	r2, [r4, #0]
 800aa84:	d504      	bpl.n	800aa90 <__sflush_r+0x78>
 800aa86:	1c42      	adds	r2, r0, #1
 800aa88:	d101      	bne.n	800aa8e <__sflush_r+0x76>
 800aa8a:	682b      	ldr	r3, [r5, #0]
 800aa8c:	b903      	cbnz	r3, 800aa90 <__sflush_r+0x78>
 800aa8e:	6560      	str	r0, [r4, #84]	; 0x54
 800aa90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa92:	602f      	str	r7, [r5, #0]
 800aa94:	2900      	cmp	r1, #0
 800aa96:	d0cb      	beq.n	800aa30 <__sflush_r+0x18>
 800aa98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa9c:	4299      	cmp	r1, r3
 800aa9e:	d002      	beq.n	800aaa6 <__sflush_r+0x8e>
 800aaa0:	4628      	mov	r0, r5
 800aaa2:	f7ff f9bb 	bl	8009e1c <_free_r>
 800aaa6:	2000      	movs	r0, #0
 800aaa8:	6360      	str	r0, [r4, #52]	; 0x34
 800aaaa:	e7c2      	b.n	800aa32 <__sflush_r+0x1a>
 800aaac:	6a21      	ldr	r1, [r4, #32]
 800aaae:	2301      	movs	r3, #1
 800aab0:	4628      	mov	r0, r5
 800aab2:	47b0      	blx	r6
 800aab4:	1c41      	adds	r1, r0, #1
 800aab6:	d1c7      	bne.n	800aa48 <__sflush_r+0x30>
 800aab8:	682b      	ldr	r3, [r5, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d0c4      	beq.n	800aa48 <__sflush_r+0x30>
 800aabe:	2b1d      	cmp	r3, #29
 800aac0:	d001      	beq.n	800aac6 <__sflush_r+0xae>
 800aac2:	2b16      	cmp	r3, #22
 800aac4:	d101      	bne.n	800aaca <__sflush_r+0xb2>
 800aac6:	602f      	str	r7, [r5, #0]
 800aac8:	e7b2      	b.n	800aa30 <__sflush_r+0x18>
 800aaca:	89a3      	ldrh	r3, [r4, #12]
 800aacc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aad0:	81a3      	strh	r3, [r4, #12]
 800aad2:	e7ae      	b.n	800aa32 <__sflush_r+0x1a>
 800aad4:	690f      	ldr	r7, [r1, #16]
 800aad6:	2f00      	cmp	r7, #0
 800aad8:	d0aa      	beq.n	800aa30 <__sflush_r+0x18>
 800aada:	0793      	lsls	r3, r2, #30
 800aadc:	bf18      	it	ne
 800aade:	2300      	movne	r3, #0
 800aae0:	680e      	ldr	r6, [r1, #0]
 800aae2:	bf08      	it	eq
 800aae4:	694b      	ldreq	r3, [r1, #20]
 800aae6:	1bf6      	subs	r6, r6, r7
 800aae8:	600f      	str	r7, [r1, #0]
 800aaea:	608b      	str	r3, [r1, #8]
 800aaec:	2e00      	cmp	r6, #0
 800aaee:	dd9f      	ble.n	800aa30 <__sflush_r+0x18>
 800aaf0:	4633      	mov	r3, r6
 800aaf2:	463a      	mov	r2, r7
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	6a21      	ldr	r1, [r4, #32]
 800aaf8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800aafc:	47e0      	blx	ip
 800aafe:	2800      	cmp	r0, #0
 800ab00:	dc06      	bgt.n	800ab10 <__sflush_r+0xf8>
 800ab02:	89a3      	ldrh	r3, [r4, #12]
 800ab04:	f04f 30ff 	mov.w	r0, #4294967295
 800ab08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab0c:	81a3      	strh	r3, [r4, #12]
 800ab0e:	e790      	b.n	800aa32 <__sflush_r+0x1a>
 800ab10:	4407      	add	r7, r0
 800ab12:	1a36      	subs	r6, r6, r0
 800ab14:	e7ea      	b.n	800aaec <__sflush_r+0xd4>
 800ab16:	bf00      	nop
 800ab18:	20400001 	.word	0x20400001

0800ab1c <_fflush_r>:
 800ab1c:	b538      	push	{r3, r4, r5, lr}
 800ab1e:	690b      	ldr	r3, [r1, #16]
 800ab20:	4605      	mov	r5, r0
 800ab22:	460c      	mov	r4, r1
 800ab24:	b913      	cbnz	r3, 800ab2c <_fflush_r+0x10>
 800ab26:	2500      	movs	r5, #0
 800ab28:	4628      	mov	r0, r5
 800ab2a:	bd38      	pop	{r3, r4, r5, pc}
 800ab2c:	b118      	cbz	r0, 800ab36 <_fflush_r+0x1a>
 800ab2e:	6983      	ldr	r3, [r0, #24]
 800ab30:	b90b      	cbnz	r3, 800ab36 <_fflush_r+0x1a>
 800ab32:	f000 f887 	bl	800ac44 <__sinit>
 800ab36:	4b14      	ldr	r3, [pc, #80]	; (800ab88 <_fflush_r+0x6c>)
 800ab38:	429c      	cmp	r4, r3
 800ab3a:	d11b      	bne.n	800ab74 <_fflush_r+0x58>
 800ab3c:	686c      	ldr	r4, [r5, #4]
 800ab3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d0ef      	beq.n	800ab26 <_fflush_r+0xa>
 800ab46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab48:	07d0      	lsls	r0, r2, #31
 800ab4a:	d404      	bmi.n	800ab56 <_fflush_r+0x3a>
 800ab4c:	0599      	lsls	r1, r3, #22
 800ab4e:	d402      	bmi.n	800ab56 <_fflush_r+0x3a>
 800ab50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab52:	f000 f915 	bl	800ad80 <__retarget_lock_acquire_recursive>
 800ab56:	4628      	mov	r0, r5
 800ab58:	4621      	mov	r1, r4
 800ab5a:	f7ff ff5d 	bl	800aa18 <__sflush_r>
 800ab5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab60:	4605      	mov	r5, r0
 800ab62:	07da      	lsls	r2, r3, #31
 800ab64:	d4e0      	bmi.n	800ab28 <_fflush_r+0xc>
 800ab66:	89a3      	ldrh	r3, [r4, #12]
 800ab68:	059b      	lsls	r3, r3, #22
 800ab6a:	d4dd      	bmi.n	800ab28 <_fflush_r+0xc>
 800ab6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab6e:	f000 f908 	bl	800ad82 <__retarget_lock_release_recursive>
 800ab72:	e7d9      	b.n	800ab28 <_fflush_r+0xc>
 800ab74:	4b05      	ldr	r3, [pc, #20]	; (800ab8c <_fflush_r+0x70>)
 800ab76:	429c      	cmp	r4, r3
 800ab78:	d101      	bne.n	800ab7e <_fflush_r+0x62>
 800ab7a:	68ac      	ldr	r4, [r5, #8]
 800ab7c:	e7df      	b.n	800ab3e <_fflush_r+0x22>
 800ab7e:	4b04      	ldr	r3, [pc, #16]	; (800ab90 <_fflush_r+0x74>)
 800ab80:	429c      	cmp	r4, r3
 800ab82:	bf08      	it	eq
 800ab84:	68ec      	ldreq	r4, [r5, #12]
 800ab86:	e7da      	b.n	800ab3e <_fflush_r+0x22>
 800ab88:	0800b85c 	.word	0x0800b85c
 800ab8c:	0800b87c 	.word	0x0800b87c
 800ab90:	0800b83c 	.word	0x0800b83c

0800ab94 <std>:
 800ab94:	2300      	movs	r3, #0
 800ab96:	b510      	push	{r4, lr}
 800ab98:	4604      	mov	r4, r0
 800ab9a:	e9c0 3300 	strd	r3, r3, [r0]
 800ab9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aba2:	6083      	str	r3, [r0, #8]
 800aba4:	8181      	strh	r1, [r0, #12]
 800aba6:	6643      	str	r3, [r0, #100]	; 0x64
 800aba8:	81c2      	strh	r2, [r0, #14]
 800abaa:	6183      	str	r3, [r0, #24]
 800abac:	4619      	mov	r1, r3
 800abae:	2208      	movs	r2, #8
 800abb0:	305c      	adds	r0, #92	; 0x5c
 800abb2:	f7fe ffdd 	bl	8009b70 <memset>
 800abb6:	4b05      	ldr	r3, [pc, #20]	; (800abcc <std+0x38>)
 800abb8:	6224      	str	r4, [r4, #32]
 800abba:	6263      	str	r3, [r4, #36]	; 0x24
 800abbc:	4b04      	ldr	r3, [pc, #16]	; (800abd0 <std+0x3c>)
 800abbe:	62a3      	str	r3, [r4, #40]	; 0x28
 800abc0:	4b04      	ldr	r3, [pc, #16]	; (800abd4 <std+0x40>)
 800abc2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800abc4:	4b04      	ldr	r3, [pc, #16]	; (800abd8 <std+0x44>)
 800abc6:	6323      	str	r3, [r4, #48]	; 0x30
 800abc8:	bd10      	pop	{r4, pc}
 800abca:	bf00      	nop
 800abcc:	0800afa1 	.word	0x0800afa1
 800abd0:	0800afc3 	.word	0x0800afc3
 800abd4:	0800affb 	.word	0x0800affb
 800abd8:	0800b01f 	.word	0x0800b01f

0800abdc <_cleanup_r>:
 800abdc:	4901      	ldr	r1, [pc, #4]	; (800abe4 <_cleanup_r+0x8>)
 800abde:	f000 b8af 	b.w	800ad40 <_fwalk_reent>
 800abe2:	bf00      	nop
 800abe4:	0800ab1d 	.word	0x0800ab1d

0800abe8 <__sfmoreglue>:
 800abe8:	2268      	movs	r2, #104	; 0x68
 800abea:	b570      	push	{r4, r5, r6, lr}
 800abec:	1e4d      	subs	r5, r1, #1
 800abee:	4355      	muls	r5, r2
 800abf0:	460e      	mov	r6, r1
 800abf2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800abf6:	f7ff f979 	bl	8009eec <_malloc_r>
 800abfa:	4604      	mov	r4, r0
 800abfc:	b140      	cbz	r0, 800ac10 <__sfmoreglue+0x28>
 800abfe:	2100      	movs	r1, #0
 800ac00:	e9c0 1600 	strd	r1, r6, [r0]
 800ac04:	300c      	adds	r0, #12
 800ac06:	60a0      	str	r0, [r4, #8]
 800ac08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac0c:	f7fe ffb0 	bl	8009b70 <memset>
 800ac10:	4620      	mov	r0, r4
 800ac12:	bd70      	pop	{r4, r5, r6, pc}

0800ac14 <__sfp_lock_acquire>:
 800ac14:	4801      	ldr	r0, [pc, #4]	; (800ac1c <__sfp_lock_acquire+0x8>)
 800ac16:	f000 b8b3 	b.w	800ad80 <__retarget_lock_acquire_recursive>
 800ac1a:	bf00      	nop
 800ac1c:	20001e9d 	.word	0x20001e9d

0800ac20 <__sfp_lock_release>:
 800ac20:	4801      	ldr	r0, [pc, #4]	; (800ac28 <__sfp_lock_release+0x8>)
 800ac22:	f000 b8ae 	b.w	800ad82 <__retarget_lock_release_recursive>
 800ac26:	bf00      	nop
 800ac28:	20001e9d 	.word	0x20001e9d

0800ac2c <__sinit_lock_acquire>:
 800ac2c:	4801      	ldr	r0, [pc, #4]	; (800ac34 <__sinit_lock_acquire+0x8>)
 800ac2e:	f000 b8a7 	b.w	800ad80 <__retarget_lock_acquire_recursive>
 800ac32:	bf00      	nop
 800ac34:	20001e9e 	.word	0x20001e9e

0800ac38 <__sinit_lock_release>:
 800ac38:	4801      	ldr	r0, [pc, #4]	; (800ac40 <__sinit_lock_release+0x8>)
 800ac3a:	f000 b8a2 	b.w	800ad82 <__retarget_lock_release_recursive>
 800ac3e:	bf00      	nop
 800ac40:	20001e9e 	.word	0x20001e9e

0800ac44 <__sinit>:
 800ac44:	b510      	push	{r4, lr}
 800ac46:	4604      	mov	r4, r0
 800ac48:	f7ff fff0 	bl	800ac2c <__sinit_lock_acquire>
 800ac4c:	69a3      	ldr	r3, [r4, #24]
 800ac4e:	b11b      	cbz	r3, 800ac58 <__sinit+0x14>
 800ac50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac54:	f7ff bff0 	b.w	800ac38 <__sinit_lock_release>
 800ac58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac5c:	6523      	str	r3, [r4, #80]	; 0x50
 800ac5e:	4b13      	ldr	r3, [pc, #76]	; (800acac <__sinit+0x68>)
 800ac60:	4a13      	ldr	r2, [pc, #76]	; (800acb0 <__sinit+0x6c>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac66:	42a3      	cmp	r3, r4
 800ac68:	bf08      	it	eq
 800ac6a:	2301      	moveq	r3, #1
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	bf08      	it	eq
 800ac70:	61a3      	streq	r3, [r4, #24]
 800ac72:	f000 f81f 	bl	800acb4 <__sfp>
 800ac76:	6060      	str	r0, [r4, #4]
 800ac78:	4620      	mov	r0, r4
 800ac7a:	f000 f81b 	bl	800acb4 <__sfp>
 800ac7e:	60a0      	str	r0, [r4, #8]
 800ac80:	4620      	mov	r0, r4
 800ac82:	f000 f817 	bl	800acb4 <__sfp>
 800ac86:	2200      	movs	r2, #0
 800ac88:	2104      	movs	r1, #4
 800ac8a:	60e0      	str	r0, [r4, #12]
 800ac8c:	6860      	ldr	r0, [r4, #4]
 800ac8e:	f7ff ff81 	bl	800ab94 <std>
 800ac92:	2201      	movs	r2, #1
 800ac94:	2109      	movs	r1, #9
 800ac96:	68a0      	ldr	r0, [r4, #8]
 800ac98:	f7ff ff7c 	bl	800ab94 <std>
 800ac9c:	2202      	movs	r2, #2
 800ac9e:	2112      	movs	r1, #18
 800aca0:	68e0      	ldr	r0, [r4, #12]
 800aca2:	f7ff ff77 	bl	800ab94 <std>
 800aca6:	2301      	movs	r3, #1
 800aca8:	61a3      	str	r3, [r4, #24]
 800acaa:	e7d1      	b.n	800ac50 <__sinit+0xc>
 800acac:	0800b654 	.word	0x0800b654
 800acb0:	0800abdd 	.word	0x0800abdd

0800acb4 <__sfp>:
 800acb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acb6:	4607      	mov	r7, r0
 800acb8:	f7ff ffac 	bl	800ac14 <__sfp_lock_acquire>
 800acbc:	4b1e      	ldr	r3, [pc, #120]	; (800ad38 <__sfp+0x84>)
 800acbe:	681e      	ldr	r6, [r3, #0]
 800acc0:	69b3      	ldr	r3, [r6, #24]
 800acc2:	b913      	cbnz	r3, 800acca <__sfp+0x16>
 800acc4:	4630      	mov	r0, r6
 800acc6:	f7ff ffbd 	bl	800ac44 <__sinit>
 800acca:	3648      	adds	r6, #72	; 0x48
 800accc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800acd0:	3b01      	subs	r3, #1
 800acd2:	d503      	bpl.n	800acdc <__sfp+0x28>
 800acd4:	6833      	ldr	r3, [r6, #0]
 800acd6:	b30b      	cbz	r3, 800ad1c <__sfp+0x68>
 800acd8:	6836      	ldr	r6, [r6, #0]
 800acda:	e7f7      	b.n	800accc <__sfp+0x18>
 800acdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ace0:	b9d5      	cbnz	r5, 800ad18 <__sfp+0x64>
 800ace2:	4b16      	ldr	r3, [pc, #88]	; (800ad3c <__sfp+0x88>)
 800ace4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ace8:	60e3      	str	r3, [r4, #12]
 800acea:	6665      	str	r5, [r4, #100]	; 0x64
 800acec:	f000 f847 	bl	800ad7e <__retarget_lock_init_recursive>
 800acf0:	f7ff ff96 	bl	800ac20 <__sfp_lock_release>
 800acf4:	2208      	movs	r2, #8
 800acf6:	4629      	mov	r1, r5
 800acf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800acfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad00:	6025      	str	r5, [r4, #0]
 800ad02:	61a5      	str	r5, [r4, #24]
 800ad04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad08:	f7fe ff32 	bl	8009b70 <memset>
 800ad0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad14:	4620      	mov	r0, r4
 800ad16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad18:	3468      	adds	r4, #104	; 0x68
 800ad1a:	e7d9      	b.n	800acd0 <__sfp+0x1c>
 800ad1c:	2104      	movs	r1, #4
 800ad1e:	4638      	mov	r0, r7
 800ad20:	f7ff ff62 	bl	800abe8 <__sfmoreglue>
 800ad24:	4604      	mov	r4, r0
 800ad26:	6030      	str	r0, [r6, #0]
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	d1d5      	bne.n	800acd8 <__sfp+0x24>
 800ad2c:	f7ff ff78 	bl	800ac20 <__sfp_lock_release>
 800ad30:	230c      	movs	r3, #12
 800ad32:	603b      	str	r3, [r7, #0]
 800ad34:	e7ee      	b.n	800ad14 <__sfp+0x60>
 800ad36:	bf00      	nop
 800ad38:	0800b654 	.word	0x0800b654
 800ad3c:	ffff0001 	.word	0xffff0001

0800ad40 <_fwalk_reent>:
 800ad40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad44:	4606      	mov	r6, r0
 800ad46:	4688      	mov	r8, r1
 800ad48:	2700      	movs	r7, #0
 800ad4a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ad4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad52:	f1b9 0901 	subs.w	r9, r9, #1
 800ad56:	d505      	bpl.n	800ad64 <_fwalk_reent+0x24>
 800ad58:	6824      	ldr	r4, [r4, #0]
 800ad5a:	2c00      	cmp	r4, #0
 800ad5c:	d1f7      	bne.n	800ad4e <_fwalk_reent+0xe>
 800ad5e:	4638      	mov	r0, r7
 800ad60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad64:	89ab      	ldrh	r3, [r5, #12]
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d907      	bls.n	800ad7a <_fwalk_reent+0x3a>
 800ad6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad6e:	3301      	adds	r3, #1
 800ad70:	d003      	beq.n	800ad7a <_fwalk_reent+0x3a>
 800ad72:	4629      	mov	r1, r5
 800ad74:	4630      	mov	r0, r6
 800ad76:	47c0      	blx	r8
 800ad78:	4307      	orrs	r7, r0
 800ad7a:	3568      	adds	r5, #104	; 0x68
 800ad7c:	e7e9      	b.n	800ad52 <_fwalk_reent+0x12>

0800ad7e <__retarget_lock_init_recursive>:
 800ad7e:	4770      	bx	lr

0800ad80 <__retarget_lock_acquire_recursive>:
 800ad80:	4770      	bx	lr

0800ad82 <__retarget_lock_release_recursive>:
 800ad82:	4770      	bx	lr

0800ad84 <__swhatbuf_r>:
 800ad84:	b570      	push	{r4, r5, r6, lr}
 800ad86:	460e      	mov	r6, r1
 800ad88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad8c:	4614      	mov	r4, r2
 800ad8e:	2900      	cmp	r1, #0
 800ad90:	461d      	mov	r5, r3
 800ad92:	b096      	sub	sp, #88	; 0x58
 800ad94:	da08      	bge.n	800ada8 <__swhatbuf_r+0x24>
 800ad96:	2200      	movs	r2, #0
 800ad98:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ad9c:	602a      	str	r2, [r5, #0]
 800ad9e:	061a      	lsls	r2, r3, #24
 800ada0:	d410      	bmi.n	800adc4 <__swhatbuf_r+0x40>
 800ada2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ada6:	e00e      	b.n	800adc6 <__swhatbuf_r+0x42>
 800ada8:	466a      	mov	r2, sp
 800adaa:	f000 f95f 	bl	800b06c <_fstat_r>
 800adae:	2800      	cmp	r0, #0
 800adb0:	dbf1      	blt.n	800ad96 <__swhatbuf_r+0x12>
 800adb2:	9a01      	ldr	r2, [sp, #4]
 800adb4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800adb8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800adbc:	425a      	negs	r2, r3
 800adbe:	415a      	adcs	r2, r3
 800adc0:	602a      	str	r2, [r5, #0]
 800adc2:	e7ee      	b.n	800ada2 <__swhatbuf_r+0x1e>
 800adc4:	2340      	movs	r3, #64	; 0x40
 800adc6:	2000      	movs	r0, #0
 800adc8:	6023      	str	r3, [r4, #0]
 800adca:	b016      	add	sp, #88	; 0x58
 800adcc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800add0 <__smakebuf_r>:
 800add0:	898b      	ldrh	r3, [r1, #12]
 800add2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800add4:	079d      	lsls	r5, r3, #30
 800add6:	4606      	mov	r6, r0
 800add8:	460c      	mov	r4, r1
 800adda:	d507      	bpl.n	800adec <__smakebuf_r+0x1c>
 800addc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ade0:	6023      	str	r3, [r4, #0]
 800ade2:	6123      	str	r3, [r4, #16]
 800ade4:	2301      	movs	r3, #1
 800ade6:	6163      	str	r3, [r4, #20]
 800ade8:	b002      	add	sp, #8
 800adea:	bd70      	pop	{r4, r5, r6, pc}
 800adec:	466a      	mov	r2, sp
 800adee:	ab01      	add	r3, sp, #4
 800adf0:	f7ff ffc8 	bl	800ad84 <__swhatbuf_r>
 800adf4:	9900      	ldr	r1, [sp, #0]
 800adf6:	4605      	mov	r5, r0
 800adf8:	4630      	mov	r0, r6
 800adfa:	f7ff f877 	bl	8009eec <_malloc_r>
 800adfe:	b948      	cbnz	r0, 800ae14 <__smakebuf_r+0x44>
 800ae00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae04:	059a      	lsls	r2, r3, #22
 800ae06:	d4ef      	bmi.n	800ade8 <__smakebuf_r+0x18>
 800ae08:	f023 0303 	bic.w	r3, r3, #3
 800ae0c:	f043 0302 	orr.w	r3, r3, #2
 800ae10:	81a3      	strh	r3, [r4, #12]
 800ae12:	e7e3      	b.n	800addc <__smakebuf_r+0xc>
 800ae14:	4b0d      	ldr	r3, [pc, #52]	; (800ae4c <__smakebuf_r+0x7c>)
 800ae16:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae18:	89a3      	ldrh	r3, [r4, #12]
 800ae1a:	6020      	str	r0, [r4, #0]
 800ae1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae20:	81a3      	strh	r3, [r4, #12]
 800ae22:	9b00      	ldr	r3, [sp, #0]
 800ae24:	6120      	str	r0, [r4, #16]
 800ae26:	6163      	str	r3, [r4, #20]
 800ae28:	9b01      	ldr	r3, [sp, #4]
 800ae2a:	b15b      	cbz	r3, 800ae44 <__smakebuf_r+0x74>
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae32:	f000 f92d 	bl	800b090 <_isatty_r>
 800ae36:	b128      	cbz	r0, 800ae44 <__smakebuf_r+0x74>
 800ae38:	89a3      	ldrh	r3, [r4, #12]
 800ae3a:	f023 0303 	bic.w	r3, r3, #3
 800ae3e:	f043 0301 	orr.w	r3, r3, #1
 800ae42:	81a3      	strh	r3, [r4, #12]
 800ae44:	89a0      	ldrh	r0, [r4, #12]
 800ae46:	4305      	orrs	r5, r0
 800ae48:	81a5      	strh	r5, [r4, #12]
 800ae4a:	e7cd      	b.n	800ade8 <__smakebuf_r+0x18>
 800ae4c:	0800abdd 	.word	0x0800abdd

0800ae50 <memchr>:
 800ae50:	4603      	mov	r3, r0
 800ae52:	b510      	push	{r4, lr}
 800ae54:	b2c9      	uxtb	r1, r1
 800ae56:	4402      	add	r2, r0
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	d101      	bne.n	800ae62 <memchr+0x12>
 800ae5e:	2000      	movs	r0, #0
 800ae60:	e003      	b.n	800ae6a <memchr+0x1a>
 800ae62:	7804      	ldrb	r4, [r0, #0]
 800ae64:	3301      	adds	r3, #1
 800ae66:	428c      	cmp	r4, r1
 800ae68:	d1f6      	bne.n	800ae58 <memchr+0x8>
 800ae6a:	bd10      	pop	{r4, pc}

0800ae6c <memmove>:
 800ae6c:	4288      	cmp	r0, r1
 800ae6e:	b510      	push	{r4, lr}
 800ae70:	eb01 0402 	add.w	r4, r1, r2
 800ae74:	d902      	bls.n	800ae7c <memmove+0x10>
 800ae76:	4284      	cmp	r4, r0
 800ae78:	4623      	mov	r3, r4
 800ae7a:	d807      	bhi.n	800ae8c <memmove+0x20>
 800ae7c:	1e43      	subs	r3, r0, #1
 800ae7e:	42a1      	cmp	r1, r4
 800ae80:	d008      	beq.n	800ae94 <memmove+0x28>
 800ae82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae86:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae8a:	e7f8      	b.n	800ae7e <memmove+0x12>
 800ae8c:	4601      	mov	r1, r0
 800ae8e:	4402      	add	r2, r0
 800ae90:	428a      	cmp	r2, r1
 800ae92:	d100      	bne.n	800ae96 <memmove+0x2a>
 800ae94:	bd10      	pop	{r4, pc}
 800ae96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae9e:	e7f7      	b.n	800ae90 <memmove+0x24>

0800aea0 <__malloc_lock>:
 800aea0:	4801      	ldr	r0, [pc, #4]	; (800aea8 <__malloc_lock+0x8>)
 800aea2:	f7ff bf6d 	b.w	800ad80 <__retarget_lock_acquire_recursive>
 800aea6:	bf00      	nop
 800aea8:	20001e9c 	.word	0x20001e9c

0800aeac <__malloc_unlock>:
 800aeac:	4801      	ldr	r0, [pc, #4]	; (800aeb4 <__malloc_unlock+0x8>)
 800aeae:	f7ff bf68 	b.w	800ad82 <__retarget_lock_release_recursive>
 800aeb2:	bf00      	nop
 800aeb4:	20001e9c 	.word	0x20001e9c

0800aeb8 <_realloc_r>:
 800aeb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aebc:	4680      	mov	r8, r0
 800aebe:	4614      	mov	r4, r2
 800aec0:	460e      	mov	r6, r1
 800aec2:	b921      	cbnz	r1, 800aece <_realloc_r+0x16>
 800aec4:	4611      	mov	r1, r2
 800aec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aeca:	f7ff b80f 	b.w	8009eec <_malloc_r>
 800aece:	b92a      	cbnz	r2, 800aedc <_realloc_r+0x24>
 800aed0:	f7fe ffa4 	bl	8009e1c <_free_r>
 800aed4:	4625      	mov	r5, r4
 800aed6:	4628      	mov	r0, r5
 800aed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aedc:	f000 f8fa 	bl	800b0d4 <_malloc_usable_size_r>
 800aee0:	4284      	cmp	r4, r0
 800aee2:	4607      	mov	r7, r0
 800aee4:	d802      	bhi.n	800aeec <_realloc_r+0x34>
 800aee6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aeea:	d812      	bhi.n	800af12 <_realloc_r+0x5a>
 800aeec:	4621      	mov	r1, r4
 800aeee:	4640      	mov	r0, r8
 800aef0:	f7fe fffc 	bl	8009eec <_malloc_r>
 800aef4:	4605      	mov	r5, r0
 800aef6:	2800      	cmp	r0, #0
 800aef8:	d0ed      	beq.n	800aed6 <_realloc_r+0x1e>
 800aefa:	42bc      	cmp	r4, r7
 800aefc:	4622      	mov	r2, r4
 800aefe:	4631      	mov	r1, r6
 800af00:	bf28      	it	cs
 800af02:	463a      	movcs	r2, r7
 800af04:	f7fe fe26 	bl	8009b54 <memcpy>
 800af08:	4631      	mov	r1, r6
 800af0a:	4640      	mov	r0, r8
 800af0c:	f7fe ff86 	bl	8009e1c <_free_r>
 800af10:	e7e1      	b.n	800aed6 <_realloc_r+0x1e>
 800af12:	4635      	mov	r5, r6
 800af14:	e7df      	b.n	800aed6 <_realloc_r+0x1e>

0800af16 <_raise_r>:
 800af16:	291f      	cmp	r1, #31
 800af18:	b538      	push	{r3, r4, r5, lr}
 800af1a:	4604      	mov	r4, r0
 800af1c:	460d      	mov	r5, r1
 800af1e:	d904      	bls.n	800af2a <_raise_r+0x14>
 800af20:	2316      	movs	r3, #22
 800af22:	6003      	str	r3, [r0, #0]
 800af24:	f04f 30ff 	mov.w	r0, #4294967295
 800af28:	bd38      	pop	{r3, r4, r5, pc}
 800af2a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af2c:	b112      	cbz	r2, 800af34 <_raise_r+0x1e>
 800af2e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af32:	b94b      	cbnz	r3, 800af48 <_raise_r+0x32>
 800af34:	4620      	mov	r0, r4
 800af36:	f000 f831 	bl	800af9c <_getpid_r>
 800af3a:	462a      	mov	r2, r5
 800af3c:	4601      	mov	r1, r0
 800af3e:	4620      	mov	r0, r4
 800af40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af44:	f000 b818 	b.w	800af78 <_kill_r>
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d00a      	beq.n	800af62 <_raise_r+0x4c>
 800af4c:	1c59      	adds	r1, r3, #1
 800af4e:	d103      	bne.n	800af58 <_raise_r+0x42>
 800af50:	2316      	movs	r3, #22
 800af52:	6003      	str	r3, [r0, #0]
 800af54:	2001      	movs	r0, #1
 800af56:	e7e7      	b.n	800af28 <_raise_r+0x12>
 800af58:	2400      	movs	r4, #0
 800af5a:	4628      	mov	r0, r5
 800af5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af60:	4798      	blx	r3
 800af62:	2000      	movs	r0, #0
 800af64:	e7e0      	b.n	800af28 <_raise_r+0x12>
	...

0800af68 <raise>:
 800af68:	4b02      	ldr	r3, [pc, #8]	; (800af74 <raise+0xc>)
 800af6a:	4601      	mov	r1, r0
 800af6c:	6818      	ldr	r0, [r3, #0]
 800af6e:	f7ff bfd2 	b.w	800af16 <_raise_r>
 800af72:	bf00      	nop
 800af74:	200002e0 	.word	0x200002e0

0800af78 <_kill_r>:
 800af78:	b538      	push	{r3, r4, r5, lr}
 800af7a:	2300      	movs	r3, #0
 800af7c:	4d06      	ldr	r5, [pc, #24]	; (800af98 <_kill_r+0x20>)
 800af7e:	4604      	mov	r4, r0
 800af80:	4608      	mov	r0, r1
 800af82:	4611      	mov	r1, r2
 800af84:	602b      	str	r3, [r5, #0]
 800af86:	f7f5 ffe6 	bl	8000f56 <_kill>
 800af8a:	1c43      	adds	r3, r0, #1
 800af8c:	d102      	bne.n	800af94 <_kill_r+0x1c>
 800af8e:	682b      	ldr	r3, [r5, #0]
 800af90:	b103      	cbz	r3, 800af94 <_kill_r+0x1c>
 800af92:	6023      	str	r3, [r4, #0]
 800af94:	bd38      	pop	{r3, r4, r5, pc}
 800af96:	bf00      	nop
 800af98:	20001ea0 	.word	0x20001ea0

0800af9c <_getpid_r>:
 800af9c:	f7f5 bfd4 	b.w	8000f48 <_getpid>

0800afa0 <__sread>:
 800afa0:	b510      	push	{r4, lr}
 800afa2:	460c      	mov	r4, r1
 800afa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afa8:	f000 f89c 	bl	800b0e4 <_read_r>
 800afac:	2800      	cmp	r0, #0
 800afae:	bfab      	itete	ge
 800afb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800afb2:	89a3      	ldrhlt	r3, [r4, #12]
 800afb4:	181b      	addge	r3, r3, r0
 800afb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800afba:	bfac      	ite	ge
 800afbc:	6563      	strge	r3, [r4, #84]	; 0x54
 800afbe:	81a3      	strhlt	r3, [r4, #12]
 800afc0:	bd10      	pop	{r4, pc}

0800afc2 <__swrite>:
 800afc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afc6:	461f      	mov	r7, r3
 800afc8:	898b      	ldrh	r3, [r1, #12]
 800afca:	4605      	mov	r5, r0
 800afcc:	05db      	lsls	r3, r3, #23
 800afce:	460c      	mov	r4, r1
 800afd0:	4616      	mov	r6, r2
 800afd2:	d505      	bpl.n	800afe0 <__swrite+0x1e>
 800afd4:	2302      	movs	r3, #2
 800afd6:	2200      	movs	r2, #0
 800afd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afdc:	f000 f868 	bl	800b0b0 <_lseek_r>
 800afe0:	89a3      	ldrh	r3, [r4, #12]
 800afe2:	4632      	mov	r2, r6
 800afe4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800afe8:	81a3      	strh	r3, [r4, #12]
 800afea:	4628      	mov	r0, r5
 800afec:	463b      	mov	r3, r7
 800afee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aff6:	f000 b817 	b.w	800b028 <_write_r>

0800affa <__sseek>:
 800affa:	b510      	push	{r4, lr}
 800affc:	460c      	mov	r4, r1
 800affe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b002:	f000 f855 	bl	800b0b0 <_lseek_r>
 800b006:	1c43      	adds	r3, r0, #1
 800b008:	89a3      	ldrh	r3, [r4, #12]
 800b00a:	bf15      	itete	ne
 800b00c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b00e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b012:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b016:	81a3      	strheq	r3, [r4, #12]
 800b018:	bf18      	it	ne
 800b01a:	81a3      	strhne	r3, [r4, #12]
 800b01c:	bd10      	pop	{r4, pc}

0800b01e <__sclose>:
 800b01e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b022:	f000 b813 	b.w	800b04c <_close_r>
	...

0800b028 <_write_r>:
 800b028:	b538      	push	{r3, r4, r5, lr}
 800b02a:	4604      	mov	r4, r0
 800b02c:	4608      	mov	r0, r1
 800b02e:	4611      	mov	r1, r2
 800b030:	2200      	movs	r2, #0
 800b032:	4d05      	ldr	r5, [pc, #20]	; (800b048 <_write_r+0x20>)
 800b034:	602a      	str	r2, [r5, #0]
 800b036:	461a      	mov	r2, r3
 800b038:	f7f5 ffc4 	bl	8000fc4 <_write>
 800b03c:	1c43      	adds	r3, r0, #1
 800b03e:	d102      	bne.n	800b046 <_write_r+0x1e>
 800b040:	682b      	ldr	r3, [r5, #0]
 800b042:	b103      	cbz	r3, 800b046 <_write_r+0x1e>
 800b044:	6023      	str	r3, [r4, #0]
 800b046:	bd38      	pop	{r3, r4, r5, pc}
 800b048:	20001ea0 	.word	0x20001ea0

0800b04c <_close_r>:
 800b04c:	b538      	push	{r3, r4, r5, lr}
 800b04e:	2300      	movs	r3, #0
 800b050:	4d05      	ldr	r5, [pc, #20]	; (800b068 <_close_r+0x1c>)
 800b052:	4604      	mov	r4, r0
 800b054:	4608      	mov	r0, r1
 800b056:	602b      	str	r3, [r5, #0]
 800b058:	f7f5 ffd0 	bl	8000ffc <_close>
 800b05c:	1c43      	adds	r3, r0, #1
 800b05e:	d102      	bne.n	800b066 <_close_r+0x1a>
 800b060:	682b      	ldr	r3, [r5, #0]
 800b062:	b103      	cbz	r3, 800b066 <_close_r+0x1a>
 800b064:	6023      	str	r3, [r4, #0]
 800b066:	bd38      	pop	{r3, r4, r5, pc}
 800b068:	20001ea0 	.word	0x20001ea0

0800b06c <_fstat_r>:
 800b06c:	b538      	push	{r3, r4, r5, lr}
 800b06e:	2300      	movs	r3, #0
 800b070:	4d06      	ldr	r5, [pc, #24]	; (800b08c <_fstat_r+0x20>)
 800b072:	4604      	mov	r4, r0
 800b074:	4608      	mov	r0, r1
 800b076:	4611      	mov	r1, r2
 800b078:	602b      	str	r3, [r5, #0]
 800b07a:	f7f5 ffca 	bl	8001012 <_fstat>
 800b07e:	1c43      	adds	r3, r0, #1
 800b080:	d102      	bne.n	800b088 <_fstat_r+0x1c>
 800b082:	682b      	ldr	r3, [r5, #0]
 800b084:	b103      	cbz	r3, 800b088 <_fstat_r+0x1c>
 800b086:	6023      	str	r3, [r4, #0]
 800b088:	bd38      	pop	{r3, r4, r5, pc}
 800b08a:	bf00      	nop
 800b08c:	20001ea0 	.word	0x20001ea0

0800b090 <_isatty_r>:
 800b090:	b538      	push	{r3, r4, r5, lr}
 800b092:	2300      	movs	r3, #0
 800b094:	4d05      	ldr	r5, [pc, #20]	; (800b0ac <_isatty_r+0x1c>)
 800b096:	4604      	mov	r4, r0
 800b098:	4608      	mov	r0, r1
 800b09a:	602b      	str	r3, [r5, #0]
 800b09c:	f7f5 ffc8 	bl	8001030 <_isatty>
 800b0a0:	1c43      	adds	r3, r0, #1
 800b0a2:	d102      	bne.n	800b0aa <_isatty_r+0x1a>
 800b0a4:	682b      	ldr	r3, [r5, #0]
 800b0a6:	b103      	cbz	r3, 800b0aa <_isatty_r+0x1a>
 800b0a8:	6023      	str	r3, [r4, #0]
 800b0aa:	bd38      	pop	{r3, r4, r5, pc}
 800b0ac:	20001ea0 	.word	0x20001ea0

0800b0b0 <_lseek_r>:
 800b0b0:	b538      	push	{r3, r4, r5, lr}
 800b0b2:	4604      	mov	r4, r0
 800b0b4:	4608      	mov	r0, r1
 800b0b6:	4611      	mov	r1, r2
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	4d05      	ldr	r5, [pc, #20]	; (800b0d0 <_lseek_r+0x20>)
 800b0bc:	602a      	str	r2, [r5, #0]
 800b0be:	461a      	mov	r2, r3
 800b0c0:	f7f5 ffc0 	bl	8001044 <_lseek>
 800b0c4:	1c43      	adds	r3, r0, #1
 800b0c6:	d102      	bne.n	800b0ce <_lseek_r+0x1e>
 800b0c8:	682b      	ldr	r3, [r5, #0]
 800b0ca:	b103      	cbz	r3, 800b0ce <_lseek_r+0x1e>
 800b0cc:	6023      	str	r3, [r4, #0]
 800b0ce:	bd38      	pop	{r3, r4, r5, pc}
 800b0d0:	20001ea0 	.word	0x20001ea0

0800b0d4 <_malloc_usable_size_r>:
 800b0d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0d8:	1f18      	subs	r0, r3, #4
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	bfbc      	itt	lt
 800b0de:	580b      	ldrlt	r3, [r1, r0]
 800b0e0:	18c0      	addlt	r0, r0, r3
 800b0e2:	4770      	bx	lr

0800b0e4 <_read_r>:
 800b0e4:	b538      	push	{r3, r4, r5, lr}
 800b0e6:	4604      	mov	r4, r0
 800b0e8:	4608      	mov	r0, r1
 800b0ea:	4611      	mov	r1, r2
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	4d05      	ldr	r5, [pc, #20]	; (800b104 <_read_r+0x20>)
 800b0f0:	602a      	str	r2, [r5, #0]
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	f7f5 ff49 	bl	8000f8a <_read>
 800b0f8:	1c43      	adds	r3, r0, #1
 800b0fa:	d102      	bne.n	800b102 <_read_r+0x1e>
 800b0fc:	682b      	ldr	r3, [r5, #0]
 800b0fe:	b103      	cbz	r3, 800b102 <_read_r+0x1e>
 800b100:	6023      	str	r3, [r4, #0]
 800b102:	bd38      	pop	{r3, r4, r5, pc}
 800b104:	20001ea0 	.word	0x20001ea0

0800b108 <_init>:
 800b108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b10a:	bf00      	nop
 800b10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b10e:	bc08      	pop	{r3}
 800b110:	469e      	mov	lr, r3
 800b112:	4770      	bx	lr

0800b114 <_fini>:
 800b114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b116:	bf00      	nop
 800b118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b11a:	bc08      	pop	{r3}
 800b11c:	469e      	mov	lr, r3
 800b11e:	4770      	bx	lr
